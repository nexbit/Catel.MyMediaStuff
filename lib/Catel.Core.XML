<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Catel.Core</name>
    </assembly>
    <members>
        <member name="T:Catel.Diagnostics.TraceListenerBase">
            <summary>
            Class that implements a trace listener.
            </summary>
        </member>
        <member name="F:Catel.Diagnostics.TraceListenerBase.ItemsSourceTimingIssueTrace">
            <summary>
            Trace message for the ItemsSource timing issue. This line should be ignored.
            </summary>
        </member>
        <member name="M:Catel.Diagnostics.TraceListenerBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Diagnostics.TraceListenerBase"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:System.Diagnostics.TraceListener"/>.</param>
        </member>
        <member name="M:Catel.Diagnostics.TraceListenerBase.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args"/> array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
            </PermissionSet>
        </member>
        <member name="M:Catel.Diagnostics.TraceListenerBase.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Writes trace information, a message, and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache"/> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType"/> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">A message to write.</param>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode"/>
            </PermissionSet>
        </member>
        <member name="M:Catel.Diagnostics.TraceListenerBase.Write(System.String)">
            <summary>
            Writes text to the output window.
            </summary>
            <param name="message">Message to write.</param>
        </member>
        <member name="M:Catel.Diagnostics.TraceListenerBase.WriteLine(System.String)">
            <summary>
            Writes a line of text to the output window.
            </summary>
            <param name="message">Message to write.</param>
        </member>
        <member name="M:Catel.Diagnostics.TraceListenerBase.OnTrace(System.String,System.Diagnostics.TraceEventType)">
            <summary>
            Called when a new trace has occurred.
            </summary>
            <param name="message">The message.</param>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="P:Catel.Diagnostics.TraceListenerBase.TraceSourceCollection">
            <summary>
            Gets or sets the trace source collection.
            </summary>
            <value>The trace source collection.</value>
        </member>
        <member name="P:Catel.Diagnostics.TraceListenerBase.ActiveTraceLevel">
            <summary>
            Gets or sets the active trace type.
            </summary>
        </member>
        <member name="T:Catel.Diagnostics.TraceHelper">
            <summary>
            Trace helper class.
            </summary>
        </member>
        <member name="F:Catel.Diagnostics.TraceHelper._traceLevels">
            <summary>
            Available trace levels.
            </summary>
        </member>
        <member name="F:Catel.Diagnostics.TraceHelper._stopwatchTracers">
            <summary>
            Dictionary of currently living stopwatch traces.
            </summary>
        </member>
        <member name="M:Catel.Diagnostics.TraceHelper.StartStopwatchTrace(System.String)">
            <summary>
            Starts the trace of a stopwatch trace. Should be ended with a call to <see cref="M:Catel.Diagnostics.TraceHelper.StopStopwatchTrace(System.String)"/>.
            </summary>
            <param name="name">The name of the stopwatch.</param>
        </member>
        <member name="M:Catel.Diagnostics.TraceHelper.StartStopwatchTrace(System.String,System.Boolean)">
            <summary>
            Starts the trace of a stopwatch trace. Should be ended with a call to <see cref="M:Catel.Diagnostics.TraceHelper.StopStopwatchTrace(System.String)"/>.
            </summary>
            <param name="name">The name of the stopwatch.</param>
            <param name="traceNameOnStart">if set to <c>true</c>, the name will be traced both on the start and stop of the stopwatch.</param>
        </member>
        <member name="M:Catel.Diagnostics.TraceHelper.StopStopwatchTrace(System.String)">
            <summary>
            Stops the stopwatch trace and writes the duration as Verbose to the trace.
            </summary>
            <param name="name">The name of the stopwatch.</param>
        </member>
        <member name="M:Catel.Diagnostics.TraceHelper.ConvertTraceEventTypeToTraceLevel(System.Diagnostics.TraceEventType)">
            <summary>
            Converts a <see cref="T:System.Diagnostics.TraceEventType"/> to a <see cref="T:System.Diagnostics.TraceLevel"/>.
            </summary>
            <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType"/> to convert.</param>
            <returns><see cref="T:System.Diagnostics.TraceLevel"/> that represents a <see cref="T:System.Diagnostics.TraceEventType"/>.</returns>
        </member>
        <member name="M:Catel.Diagnostics.TraceHelper.TraceErrorWithDetails(System.String,System.String)">
            <summary>
            Traces an error message with details.
            </summary>
            <param name="message">Message of the trace.</param>
            <param name="details">Additional details which will be listed later in the trace.</param>
        </member>
        <member name="M:Catel.Diagnostics.TraceHelper.TraceWarningWithDetails(System.String,System.String)">
            <summary>
            Traces a warning message with details.
            </summary>
            <param name="message">Message of the trace.</param>
            <param name="details">Additional details which will be listed later in the trace.</param>
        </member>
        <member name="M:Catel.Diagnostics.TraceHelper.TraceInformationWithDetails(System.String,System.String)">
            <summary>
            Traces an information message with details.
            </summary>
            <param name="message">Message of the trace.</param>
            <param name="details">Additional details which will be listed later in the trace.</param>
        </member>
        <member name="M:Catel.Diagnostics.TraceHelper.TraceVerboseWithDetails(System.String,System.String)">
            <summary>
            Traces a verbose message with details.
            </summary>
            <param name="message">Message of the trace.</param>
            <param name="details">Additional details which will be listed later in the trace.</param>
        </member>
        <member name="M:Catel.Diagnostics.TraceHelper.TraceWithDetails(System.Diagnostics.TraceLevel,System.String,System.String)">
            <summary>
            Traces a message with details.
            </summary>
            <param name="level"><see cref="T:System.Diagnostics.TraceLevel"/> to write.</param>
            <param name="message">Message of the trace.</param>
            <param name="details">Additional details which will be listed later in the trace.</param>
        </member>
        <member name="T:Catel.MVVM.Services.ISaveFileService">
            <summary>
            Interface for the Save File service.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IFileSupport">
            <summary>
            Interface that supports file handling.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IFileSupport.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns><c>true</c> if a file is selected; otherwise <c>false</c>.</returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.IFileSupport.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.IFileSupport.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.IFileSupport.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Catel.MVVM.Services.IFileSupport.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="T:Catel.AssemblyHelper">
            <summary>
            Assembly helper class.
            </summary>
        </member>
        <member name="M:Catel.AssemblyHelper.GetLoadedAssemblies">
            <summary>
            Gets the loaded assemblies by using the right method. For Windows applications, it uses
            <c>AppDomain.GetAssemblies()</c>. For Silverlight, it uses the assemblies
            from the current application.
            </summary>
            <returns>
            	<see cref="T:System.Collections.Generic.List`1"/> of all loaded assemblies.
            </returns>
        </member>
        <member name="M:Catel.AssemblyHelper.GetLoadedAssemblies(System.AppDomain)">
            <summary>
            Gets the loaded assemblies by using the right method. For Windows applications, it uses
            <c>AppDomain.GetAssemblies()</c>. For Silverlight, it uses the assemblies
            from the current application.
            </summary>
            <param name="appDomain">The app domain to search in.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.List`1"/> of all loaded assemblies.
            </returns>
        </member>
        <member name="T:Catel.Data.PropertyNotRegisteredException">
            <summary>
            Exception when a property is used by the <see cref="T:Catel.Data.DataObjectBase`1"/> class that is
            not registered by the object.
            </summary>
        </member>
        <member name="M:Catel.Data.PropertyNotRegisteredException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.PropertyNotRegisteredException"/> class.
            </summary>
            <param name="propertyName">Name of the property that caused the exception.</param>
            <param name="objectType">Type of the object that is trying to register the property.</param>
        </member>
        <member name="P:Catel.Data.PropertyNotRegisteredException.PropertyName">
            <summary>
            Gets or sets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Catel.Data.PropertyNotRegisteredException.ObjectType">
            <summary>
            Gets or sets the object type for which the property is already registered.
            </summary>
            <value>The object type for which the property is already registered.</value>
        </member>
        <member name="T:Catel.Data.PropertyDataManager">
            <summary>
            Property data manager.
            </summary>
        </member>
        <member name="F:Catel.Data.PropertyDataManager._propertyData">
            <summary>
            Dictionary containing all the properties per type.
            </summary>
        </member>
        <member name="F:Catel.Data.PropertyDataManager._propertyDataLock">
            <summary>
            Lock object for the <see cref="F:Catel.Data.PropertyDataManager._propertyData"/> field.
            </summary>
        </member>
        <member name="F:Catel.Data.PropertyDataManager._xmlNameToPropertyNameMappings">
            <summary>
            Dictionary to provide fast xml name to property name mappings.
            </summary>
        </member>
        <member name="F:Catel.Data.PropertyDataManager._xmlPropertyNameToXmlNameMappings">
            <summary>
            Dictionary to provide fast property name to xml name mappings.
            </summary>
        </member>
        <member name="M:Catel.Data.PropertyDataManager.GetProperties(System.Type)">
            <summary>
            Gets the properties of a specific type.
            </summary>
            <param name="type">The type for which the properties to return.</param>
            <returns>Dictionary with the properties.</returns>
        </member>
        <member name="M:Catel.Data.PropertyDataManager.RegisterProperty(System.Type,System.String,Catel.Data.PropertyData)">
            <summary>
            Registers a property for a specific type.
            </summary>
            <param name="type">The type for which to register the property.</param>
            <param name="name">The name of the property.</param>
            <param name="propertyData">The property data.</param>
        </member>
        <member name="M:Catel.Data.PropertyDataManager.IsPropertyRegistered(System.Type,System.String)">
            <summary>
            Returns whether a specific property is registered.
            </summary>
            <param name="type">The type for which to check whether the property is registered.</param>
            <param name="name">The name of the property.</param>
            <returns>
            True if the property is registered, otherwise false.
            </returns>
        </member>
        <member name="M:Catel.Data.PropertyDataManager.GetPropertyData(System.Type,System.String)">
            <summary>
            Gets the property data.
            </summary>
            <param name="type">The type for which to get the property data.</param>
            <param name="name">The name of the property.</param>
            <returns>The <see cref="T:Catel.Data.PropertyData"/> of the requested property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">Thrown when the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.PropertyDataManager.MapXmlNameToPropertyName(System.Type,System.String)">
            <summary>
            Maps the name of the XML element to a property name.
            </summary>
            <param name="type">The type for which to make the xml name.</param>
            <param name="xmlName">Name of the XML element.</param>
            <returns>
            Name of the property that represents the xml value.
            </returns>
        </member>
        <member name="M:Catel.Data.PropertyDataManager.MapPropertyNameToXmlName(System.Type,System.String)">
            <summary>
            Maps the name of the property name to an XML name.
            </summary>
            <param name="type">The type for which to make the xml name.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
            Name of the XML element that represents the property value.
            </returns>
        </member>
        <member name="M:Catel.Data.PropertyDataManager.InitializeXmlPropertyMappings(System.Type)">
            <summary>
            Initializes the XML property mappings.
            </summary>
            <param name="type">The type for which to initialize the xml mappings.</param>
        </member>
        <member name="T:Catel.Reflection.PropertySorter">
            <summary>
            PropertySorter class to allow a user to specify the order of properties in a PropertyGrid.
            </summary>
        </member>
        <member name="M:Catel.Reflection.PropertySorter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Catel.Reflection.PropertySorter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Catel.Reflection.PropertyOrderAttribute">
            <summary>
            Simple attribute to allow the order of a property to be specified.
            </summary>
        </member>
        <member name="M:Catel.Reflection.PropertyOrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Reflection.PropertyOrderAttribute"/> class.
            </summary>
            <param name="order">The order.</param>
        </member>
        <member name="P:Catel.Reflection.PropertyOrderAttribute.Order">
            <summary>
            Gets the order.
            </summary>
            <value>The order.</value>
        </member>
        <member name="T:Catel.Reflection.PropertyOrderPair">
            <summary>
            Property order pair class.
            </summary>
        </member>
        <member name="M:Catel.Reflection.PropertyOrderPair.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Reflection.PropertyOrderPair"/> class.
            </summary>
            <param name="name">The name of the property order pair.</param>
            <param name="order">The order of the property.</param>
        </member>
        <member name="M:Catel.Reflection.PropertyOrderPair.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="P:Catel.Reflection.PropertyOrderPair.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name of the property order pair.</value>
        </member>
        <member name="P:Catel.Reflection.PropertyOrderPair.Order">
            <summary>
            Gets or sets the order.
            </summary>
            <value>The order of the property.</value>
        </member>
        <member name="T:Catel.Reflection.PropertyNotFoundException">
            <summary>
            Exception for in case a property is not found.
            </summary>
        </member>
        <member name="M:Catel.Reflection.PropertyNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Reflection.PropertyNotFoundException"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Catel.Reflection.PropertyNotFoundException.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="T:Catel.MVVM.IViewModel">
            <summary>
            View model interface.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.Initialize">
            <summary>
            Initializes the data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.InitializeViewModel">
            <summary>
            Initializes the data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.Validate">
            <summary>
            Validates the data.
            </summary>
            <returns>
            	<c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.ValidateViewModel">
            <summary>
            Validates the data.
            </summary>
            <returns>
            	<c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.Validate(System.Boolean,System.Boolean)">
            <summary>
            Validates the specified notify changed properties only.
            </summary>
            <param name="force">if set to <c>true</c>, a validation is forced (even if the object knows it is already validated).</param>
            <param name="notifyChangedPropertiesOnly">if set to <c>true</c> only the properties for which the warnings or errors have been changed
            will be updated via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>; otherwise all the properties that
            had warnings or errors but not anymore and properties still containing warnings or errors will be updated.</param>
            <returns>
            	<c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
            <remarks>
            This method is useful when the view model is initialized before the window, and therefore WPF does not update the errors and warnings.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.IViewModel.ValidateViewModel(System.Boolean,System.Boolean)">
            <summary>
            Validates the specified notify changed properties only.
            </summary>
            <param name="force">if set to <c>true</c>, a validation is forced (even if the object knows it is already validated).</param>
            <param name="notifyChangedPropertiesOnly">if set to <c>true</c> only the properties for which the warnings or errors have been changed
            will be updated via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>; otherwise all the properties that
            had warnings or errors but not anymore and properties still containing warnings or errors will be updated.</param>
            <returns>
            	<c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
            <remarks>
            This method is useful when the view model is initialized before the window, and therefore WPF does not update the errors and warnings.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.IViewModel.Cancel">
            <summary>
            Cancels the editing of the data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CancelViewModel">
            <summary>
            Cancels the editing of the data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CancelAndClose">
            <summary>
            Cancels the editing of the data, but also closes the view model in the same call.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CancelAndCloseViewModel">
            <summary>
            Cancels the editing of the data, but also closes the view model in the same call.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.Save">
            <summary>
            Saves the data.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.SaveViewModel">
            <summary>
            Saves the data.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.SaveAndClose">
            <summary>
            Saves the data, but also closes the view model in the same call if the save succeeds.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.SaveAndCloseViewModel">
            <summary>
            Saves the data, but also closes the view model in the same call if the save succeeds.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.IViewModel.Close">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.IViewModel.Cancel"/> of <see cref="M:Catel.MVVM.IViewModel.Save"/> method.
            </summary>
        </member>
        <member name="M:Catel.MVVM.IViewModel.CloseViewModel">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.IViewModel.CancelViewModel"/> of <see cref="M:Catel.MVVM.IViewModel.SaveViewModel"/> method.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IViewModel.IsInitialized">
            <summary>
            Gets a value indicating whether the view model is initialized.
            </summary>
            <value>
            	<c>true</c> if the view model is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.HasErrors">
            <summary>
            Gets a value indicating whether this instance has errors.
            </summary>
            <value>
            	<c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.HasDirtyModel">
            <summary>
            Gets a value indicating whether this instance has a dirty model.
            </summary>
            <value><c>true</c> if this instance has a dirty model; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.IViewModel.Title">
            <summary>
            Gets the title of the view model.
            </summary>
            <value>The title.</value>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Saving">
            <summary>
            Occurs when the view model is about the be saved.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Saved">
            <summary>
            Occurs when the view model is saved successfully.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Canceling">
            <summary>
            Occurs when the view model is about to be canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Canceled">
            <summary>
            Occurrs when the view model is canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.IViewModel.Closed">
            <summary>
            Occurs when the view model is being closed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.PleaseWaitWorkDelegate">
            <summary>
            Please wait work delegate.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IPleaseWaitService">
            <summary>
            Interface for the Please Wait service.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.Show">
            <summary>
            Shows the please wait window with the default status text.
            </summary>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.IPleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.IPleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.UpdateStatus(System.String,System.Int32)">
            <summary>
            Updates the status.
            </summary>
            <param name="status">The status.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IPleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="T:Catel.MVVM.PropertyNotFoundInModelException">
            <summary>
            Exception in case a mapped property is not found on the model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.PropertyNotFoundInModelException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.PropertyNotFoundInModelException"/> class.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <param name="modelName">Name of the model.</param>
            <param name="modelPropertyName">Name of the model property.</param>
        </member>
        <member name="P:Catel.MVVM.PropertyNotFoundInModelException.ViewModelPropertyName">
            <summary>
            Gets the name of the view model property.
            </summary>
            <value>The name of the view model property.</value>
        </member>
        <member name="P:Catel.MVVM.PropertyNotFoundInModelException.ModelName">
            <summary>
            Gets the name of the model.
            </summary>
            <value>The name of the model.</value>
        </member>
        <member name="P:Catel.MVVM.PropertyNotFoundInModelException.ModelPropertyName">
            <summary>
            Gets the name of the model property.
            </summary>
            <value>The name of the model property.</value>
        </member>
        <member name="T:Catel.Environment">
            <summary>
            Environment information about Catel.
            </summary>
        </member>
        <member name="T:Catel.Enum`1">
            <summary>
            Generic enumeration wrapper.
            </summary>
            <typeparam name="TEnum">Type of the enumeration to wrap.</typeparam>
        </member>
        <member name="M:Catel.Enum`1.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Enum`1"/> class.
            </summary>
        </member>
        <member name="M:Catel.Enum`1.ToList">
            <summary>
            Converts an enumaration to a list.
            </summary>
            <returns><see cref="T:System.Collections.Generic.List`1"/> containing all the values.</returns>
        </member>
        <member name="M:Catel.Enum`1.GetName(System.Int32)">
            <summary>
            Gets the name.
            </summary>
            <param name="value">The value.</param>
            <returns>The name of the value.</returns>
        </member>
        <member name="M:Catel.Enum`1.GetName(System.Int64)">
            <summary>
            Gets the name.
            </summary>
            <param name="value">The value.</param>
            <returns>The name of the value.</returns>
        </member>
        <member name="M:Catel.Enum`1.GetNames">
            <summary>
            Gets the names.
            </summary>
            <returns>Array of names of an enum.</returns>
        </member>
        <member name="M:Catel.Enum`1.GetValues(System.Type)">
            <summary>
            Gets the values from an enum.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/> of values.</returns>
        </member>
        <member name="M:Catel.Enum`1.GetValues``1">
            <summary>
            Gets the values.
            </summary>
            <typeparam name="T">Type of the enum.</typeparam>
            <returns><see cref="T:System.Collections.Generic.List`1"/> of values.</returns>
        </member>
        <member name="M:Catel.Enum`1.TryParse(System.String,System.Nullable{`0}@)">
            <summary>
            Tries to parse an enum value name.
            </summary>
            <param name="input">The input.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Enum`1.TryParse(System.String,`0@)">
            <summary>
            Tries to parse an enum value name.
            </summary>
            <param name="input">The input.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Enum`1.GetName(`0)">
            <summary>
            Gets the name.
            </summary>
            <param name="value">The value.</param>
            <returns>The name of the value.</returns>
        </member>
        <member name="T:Catel.Enum`1.DataBinding">
            <summary>
            DataBinding class.
            </summary>
        </member>
        <member name="M:Catel.Enum`1.DataBinding.CreateList">
            <summary>
            Creates a list.
            </summary>
            <returns>Empty generic bindable enum list.</returns>
        </member>
        <member name="M:Catel.Enum`1.DataBinding.CreateList(Catel.Enum{`0}.DataBinding.FormatEnumName)">
            <summary>
            Creates a list based on an enum.
            </summary>
            <param name="formatName">Name of the format.</param>
            <returns>List containing bindable enums based on the format name.</returns>
        </member>
        <member name="T:Catel.Enum`1.DataBinding.FormatEnumName">
            <summary>
            Delegate used for formatting an enum name.
            </summary>
            <param name="value">The value to format.</param>
            <returns>String containing the enum name.</returns>
        </member>
        <member name="T:Catel.Enum`1.DataBinding.InternalBindableEnum">
            <summary>
            Internal bindable enum.
            </summary>
        </member>
        <member name="T:Catel.IBindableEnum`1">
            <summary>
            Bindable enumeration.
            </summary>
            <typeparam name="T">Type of the enum to bind.</typeparam>
        </member>
        <member name="P:Catel.IBindableEnum`1.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name of the bindable enum.</value>
        </member>
        <member name="P:Catel.IBindableEnum`1.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value of the bindable enum.</value>
        </member>
        <member name="F:Catel.Enum`1.DataBinding.InternalBindableEnum.name">
            <summary>
            Name of the internal bindable enum.
            </summary>
        </member>
        <member name="F:Catel.Enum`1.DataBinding.InternalBindableEnum.value">
            <summary>
            Value of the internal bindable enum.
            </summary>
        </member>
        <member name="M:Catel.Enum`1.DataBinding.InternalBindableEnum.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Enum`1.DataBinding.InternalBindableEnum"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Catel.Enum`1.DataBinding.InternalBindableEnum.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Enum`1.DataBinding.InternalBindableEnum"/> class.
            </summary>
            <param name="value">The value of the internal bindable enum.</param>
            <param name="name">The name of the internal bindable enum.</param>
        </member>
        <member name="M:Catel.Enum`1.DataBinding.InternalBindableEnum.CompareTo(Catel.IBindableEnum{`0})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings: Value Meaning Less than zero This object is less
            than the other parameter.  Zero This object is equal to other. Greater than zero This object is
            greater than other.
            </returns>
        </member>
        <member name="M:Catel.Enum`1.DataBinding.InternalBindableEnum.Equals(Catel.IBindableEnum{`0})">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="other"/> parameter is null.
            </exception>
        </member>
        <member name="P:Catel.Enum`1.DataBinding.InternalBindableEnum.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name of the enum.</value>
        </member>
        <member name="P:Catel.Enum`1.DataBinding.InternalBindableEnum.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value of the enum.</value>
        </member>
        <member name="T:Catel.Enum`1.Flags">
            <summary>
            Flags class.
            </summary>
        </member>
        <member name="F:Catel.Enum`1.Flags.typeCode">
            <summary>
            Type code of the flags.
            </summary>
        </member>
        <member name="M:Catel.Enum`1.Flags.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Enum`1.Flags"/> class.
            </summary>
        </member>
        <member name="M:Catel.Enum`1.Flags.ClearFlag(`0,`0)">
            <summary>
            Clears the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToClear">The flag to clear.</param>
            <returns>Flags without the flag that should be cleared.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.ClearFlag(System.Int32,`0)">
            <summary>
            Clears the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToClear">The flag to clear.</param>
            <returns>Flags without the flag that should be cleared.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.ClearFlag(System.Int64,`0)">
            <summary>
            Clears the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToClear">The flag to clear.</param>
            <returns>Flags without the flag that should be cleared.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.ClearFlag(System.Int32,System.Int32)">
            <summary>
            Clears the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToClear">The flag to clear.</param>
            <returns>Flags without the flag that should be cleared.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.ClearFlag(System.Int64,System.Int64)">
            <summary>
            Clears the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToClear">The flag to clear.</param>
            <returns>Flags without the flag that should be cleared.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.IsFlagSet(`0,`0)">
            <summary>
            Determines whether a specific flag is set.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToFind">The flag to find.</param>
            <returns>
            	<c>true</c> if the flag is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.IsFlagSet(System.Int32,`0)">
            <summary>
            Determines whether a specific flag is set.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToFind">The flag to find.</param>
            <returns>
            	<c>true</c> if the flag is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.IsFlagSet(System.Int64,`0)">
            <summary>
            Determines whether a specific flag is set.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToFind">The flag to find.</param>
            <returns>
            	<c>true</c> if the flag is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.IsFlagSet(System.Int32,System.Int32)">
            <summary>
            Determines whether a specific flag is set.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToFind">The flag to find.</param>
            <returns>
            	<c>true</c> if the flag is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.IsFlagSet(System.Int64,System.Int64)">
            <summary>
            Determines whether a specific flag is set.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToFind">The flag to find.</param>
            <returns>
            	<c>true</c> if the flag is set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.SetFlag(`0,`0)">
            <summary>
            Sets the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToSet">The flag to set.</param>
            <returns>Flags with the flag that should be set.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.SetFlag(System.Int32,`0)">
            <summary>
            Sets the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToSet">The flag to set.</param>
            <returns>Flags with the flag that should be set.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.SetFlag(System.Int64,`0)">
            <summary>
            Sets the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToSet">The flag to set.</param>
            <returns>Flags with the flag that should be set.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.SetFlag(System.Int32,System.Int32)">
            <summary>
            Sets the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToSet">The flag to set.</param>
            <returns>Flags with the flag that should be set.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.SetFlag(System.Int64,System.Int64)">
            <summary>
            Sets the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToSet">The flag to set.</param>
            <returns>Flags with the flag that should be set.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.SwapFlag(`0,`0)">
            <summary>
            Swaps the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToSwap">The flag to swap.</param>
            <returns>Flags with the flag swapped that should be swapped.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.SwapFlag(System.Int32,`0)">
            <summary>
            Swaps the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToSwap">The flag to swap.</param>
            <returns>Flags with the flag swapped that should be swapped.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.SwapFlag(System.Int64,`0)">
            <summary>
            Swaps the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToSwap">The flag to swap.</param>
            <returns>Flags with the flag swapped that should be swapped.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.SwapFlag(System.Int32,System.Int32)">
            <summary>
            Swaps the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToSwap">The flag to swap.</param>
            <returns>Flags with the flag swapped that should be swapped.</returns>
        </member>
        <member name="M:Catel.Enum`1.Flags.SwapFlag(System.Int64,System.Int64)">
            <summary>
            Swaps the flag.
            </summary>
            <param name="flags">The flags.</param>
            <param name="flagToSwap">The flag to swap.</param>
            <returns>Flags with the flag swapped that should be swapped.</returns>
        </member>
        <member name="T:Catel.Security.Cryptography.CryptHelper">
            <summary>
            Cryptography class which handles most encryptions easily.
            </summary>
        </member>
        <member name="M:Catel.Security.Cryptography.CryptHelper.CalculateMD5FileHash(System.String)">
            <summary>
            Calculates the MD5 hash of a file.
            </summary>
            <param name="fileName">Path of the file to hash.</param>
            <returns>Hash of the file.</returns>
        </member>
        <member name="M:Catel.Security.Cryptography.CryptHelper.CalculateMD5ContentHash(System.String)">
            <summary>
            Calculates the MD5 hash of content.
            </summary>
            <param name="content">Content to hash.</param>
            <returns>Hash of the content.</returns>
        </member>
        <member name="M:Catel.Security.Cryptography.CryptHelper.GetFileStream(System.String)">
            <summary>
            Reads the contents of a file so it can easily be hashes.
            </summary>
            <param name="pathName">Path of the file to hash.</param>
            <returns>Filestream of the file.</returns>
        </member>
        <member name="T:Catel.Properties.TraceMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.AddedInterestedViewModel">
            <summary>
              Looks up a localized string similar to Added interested view model of type &apos;{0}&apos; for type &apos;{1}&apos;, currently containing {2} interested view model(s).
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.AddedViewModelInstance">
            <summary>
              Looks up a localized string similar to Added view model instance, currently containing &apos;{0}&apos; instances of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.AddingPropertyToListOfObjectsToSerialize">
            <summary>
              Looks up a localized string similar to Adding property &apos;{0}&apos; to list of objects to serialize.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.AddingRedirectFromTypeToType">
            <summary>
              Looks up a localized string similar to Adding redirect from &apos;{0}&apos; to &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CanceledViewModel">
            <summary>
              Looks up a localized string similar to Canceled view model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CannotFindProperty">
            <summary>
              Looks up a localized string similar to GetPropertyInfo cannot find the PropertyInfo for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CannotMapFromModelToViewModelBecauseModelIsNull">
            <summary>
              Looks up a localized string similar to Value for model property &apos;{0}&apos; is null, cannot map properties from model to view model.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CannotMapFromViewModelToModelBecauseModelIsNull">
            <summary>
              Looks up a localized string similar to Value for model property &apos;{0}&apos; is null, cannot map properties from view model to model.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CannotReadProperty">
            <summary>
              Looks up a localized string similar to Cannot read property {0}.&apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CannotSetPropertyObjectIsReadonly">
            <summary>
              Looks up a localized string similar to Cannot set property &apos;{0}&apos;, object is currently read-only.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CannotWriteProperty">
            <summary>
              Looks up a localized string similar to Cannot write property {0}.&apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ClosedViewModel">
            <summary>
              Looks up a localized string similar to Closed view model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CreatedBinarySerializer">
            <summary>
              Looks up a localized string similar to Created binary serializer.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CreatedRedirectDeserializationBindinger">
            <summary>
              Looks up a localized string similar to Created redirect deserialization binder.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CreatingBinarySerializer">
            <summary>
              Looks up a localized string similar to Creating binary serializer.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.CreatingRedirectDeserializationBindinger">
            <summary>
              Looks up a localized string similar to Creating redirect deserialization binder.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.DeserializedBinaryStream">
            <summary>
              Looks up a localized string similar to Deserialized binary stream.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.DeserializingBinaryStream">
            <summary>
              Looks up a localized string similar to Deserializing binary stream for type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ErrorDeserializingObject">
            <summary>
              Looks up a localized string similar to An error occurred while deserializing object &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToCallOnDeserializationForChildObjects">
            <summary>
              Looks up a localized string similar to Failed to call IDeserializationCallback.OnDeserialization for child objects.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToCancelEditOfModel">
            <summary>
              Looks up a localized string similar to Failed to cancel the edit of object for model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToDeserializeBinaryObject">
            <summary>
              Looks up a localized string similar to Failed to deserialize the binary object.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToDeserializeDataForBackup">
            <summary>
              Looks up a localized string similar to Failed to deserialize the data for backup, which is weird. However, for Silverlight there is no other option..
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToDeserializeDataForBackupTryingWithRedirects">
            <summary>
              Looks up a localized string similar to Failed to deserialize the data for backup, which is weird. Trying with redirects enabled..
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToDeserializeObject">
            <summary>
              Looks up a localized string similar to Failed to deserialize object.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToDeserializeProperty">
            <summary>
              Looks up a localized string similar to Failed to deserialize property &apos;{0}&apos; stored as &apos;{1}&apos;, using default value.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToEndEditOfModel">
            <summary>
              Looks up a localized string similar to Failed to end the edit of object for model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToGetFieldValue">
            <summary>
              Looks up a localized string similar to Failed to get value for field &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToGetPropertyValue">
            <summary>
              Looks up a localized string similar to Failed to get value for property &apos;{0}&apos; of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToGetTypesOfAssembly">
            <summary>
              Looks up a localized string similar to Failed to get the types of assembly &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToInformInterestedViewModelOfAViewModelChange">
            <summary>
              Looks up a localized string similar to Failed to let an interested view model know that a view model has changed. Probably the view model is not correctly cleaned up.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToLoadType">
            <summary>
              Looks up a localized string similar to Failed to load type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToRefetchRelationForField">
            <summary>
              Looks up a localized string similar to Failed to refetch relation mapped on field &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToRetrieveInnerTypes">
            <summary>
              Looks up a localized string similar to Failed to retrieve inner types.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToSaveViewModel">
            <summary>
              Looks up a localized string similar to Failed to save view model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToSerializeObject">
            <summary>
              Looks up a localized string similar to Failed to serialize object.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FailedToSubscribeToEventsInOnDeserializedMethod">
            <summary>
              Looks up a localized string similar to Failed to subscribe to events in the OnDeserialized method.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FieldNotFound">
            <summary>
              Looks up a localized string similar to Field &apos;{0}&apos; does not exist for &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FinishedDeserializationOfObject">
            <summary>
              Looks up a localized string similar to Finished deserialization of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FoundCommandOnViewModel">
            <summary>
              Looks up a localized string similar to Found command &apos;{0}&apos; on view model &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FoundKnownTypesForXmlSerialization">
            <summary>
              Looks up a localized string similar to Found &apos;{0}&apos; known types for xml serialization.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.FoundRelationForFieldOnType">
            <summary>
              Looks up a localized string similar to Found relation for field &apos;{0}&apos; on type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.GettingDataFromSerializationInfo">
            <summary>
              Looks up a localized string similar to Getting data from serialization info.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.GettingKnownTypesForXmlSerialization">
            <summary>
              Looks up a localized string similar to Getting known types for xml serialization of &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.InitializedRedirectDeserializationBinder">
            <summary>
              Looks up a localized string similar to Initialized redirect deserialization binder.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.InitializingRedirectDeserializationBinder">
            <summary>
              Looks up a localized string similar to Initializing redirect deserialization binder.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.InstantiatedViewModelManager">
            <summary>
              Looks up a localized string similar to ViewModelManager instantiated.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.InterestingViewModelChangedProperty">
            <summary>
              Looks up a localized string similar to A view model (&apos;{0}&apos;) the current view model (&apos;{1}&apos;) is interested in has changed a property (&apos;{2}&apos;).
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.InterestingViewModelExecutedCommand">
            <summary>
              Looks up a localized string similar to A view model (&apos;{0}&apos;) the current view model (&apos;{1}&apos;) is interested in has executed a command with tag &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.LoadingObject">
            <summary>
              Looks up a localized string similar to Loading object &apos;{0}&apos; as &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.MethodNotFound">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; does not exist for object &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.MethodResultIsNull">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; of object &apos;{1}&apos; returned null.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ModelNotRegistered">
            <summary>
              Looks up a localized string similar to There is no model &apos;{0}&apos; registered with the model attribute, so the ViewModelToModel attribute on property &apos;{1}&apos; is invalid.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ObjectAlreadyDeserialized">
            <summary>
              Looks up a localized string similar to Object &apos;{0}&apos; is already deserialized.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ObjectNotDisposedCorrectly">
            <summary>
              Looks up a localized string similar to object &apos;{0}&apos; is not disposed correctly, so object is not fully cleaned up and could not unsubscribe from event handlers. Call the Dispose() method after using this class..
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.PropertyFlaggedToBeExcludedFromSerialization">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is flagged to be excluded from serialization.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.PropertyNotDisposedSinceItIsInIgnoreList">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; of type &apos;{1}&apos; is not disposed since it is in the ignore list.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.PropertyNotFound">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; does not exist for &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.PropertyNotFoundInModel">
             <summary>
               Looks up a localized string similar to Mapped viewmodel property &apos;{0}&apos; to model property &apos;{1}&apos; is invalid because property &apos;{1}&apos; is not found on the model &apos;{2}&apos;
            
            If the property is defined in a sub-interface, reflection does not return it as a valid property. If this is the case, you can safely ignore this warning.
             </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.PropertyNotFoundOnObjectProbablyInvalidMapping">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is not found on the object &apos;{1}&apos;, probably the wrong field is being mapped.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.PropertyNotSerializableSoExcludedFromSerialization">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is not serializable, so will be excluded from the serialization.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.PropertyResultIsNull">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; of object &apos;{1}&apos; returned null.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ReceivedOnDeserialization">
            <summary>
              Looks up a localized string similar to Received OnDeserialization event for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ReceivedOnDeserialized">
            <summary>
              Looks up a localized string similar to Received OnDeserialized event for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.RedirectAlreadyAdded">
            <summary>
              Looks up a localized string similar to A redirect for type &apos;{0}&apos; is already added to &apos;{1}&apos;. The redirect to &apos;{2}&apos; will not be added..
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.RelationsFound">
            <summary>
              Looks up a localized string similar to Found {0} relations for object &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.RemovedInterestedViewModel">
            <summary>
              Looks up a localized string similar to Removed interested view model of type &apos;{0}&apos; for type &apos;{1}&apos;, currently containing {2} interested view model(s).
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.RemovedViewModelInstance">
            <summary>
              Looks up a localized string similar to Removed view model instance, currently containing &apos;{0}&apos; instances of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ResettedStreamPositionToZero">
            <summary>
              Looks up a localized string similar to Resetted stream position to 0.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ResettingStreamPositionToZero">
            <summary>
              Looks up a localized string similar to Resetting stream position to 0.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.SavedViewModel">
            <summary>
              Looks up a localized string similar to Saved view model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.SavingObject">
            <summary>
              Looks up a localized string similar to Saving object &apos;{0}&apos; as &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.SerializationInfoIsNull">
            <summary>
              Looks up a localized string similar to Serialization info is null, no data to retrieve.
            </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.ViewModelImplementsMoreThanOneModelWarning">
             <summary>
               Looks up a localized string similar to The view model {0} implements {1} models.
            
            Normally, a view model only implements 1 model so make sure you are using the Model attribute correctly. If the Model attribute is used correctly (on models only), this warning can be ignored by using a constructor overload..
             </summary>
        </member>
        <member name="P:Catel.Properties.TraceMessages.WrongViewModelPropertyType">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; mapped on model property &apos;{1}&apos; is of the wrong type (&apos;{2}&apos;), should be &apos;{3}&apos;.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.INavigationService">
            <summary>
            Service to navigate inside applications.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.GoBack">
            <summary>
            Navigates back to the previous page.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.GoForward">
            <summary>
            Navigates forward to the next page.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate(System.String)">
            <summary>
            Navigates to a specific location.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates to a specific location.
            </summary>
            <param name="uri">The URI.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate(System.Uri)">
            <summary>
            Navigates to a specific location.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate``1">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <typeparam name="TViewModelType">The view model type.</typeparam>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <typeparam name="TViewModelType">The view model type.</typeparam>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate(System.Type)">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <param name="viewModelType">The view model type.</param>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Navigate(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Navigates the specified location registered using the view model type.
            </summary>
            <param name="viewModelType">The view model type.</param>
            <param name="parameters">Dictionary of parameters, where the key is the name of the parameter, 
            and the value is the value of the parameter.</param>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model and the page type. This way, Catel knowns what
            page to show when a specific view model page is requested.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="pageType">Type of the page.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="pageType"/> is not of the right type.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Register(System.String,System.Type)">
            <summary>
            Registers the specified view model and the page type. This way, Catel knowns what
            page to show when a specific view model page is requested.
            </summary>
            <param name="name">Name of the registered page.</param>
            <param name="pageType">Type of the page.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="pageType"/> is not of the right type.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.INavigationService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered page.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Catel.MVVM.Services.INavigationService.CanGoBack">
            <summary>
            Gets a value indicating whether it is possible to navigate back.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate back; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.Services.INavigationService.CanGoForward">
            <summary>
            Gets a value indicating whether it is possible to navigate forward.
            </summary>
            <value>
            	<c>true</c> if it is possible to navigate forward otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:log4net.log4netHelper">
            <summary>
            Log4net helper class.
            </summary>
        </member>
        <member name="F:log4net.log4netHelper._initialized">
            <summary>
            A value indicating whether the log is initialized.
            </summary>
        </member>
        <member name="M:log4net.log4netHelper.InitializeLog(System.String)">
            <summary>
            Initializes the log. It creates a rolling file appender and console appender with
            default values.
            </summary>
            <param name="logFile">The log file.</param>
            <remarks>
            It is also possible to perform the initialization in the configuraton file.
            </remarks>
        </member>
        <member name="M:log4net.log4netHelper.InitializeRepository(log4net.Repository.ILoggerRepository,System.String)">
            <summary>
            Initializes a hierarchy.
            </summary>
            <param name="repository">The repository.</param>
            <param name="logFile">The log file.</param>
        </member>
        <member name="T:Catel.IO.File">
            <summary>
            File class.
            </summary>
        </member>
        <member name="M:Catel.IO.File.Copy(System.String,System.String)">
            <summary>
            Copies the specified file to the destination path. Overwriting of the destination file is allowed.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <returns>
            	<c>true</c> if the file is copied; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="sourceFileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="destinationFileName"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.File.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies the specified file to the destination path.
            </summary>
            <param name="sourceFileName">Name of the source file.</param>
            <param name="destinationFileName">Name of the destination file.</param>
            <param name="failIfExist">if set to <c>true</c>, the copy action will fail if the destination file already exists.</param>
            <returns>
            	<c>true</c> if the file is copied; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="sourceFileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="destinationFileName"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.File.Create(System.String)">
            <summary>
            Creates the specified file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
            	<see cref="T:System.IO.FileStream"/> of the file.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="filePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.File.Delete(System.String)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
            	<c>true</c> if the file is deleted; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="filePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.File.Exists(System.String)">
            <summary>
            Checks whether the specified file exists.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>
            	<c>true</c> if the file exists; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="filePath"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.IO.File.GetFileSize(System.String)">
            <summary>
            Gets the size of the file.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>Length of the file or <c>0</c> if file is not found.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="filePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.File.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens the specified filePath as a filestream with read and write access and no share permissions.
            </summary>
            <param name="filePath">The filePath.</param>
            <param name="mode">The file mode.</param>
            <returns><see cref="T:System.IO.FileStream"/> of the file.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="filePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the specified filePath as a filestream with the specified access and no share permissions.
            </summary>
            <param name="filePath">The filePath.</param>
            <param name="mode">The file mode.</param>
            <param name="access">The file access.</param>
            <returns>
            	<see cref="T:System.IO.FileStream"/> of the file.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="filePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.File.OpenRead(System.String)">
            <summary>
            Opens the specified filePath as a filestream for reading only.
            </summary>
            <param name="filePath">The filePath.</param>
            <returns>
            	<see cref="T:System.IO.FileStream"/> of the file.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="filePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.File.OpenWrite(System.String)">
            <summary>
            Opens the specified filePath as a filestream for writing only.
            </summary>
            <param name="filePath">The filePath.</param>
            <returns>
            	<see cref="T:System.IO.FileStream"/> of the file.
            </returns>
        </member>
        <member name="M:Catel.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens the specified filePath as a filestream with the specified access and share permissions.
            </summary>
            <param name="filePath">The filePath.</param>
            <param name="mode">The file mode.</param>
            <param name="access">The file access.</param>
            <param name="share">The file share.</param>
            <returns>
            	<see cref="T:System.IO.FileStream"/> of the file.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="filePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.File.GetMode(System.IO.FileMode)">
            <summary>
            Gets the mode.
            </summary>
            <param name="mode">The file mode.</param>
            <returns>Win32 mode of the file.</returns>
        </member>
        <member name="M:Catel.IO.File.GetAccess(System.IO.FileAccess)">
            <summary>
            Converts the FileAccess constant to win32 constant.
            </summary>
            <param name="access">The access.</param>
            <returns>Win32 access of the file.</returns>
        </member>
        <member name="M:Catel.IO.File.GetShare(System.IO.FileShare)">
            <summary>
            Converts the FileShare constant to win32 constant.
            </summary>
            <param name="share">The share.</param>
            <returns>Win32 share of the file.</returns>
        </member>
        <member name="T:Catel.IoC.IoCProvider">
            <summary>
            Unity implementation of the <see cref="T:Catel.IoC.IIoCProvider"/> interface.
            </summary>
        </member>
        <member name="T:Catel.IoC.IIoCProvider">
            <summary>
            IoC provider interface to make sure all versions of Catel can handle IoC in their own way, but
            the classes shared over the projects are not vulnerable for changes.
            </summary>
        </member>
        <member name="M:Catel.IoC.IIoCProvider.IsTypeRegistered``1">
            <summary>
            Determines whether the specified interface type is registered.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <returns>
            	<c>true</c> if the specified interface type is registered; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Note that the actual implementation lays in the hands of the IoC technique being used.
            </remarks>
        </member>
        <member name="M:Catel.IoC.IIoCProvider.IsTypeRegistered(System.Type)">
            <summary>
            Determines whether the specified interface type is registered.
            </summary>
            <param name="interfaceType">The type of the interface.</param>
            <returns>
            	<c>true</c> if the specified interface type is registered; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Note that the actual implementation lays in the hands of the IoC technique being used.
            </remarks>
        </member>
        <member name="M:Catel.IoC.IIoCProvider.RegisterType``2">
            <summary>
            Registers an implementation of an interface.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <remarks>
            Note that the actual implementation lays in the hands of the IoC technique being used.
            </remarks>
        </member>
        <member name="M:Catel.IoC.IIoCProvider.ResolveType``1">
            <summary>
            Resolves an instance of the type registered on the interface.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <returns>
            An instance of the type registered on the interface.
            </returns>
            <remarks>
            Note that the actual implementation lays in the hands of the IoC technique being used.
            </remarks>
        </member>
        <member name="M:Catel.IoC.IIoCProvider.ResolveType(System.Type)">
            <summary>
            Resolves an instance of the type registered on the interface.
            </summary>
            <param name="interfaceType">The type of the interface.</param>
            <returns>
            An instance of the type registered on the interface.
            </returns>
            <remarks>
            Note that the actual implementation lays in the hands of the IoC technique being used.
            </remarks>
        </member>
        <member name="P:Catel.IoC.IIoCProvider.InternalContainer">
            <summary>
            Gets the internal IoC container, for example, from Unity.
            </summary>
            <value>The internal IoC container.</value>
        </member>
        <member name="M:Catel.IoC.IoCProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.IoC.IoCProvider"/> class.
            </summary>
            <remarks>
            Private constructor so this class cannot be constructed externally.
            </remarks>
        </member>
        <member name="M:Catel.IoC.IoCProvider.IsTypeRegistered``1">
            <summary>
            Determines whether the specified interface type is registered.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <returns>
            	<c>true</c> if the specified interface type is registered; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Note that the actual implementation lays in the hands of the IoC technique being used.
            </remarks>
        </member>
        <member name="M:Catel.IoC.IoCProvider.IsTypeRegistered(System.Type)">
            <summary>
            Determines whether the specified interface type is registered.
            </summary>
            <param name="interfaceType">The type of the interface.</param>
            <returns>
            	<c>true</c> if the specified interface type is registered; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Note that the actual implementation lays in the hands of the IoC technique being used.
            </remarks>
        </member>
        <member name="M:Catel.IoC.IoCProvider.RegisterType``2">
            <summary>
            Registers an implementation of an interface.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <typeparam name="TImplementation">The type of the implementation.</typeparam>
            <remarks>
            Note that the actual implementation lays in the hands of the IoC technique being used.
            </remarks>
        </member>
        <member name="M:Catel.IoC.IoCProvider.ResolveType``1">
            <summary>
            Resolves an instance of the type registered on the interface.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <returns>An instance of the type registered on the interface.</returns>
            <remarks>
            Note that the actual implementation lays in the hands of the IoC technique being used.
            </remarks>
        </member>
        <member name="M:Catel.IoC.IoCProvider.ResolveType(System.Type)">
            <summary>
            Resolves an instance of the type registered on the interface.
            </summary>
            <param name="interfaceType">The type of the interface.</param>
            <returns>
            An instance of the type registered on the interface.
            </returns>
            <remarks>
            Note that the actual implementation lays in the hands of the IoC technique being used.
            </remarks>
        </member>
        <member name="P:Catel.IoC.IoCProvider.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Catel.IoC.IIoCProvider"/> implementation.
            </summary>
            <value>The singleton instance.</value>
        </member>
        <member name="P:Catel.IoC.IoCProvider.InternalContainer">
            <summary>
            Gets the internal IoC container, for example, from Unity.
            </summary>
            <value>The internal IoC container.</value>
        </member>
        <member name="T:Catel.Data.IParent">
            <summary>
            Interface that should be implemented by all objects that can have a parent.
            </summary>
        </member>
        <member name="P:Catel.Data.IParent.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="T:Catel.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Catel.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Catel.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Catel.Properties.Resources.CouldNotLoadNewType">
            <summary>
              Looks up a localized string similar to Could not load type &apos;{0}&apos; as &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.Resources.ErrorsFound">
            <summary>
              Looks up a localized string similar to {0} has the following errors:.
            </summary>
        </member>
        <member name="P:Catel.Properties.Resources.TraceWithDetails">
             <summary>
               Looks up a localized string similar to {0}
            
            Details:
            {1}.
             </summary>
        </member>
        <member name="P:Catel.Properties.Resources.WarningsFound">
            <summary>
              Looks up a localized string similar to {0} has the following warnings:.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ViewModelManager">
            <summary>
            Manager for view models. Thanks to this manager, it is possible to subscribe to other view models and be able to respond
            correctly to property changes in other views.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelManager._managedViewModels">
            <summary>
            Dictionary containing all the managed view models by this view model manager.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelManager"/> class.
            </summary>
            <remarks>
            The constructor is private because this is a singleton class.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RegisterViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Registers a view model instance with the manager. All view models must register themselves to the manager.
            </summary>
            <param name="viewModel">The view model to register.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RegisterViewModelInstanceInternal(Catel.MVVM.IViewModel)">
            <summary>
            Registers a view model instance with the manager. All view models must register themselves to the manager.
            </summary>
            <param name="viewModel">The view model to register.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.UnregisterViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters a view model instance from the manager. All view models must unregister themselves from the manager.
            </summary>
            <param name="viewModel">The view model to unregister.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.UnregisterViewModelInstanceInternal(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters a view model instance from the manager. All view models must unregister themselves from the manager.
            </summary>
            <param name="viewModel">The view model to unregister.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.AddInterestedViewModelInstance(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Adds an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically register
            itself to the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> is interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.AddInterestedViewModelInstanceInternal(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Adds an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically register
            itself to the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> is interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RemoveInterestedViewModelInstance(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Removes an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically unregister
            itself from the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> was interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.RemoveInterestedViewModelInstanceInternal(System.Type,Catel.MVVM.IViewModel)">
            <summary>
            Removes an interested view model instance. The <see cref="T:Catel.MVVM.IViewModel"/> class will automatically unregister
            itself from the manager by using this method when decorated with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModelType">Type of the view model the <paramref name="viewModel"/> was interested in.</param>
            <param name="viewModel">The view model instance.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModelType"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelManager.GetManagedViewModel(System.Type)">
            <summary>
            Gets the managed view model for a specific view model type.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <returns>The <see cref="T:Catel.MVVM.ManagedViewModel"/> of the specified type.</returns>
        </member>
        <member name="T:Catel.MVVM.Services.LocationChangedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation which contains a location.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.LocationChangedEventArgs.#ctor(Catel.MVVM.Services.ILocation)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.LocationChangedEventArgs"/> class.
            </summary>
            <param name="newLocation">The new location.</param>
        </member>
        <member name="P:Catel.MVVM.Services.LocationChangedEventArgs.Location">
            <summary>
            Gets the new location.
            </summary>
            <value>The new location.</value>
        </member>
        <member name="T:Catel.Data.AllowNonSerializableMembersAttribute">
            <summary>
            Attribute to define that a <see cref="T:Catel.Data.DataObjectBase"/> class can contain non-serializable members. This attribute
            must be used with care, because it will disable the serialization functionality of the <see cref="T:Catel.Data.DataObjectBase"/>.
            </summary>
        </member>
        <member name="T:Catel.Collections.CollectionHelper">
            <summary>
            Collection helper class.
            </summary>
        </member>
        <member name="M:Catel.Collections.CollectionHelper.IsEqualTo(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Checks whether a collection is the same as another collection.
            </summary>
            <param name="listA">The list A.</param>
            <param name="listB">The list B.</param>
            <returns>
            True if the two collections contain all the same items in the same order.
            </returns>
        </member>
        <member name="T:Catel.Data.SerializationMode">
            <summary>
            Enumeration containing all the available serialization modes for the <see cref="T:Catel.Data.DataObjectBase`1"/> class.
            </summary>
        </member>
        <member name="F:Catel.Data.SerializationMode.Binary">
            <summary>
            Serialize using the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/>.
            </summary>
        </member>
        <member name="F:Catel.Data.SerializationMode.Xml">
            <summary>
            Serialize using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="T:Catel.Data.DataObjectBase">
            <summary>
            Abstract class that serves as a base class for serializable objects.
            </summary>
        </member>
        <member name="T:Catel.Data.IDataObjectBase">
            <summary>
            IDataObjectBase that the <see cref="T:Catel.Data.DataObjectBase`1"/> must implement to easily pass objects to methods as non-generic.
            </summary>
            <remarks>
            This interface defines all the non-generic interfaces that the <see cref="T:Catel.Data.DataObjectBase`1"/> class implements.
            </remarks>
        </member>
        <member name="T:Catel.ComponentModel.IDataWarningInfo">
            <summary>
            Interface that is based on the <see cref="T:System.ComponentModel.IDataErrorInfo"/> interface, but supports warnings instead of errors.
            </summary>
        </member>
        <member name="P:Catel.ComponentModel.IDataWarningInfo.Warning">
            <summary>
            Gets the warning.
            </summary>
            <value>
            A warning message indicating what is possibly wrong with this object. The default is
            an empty string ("").
            </value>
        </member>
        <member name="P:Catel.ComponentModel.IDataWarningInfo.Item(System.String)">
            <summary>
            Gets the warning message for the property with the given name.
            </summary>
            <value></value>
            <param name="columnName">The name of the property whose warning message to get.</param>
        </member>
        <member name="M:Catel.Data.IDataObjectBase.GetDefaultValue(System.String)">
            <summary>
            Returns the default value of a specific property.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>Default value of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">Thrown when the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.IDataObjectBase.GetDefaultValue(Catel.Data.PropertyData)">
            <summary>
            Returns the default value of a specific property.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <returns>Default value of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">Thrown when the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.IDataObjectBase.GetPropertyType(System.String)">
            <summary>
            Returns the type of a specific property.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>Type of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">Thrown when the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.IDataObjectBase.GetPropertyType(Catel.Data.PropertyData)">
            <summary>
            Returns the type of a specific property.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <returns>Type of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">Thrown when the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.IDataObjectBase.Validate">
            <summary>
            Validates the current object for field and business rule errors.
            </summary>
            <remarks>
            To check wether this object contains any errors, use the <see cref="P:Catel.Data.IDataObjectBase.HasErrors"/> property.
            <para/>
            This method does not force validation. This means that when the object is already validated,
            and no properties have been changed, no validation actually occurs since there is no reason
            for any values to have changed.
            </remarks>
        </member>
        <member name="M:Catel.Data.IDataObjectBase.Validate(System.Boolean)">
            <summary>
            Validates the current object for field and business rule errors.
            </summary>
            <param name="force">if set to <c>true</c>, a validation is forced.</param>
            <remarks>
            To check wether this object contains any errors, use the <see cref="P:Catel.Data.IDataObjectBase.HasErrors"/> property.
            </remarks>
        </member>
        <member name="P:Catel.Data.IDataObjectBase.KeyName">
            <summary>
            Gets the name of the object. By default, this is the name of the inherited class.
            </summary>
            <value>The name of the key.</value>
        </member>
        <member name="P:Catel.Data.IDataObjectBase.IsDirty">
            <summary>
            Gets a value indicating whether this object is dirty.
            </summary>
            <value><c>true</c> if this object is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Data.IDataObjectBase.HasWarnings">
            <summary>
            Gets a value indicating whether this object contains any field or business warnings.
            </summary>
            <value>
            	<c>true</c> if this instance has warnings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.IDataObjectBase.HasErrors">
            <summary>
            Gets a value indicating whether this object contains any field or business errors.
            </summary>
            <value>
            	<c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Catel.Data.DataObjectBase.WarningMessageProperty">
            <summary>
            The name of the <see cref="P:Catel.ComponentModel.IDataWarningInfo.Warning"/> property.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase.ErrorMessageProperty">
            <summary>
            The name of the <see cref="P:System.ComponentModel.IDataErrorInfo.Error"/> property.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase.UncomputedHashCode">
            <summary>
            The constant that represents the uncomputed hash code.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._initializedTypes">
            <summary>
            Dictionary of initialized types.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._initializedTypesLock">
            <summary>
            Lock object for the <see cref="F:Catel.Data.DataObjectBase._initializedTypes"/> field.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._typesNotToDispose">
            <summary>
            List of types not to dispose automatically.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._propertyValues">
            <summary>
            The property values.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._propertyValuesLock">
            <summary>
            Lock object for the <see cref="F:Catel.Data.DataObjectBase._propertyValues"/> field.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._backup">
            <summary>
            The backup of the current object if any backup is initiated.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._fieldWarnings">
            <summary>
            Dictionary of field warnings per property.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._businessWarnings">
            <summary>
            List of business warnings.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._fieldErrors">
            <summary>
            Dictionary of field errors per property.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._businessErrors">
            <summary>
            List of business errors.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._validationLock">
            <summary>
            Lock object to make sure that multiple validations at the same time are not allowed.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._serializationInfo">
            <summary>
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that is retrieved and will be used for deserialization.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase._parent">
            <summary>
            The parent object of the current object.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Data.DataObjectBase"/> class.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.DataObjectBase"/> class.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.DataObjectBase"/> class.
            <para/>
            Only constructor for the DataObjectBase.
            </summary>
            <param name="info">SerializationInfo object, null if this is the first time construction.</param>
            <param name="context">StreamingContext object, simple pass a default new StreamingContext() if this is the first time construction.</param>
            <remarks>
            Call this method, even when constructing the object for the first time (thus not deserializing).
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Catel.Data.DataObjectBase"/> class.
            <para/>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Catel.Data.DataObjectBase"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.op_Equality(Catel.Data.DataObjectBase,Catel.Data.DataObjectBase)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="firstObject">The first object.</param>
            <param name="secondObject">The second object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.op_Inequality(Catel.Data.DataObjectBase,Catel.Data.DataObjectBase)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="firstObject">The first object.</param>
            <param name="secondObject">The second object.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="F:Catel.Data.DataObjectBase.IsDirtyProperty">
            <summary>
            Register the IsDirty property so it is known in the class.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase.IsReadOnlyProperty">
            <summary>
            Register the IsReadOnly property so it is known in the class.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnInitializing">
            <summary>
            Called when the object is being initialized.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnInitialized">
            <summary>
            Called when the object is initialized.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnUninitializing">
            <summary>
            Called when the object is uninitializing.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnUninitialized">
            <summary>
            Called when the object is uninitialized.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnDeserialized">
            <summary>
            Called when the object is deserialized.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Initialize">
            <summary>
            Initializes the object by setting default values.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.FinishDeserialization">
            <summary>
            Finishes the deserialization (both binary and xml)
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.FinishInitializationAfterConstructionOrDeserialization">
            <summary>
            Finishes the initialization after construction or deserialization.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetParent(Catel.Data.IParent)">
            <summary>
            Sets the new parent of this object.
            </summary>
            <param name="parent">The new parent.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of a specific property.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property</param>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetValue(System.String,System.Object,System.Boolean)">
            <summary>
            Sets the value of a specific property.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="value">Value of the property</param>
            <param name="notifyOnChange">If <c>true</c>, the <see cref="E:Catel.Data.DataObjectBase.PropertyChanged"/> event will be invoked.</param>
            <exception cref="T:Catel.Data.PropertyNotNullableException">When the property is not nullable, but <paramref name="value"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception> 
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetValue(Catel.Data.PropertyData,System.Object)">
            <summary>
            Sets the value of a specific property.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <param name="value">Value of the property</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetValue(System.String)">
            <summary>
            Gets the value of a specific property.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>Object value of the property</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetValue``1(System.String)">
            <summary>
            Gets the typed value of a specific property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">Name of the property.</param>
            <returns>Object value of the property</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetValue(Catel.Data.PropertyData)">
            <summary>
            Gets the value of a specific property.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <returns>Object value of the property</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetValue``1(Catel.Data.PropertyData)">
            <summary>
            Gets the typed value of a specific property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <returns>Object value of the property</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetDefaultValue(System.String)">
            <summary>
            Returns the default value of a specific property.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>Default value of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetDefaultValue(Catel.Data.PropertyData)">
            <summary>
            Returns the default value of a specific property.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <returns>Default value of the property.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="property"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetDefaultValue``1(System.String)">
            <summary>
            Returns the typed default value of a specific property.
            </summary>
            <typeparam name="TValue">The type of the 1.</typeparam>
            <param name="name">Name of the property.</param>
            <returns>Default value of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetDefaultValue``1(Catel.Data.PropertyData)">
            <summary>
            Returns the typed default value of a specific property.
            </summary>
            <typeparam name="TValue">The type of the 1.</typeparam>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <returns>Default value of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.ClearIsDirtyOnAllChilds">
            <summary>
            Clears the <see cref="P:Catel.Data.DataObjectBase.IsDirty"/> on all childs.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.ClearIsDirtyOnAllChilds(System.Object)">
            <summary>
            Clears the <see cref="P:Catel.Data.DataObjectBase.IsDirty"/> on all childs.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.RegisterProperty(System.String,System.Type)">
            <summary>
            Registers a property that will be automatically handled by this object with <c>null</c> as default value.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <returns>
            	<see cref="T:Catel.Data.PropertyData"/> containing the property information.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.RegisterProperty(System.String,System.Type,System.Object)">
            <summary>
            Registers a property that will be automatically handled by this object.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="defaultValue">Default value of the property.</param>
            <returns>
            	<see cref="T:Catel.Data.PropertyData"/> containing the property information.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.RegisterProperty(System.String,System.Type,System.Object,System.Boolean)">
            <summary>
            Registers a property that will be automatically handled by this object.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="defaultValue">Default value of the property.</param>
            <param name="setParent">if set to <c>true</c>, the parent of the property will be set.</param>
            <returns>
            	<see cref="T:Catel.Data.PropertyData"/> containing the property information.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.RegisterProperty(System.String,System.Type,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Registers a property that will be automatically handled by this object.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="defaultValue">Default value of the property.</param>
            <param name="setParent">if set to <c>true</c>, the parent of the property will be set.</param>
            <param name="includeInSerialization">if set to <c>true</c>, the property should be included in the serialization.</param>
            <returns>
            	<see cref="T:Catel.Data.PropertyData"/> containing the property information.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.RegisterProperty(System.String,System.Type,System.EventHandler{Catel.Data.PropertyChangedWithSenderEventArgs})">
            <summary>
            Registers a property that will be automatically handled by this object.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="propertyChangedEventHandler">The property changed event handler.</param>
            <returns>
            	<see cref="T:Catel.Data.PropertyData"/> containing the property information.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.RegisterProperty(System.String,System.Type,System.Object,System.EventHandler{Catel.Data.PropertyChangedWithSenderEventArgs})">
            <summary>
            Registers a property that will be automatically handled by this object.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="defaultValue">Default value of the property.</param>
            <param name="propertyChangedEventHandler">The property changed event handler.</param>
            <returns>
            	<see cref="T:Catel.Data.PropertyData"/> containing the property information.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.RegisterProperty(System.String,System.Type,System.Object,System.Boolean,System.EventHandler{Catel.Data.PropertyChangedWithSenderEventArgs})">
            <summary>
            Registers a property that will be automatically handled by this object.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="defaultValue">Default value of the property.</param>
            <param name="setParent">if set to <c>true</c>, the parent of the property will be set.</param>
            <param name="propertyChangedEventHandler">The property changed event handler.</param>
            <returns>
            	<see cref="T:Catel.Data.PropertyData"/> containing the property information.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.RegisterProperty(System.String,System.Type,System.Object,System.Boolean,System.EventHandler{Catel.Data.PropertyChangedWithSenderEventArgs},System.Boolean)">
            <summary>
            Registers a property that will be automatically handled by this object.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="defaultValue">Default value of the property.</param>
            <param name="setParent">if set to <c>true</c>, the parent of the property will be set.</param>
            <param name="propertyChangedEventHandler">The property changed event handler.</param>
            <param name="includeInSerialization">if set to <c>true</c>, the property should be included in the serialization.</param>
            <returns>
            	<see cref="T:Catel.Data.PropertyData"/> containing the property information.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.RegisterProperty(System.String,System.Type,System.Object,System.Boolean,System.EventHandler{Catel.Data.PropertyChangedWithSenderEventArgs},System.Boolean,System.Boolean)">
            <summary>
            Registers a property that will be automatically handled by this object.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="defaultValue">Default value of the property.</param>
            <param name="setParent">if set to <c>true</c>, the parent of the property will be set.</param>
            <param name="propertyChangedEventHandler">The property changed event handler.</param>
            <param name="includeInSerialization">if set to <c>true</c>, the property should be included in the serialization.</param>
            <param name="isDataObjectBaseProperty">if set to <c>true</c>, the property is declared by the <see cref="T:Catel.Data.DataObjectBase"/>.</param>
            <returns>
            	<see cref="T:Catel.Data.PropertyData"/> containing the property information.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.InitializeProperties">
            <summary>
            Initializes all the properties for this object.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.InitializeProperty(Catel.Data.PropertyData)">
            <summary>
            Initializes a specific property for this object.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <exception cref="T:Catel.Data.InvalidPropertyException">When the name of the property is invalid.</exception>
            <exception cref="T:Catel.Data.PropertyAlreadyRegisteredException">When the property is already registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.InitializeProperty(System.String,System.Type,System.Object,System.Boolean,System.EventHandler{Catel.Data.PropertyChangedWithSenderEventArgs},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a specific property for this object.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="defaultValue">Default value of the property.</param>
            <param name="setParent">if set to <c>true</c>, the parent of the property will be set.</param>
            <param name="propertyChangedEventHandler">The property changed event handler.</param>
            <param name="isSerializable">if set to <c>true</c>, the property is serializable.</param>
            <param name="includeInSerialization">if set to <c>true</c>, the property should be included in the serialization.</param>
            <param name="isDataObjectBaseProperty">if set to <c>true</c>, the property is declared by the <see cref="T:Catel.Data.DataObjectBase"/>.</param>
            <exception cref="T:Catel.Data.InvalidPropertyException">When the name of the property is invalid.</exception>
            <exception cref="T:Catel.Data.PropertyAlreadyRegisteredException">When the property is already registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.IsDataObjectBaseProperty(System.String)">
            <summary>
            Determines whether the specified property is a property declared by the <see cref="T:Catel.Data.DataObjectBase"/> itself.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>
            	<c>true</c> if the specified property is a property declared by the <see cref="T:Catel.Data.DataObjectBase"/> itself; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.IsPropertyRegistered(System.String)">
            <summary>
            Returns whether a specific property is registered.
            </summary>
            <param name="name">Name of the property.</param>
            <returns>True if the property is registered, otherwise false.</returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetPropertyData(System.String)">
            <summary>
            Gets the <see cref="T:Catel.Data.PropertyData"/> for the specified property.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The <see cref="T:Catel.Data.PropertyData"/>.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetPropertyInfo(Catel.Data.PropertyData)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> for the specified property.
            </summary>
            <param name="property">The property.</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> or <c>null</c> if no property info is found.</returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetPropertyInfo(System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> for the specified property.
            </summary>
            <param name="property">The name of the property.</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> or <c>null</c> if no property info is found.</returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetPropertyType(System.String)">
            <summary>
            Returns the type of a specific property.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>Type of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetPropertyType(Catel.Data.PropertyData)">
            <summary>
            Returns the type of a specific property.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <returns>Type of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">When the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnPropertyChanging(System.Object,System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            Invoked when a property value is changing.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnPropertyChanging(System.String)">
            <summary>
            Invoked when a property value is changing.
            </summary>
            <param name="propertyName">Name of the property that is changing.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SubscribeAllObjectsToNotifyChangedEvents">
            <summary>
            Subscribes all objects to notify changed events.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.UnsubscribeAllObjectsFromNotifyChanged">
            <summary>
            Unsubscribes all objects from notify changed.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.HandleObjectEventsSubscription(System.Object,System.Object)">
            <summary>
            Subscribes to events of child objects.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.UnsubscribeNotifyChangedEvents(System.Object)">
            <summary>
            Unsubscribes from the notify changed events.
            </summary>
            <param name="value">The object to unsubscribe from.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SubscribeNotifyChangedEvents(System.Object)">
            <summary>
            Subscribes to the notify changed events.
            </summary>
            <param name="value">The object to subscribe to.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.InvokePropertyChangedForAllRegisteredProperties">
            <summary>
            Invokes the property changed for all registered properties.
            </summary>
            <remarks>
            Using this method does not set the <see cref="P:Catel.Data.DataObjectBase.IsDirty"/> property to <c>true</c>, nor will
            it cause the object to validate itself automatically, even when the <see cref="P:Catel.Data.DataObjectBase.AutomaticallyValidateOnPropertyChanged"/>
            is set to <c>true</c>.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Invoked when a property value has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs,System.Boolean)">
            <summary>
            Invoked when a property value has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
            <param name="setDirtyAndAllowAutomaticValidation">if set to <c>true</c>, the <see cref="P:Catel.Data.DataObjectBase.IsDirty"/> property is set and automatic validation is allowed.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnPropertyChanged(System.String)">
            <summary>
            Invoked when a property value has changed.
            </summary>
            <param name="propertyName">Name of the property that has changed.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Invoked when a collection value has changed.
            </summary>
            <param name="sender">The object that contains the changed collection value.</param>
            <param name="e"><see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> containing all information about the changed collection.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.ValidateFields">
            <summary>
            Validates the field values of this object. Override this method to enable
            validation of field values.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.ValidateBusinessRules">
            <summary>
            Validates the business rules of this object. Override this method to enable
            validation of business rules.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnValidating">
            <summary>
            Called when the object is validating.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnValidatingFields">
            <summary>
            Called when the object is validating the fields.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnValidatedFields">
            <summary>
            Called when the object has validated the fields.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnValidatingBusinessRules">
            <summary>
            Called when the object is validating the business rules.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnValidatedBusinessRules">
            <summary>
            Called when the object has validated the business rules.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnValidated">
            <summary>
            Called when the object is validated.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Validate">
            <summary>
            Validates the current object for field and business rule errors.
            </summary>
            <remarks>
            To check wether this object contains any errors, use the <see cref="P:Catel.Data.DataObjectBase.HasErrors"/> property.
            <para/>
            This method does not force validation. This means that when the object is already validated,
            and no properties have been changed, no validation actually occurs since there is no reason
            for any values to have changed.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Validate(System.Boolean)">
            <summary>
            Validates the current object for field and business rule errors.
            </summary>
            <param name="force">if set to <c>true</c>, a validation is forced.</param>
            <remarks>
            To check wether this object contains any errors, use the <see cref="P:Catel.Data.DataObjectBase.HasErrors"/> property.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Validate(System.Boolean,System.Boolean)">
            <summary>
            Validates the current object for field and business rule errors.
            </summary>
            <param name="force">if set to <c>true</c>, a validation is forced (even if the object knows it is already validated).</param>
            <param name="notifyChangedPropertiesOnly">if set to <c>true</c> only the properties for which the warnings or errors have been changed 
            will be updated via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>; otherwise all the properties that
            had warnings or errors but not anymore and properties still containing warnings or errors will be updated.</param>
            <remarks>
            To check wether this object contains any errors, use the <see cref="P:Catel.Data.DataObjectBase.HasErrors"/> property.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetListMessages(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the list messages.
            </summary>
            <param name="fields">The field warnings or errors.</param>
            <param name="business">The business warnings or errors.</param>
            <returns>String representing the output of all items in the fields an business object.</returns>
            <remarks>
            This method is used to create a message string for field warnings or errors and business warnings
            or errors. Just pass the right dictionary and list to this method.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetFieldWarning(Catel.Data.PropertyData,System.String)">
            <summary>
            Sets a specific field warning.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <param name="warning">Warning message.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetFieldWarning(System.String,System.String)">
            <summary>
            Sets a specific field warning.
            </summary>
            <param name="property">Name of the property.</param>
            <param name="warning">Warning message.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetFieldWarning(Catel.Data.PropertyData,System.String,System.Object[])">
            <summary>
            Sets a specific field warning.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <param name="warningFormat">The warning format.</param>
            <param name="args">The formatting arguments.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetBusinessRuleWarning(System.String)">
            <summary>
            Sets a specific business rule warning.
            </summary>
            <param name="warning">Warning message</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetBusinessRuleWarning(System.String,System.Object[])">
            <summary>
            Sets a specific business rule warning.
            </summary>
            <param name="warningFormat">The warning format.</param>
            <param name="args">The formatting arguments.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetWarningMessage">
            <summary>
            Returns a message that contains all the current warnings and automatically determines the name of the object.
            </summary>
            <returns>
            Warning string or empty in case of no warnings.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetWarningMessage(System.String)">
            <summary>
            Returns a message that contains all the current warnings.
            </summary>
            <param name="userFriendlyObjectName">Name of the user friendly object.</param>
            <returns>
            Warning string or empty in case of no warnings.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetFieldError(Catel.Data.PropertyData,System.String,System.Object[])">
            <summary>
            Sets a specific field error.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <param name="errorFormat">The error format.</param>
            <param name="args">The formatting arguments.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetFieldError(Catel.Data.PropertyData,System.String)">
            <summary>
            Sets a specific field error.
            </summary>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <param name="error">Error message.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetFieldError(System.String,System.String,System.Object[])">
            <summary>
            Sets a specific field error.
            </summary>
            <param name="property">Name of the property.</param>
            <param name="errorFormat">The error format.</param>
            <param name="args">The formatting arguments.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetFieldError(System.String,System.String)">
            <summary>
            Sets a specific field error.
            </summary>
            <param name="property">Name of the property.</param>
            <param name="error">Error message.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetBusinessRuleError(System.String,System.Object[])">
            <summary>
            Sets a specific business rule error.
            </summary>
            <param name="errorFormat">The error format.</param>
            <param name="args">The formatting arguments.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.SetBusinessRuleError(System.String)">
            <summary>
            Sets a specific business rule error.
            </summary>
            <param name="error">Error message</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetErrorMessage">
            <summary>
            Returns a message that contains all the current errors and automatically determines the name of the object.
            </summary>
            <returns>
            Error string or empty in case of no errors.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetErrorMessage(System.String)">
            <summary>
            Returns a message that contains all the current errors.
            </summary>
            <param name="userFriendlyObjectName">Name of the user friendly object.</param>
            <returns>
            Error string or empty in case of no errors.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.ForcedClearEvents">
            <summary>
            Clear all DataObjectBase events.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.ClearEventHandler(System.EventHandler)">
            <summary>
            Force a disconnect for all subscribers to the event handler.
            </summary>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Clone">
            <summary>
            Clones the current object.
            </summary>
            <returns>Clone of the object or <c>null</c> if unsuccessful.</returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Clone(System.Boolean)">
            <summary>
            Clones the current object with the option to enable redirects.
            </summary>
            <param name="enableRedirects">if set to <c>true</c>, enable supports for redirects.</param>
            <returns>
            Clone of the object or <c>null</c> if unsuccessful.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.BeginEdit">
            <summary>
            Begins an edit on an object.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.CancelEdit">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> call.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.EndEdit">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> call.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.String)">
            <summary>
            Loads the object from a file using binary formatting.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="fileName">Filename of the file that contains the serialized data of this object.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.String,System.Boolean)">
            <summary>
            Loads the object from a file using binary formatting.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="fileName">Filename of the file that contains the serialized data of this object.</param>
            <param name="enableRedirects">if set to <c>true</c>, redirects will be enabled.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
            <remarks>
            When enableRedirects is enabled, loading will take more time. Only set
            the parameter to <c>true</c> when the deserialization without redirects fails.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.String,Catel.Data.SerializationMode)">
            <summary>
            Loads the object from a file using a specific formatting.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="fileName">Filename of the file that contains the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.String,Catel.Data.SerializationMode,System.Boolean)">
            <summary>
            Loads the object from a file using a specific formatting.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="fileName">Filename of the file that contains the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param>
            <param name="enableRedirects">if set to <c>true</c>, redirects will be enabled.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
            <remarks>
            When enableRedirects is enabled, loading will take more time. Only set
            the parameter to <c>true</c> when the deserialization without redirects fails.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.Xml.Linq.XDocument)">
            <summary>
            Loads the object from an XmlDocument object.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="xmlDocument">The XML document.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.Byte[])">
            <summary>
            Loads the object from a stream using binary formatting.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="bytes">The byte array.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.Byte[],System.Boolean)">
            <summary>
            Loads the object from a stream.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="bytes">The byte array.</param>
            <param name="enableRedirects">if set to <c>true</c>, redirects will be enabled.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
            <remarks>
            When enableRedirects is enabled, loading will take more time. Only set
            the parameter to <c>true</c> when the deserialization without redirects fails.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.IO.Stream)">
            <summary>
            Loads the object from a stream using binary formatting.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="stream">Stream that contains the serialized data of this object.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.IO.Stream,System.Boolean)">
            <summary>
            Loads the specified stream.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="stream">The stream.</param>
            <param name="enableRedirects">if set to <c>true</c>, redirects will be enabled.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
            <remarks>
            When enableRedirects is enabled, loading will take more time. Only set
            the parameter to <c>true</c> when the deserialization without redirects fails.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.IO.Stream,Catel.Data.SerializationMode)">
            <summary>
            Loads the object from a stream using a specific formatting.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="stream">Stream that contains the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.Load``1(System.IO.Stream,Catel.Data.SerializationMode,System.Boolean)">
            <summary>
            Loads the object from a stream using a specific formatting.
            </summary>
            <typeparam name="T">Type of the object that should be loaded.</typeparam>
            <param name="stream">Stream that contains the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param>
            <param name="enableRedirects">if set to <c>true</c>, redirects will be enabled.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
            <remarks>
            When enableRedirects is enabled, loading will take more time. Only set
            the parameter to <c>true</c> when the deserialization without redirects fails.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetDataFromSerializationInfo(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Retrieves the actual data from the serialization info.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to get the data from.</param>
            <remarks>
            This method is called from the OnDeserialized method, thus all child objects
            are serialized and available at the time this method is called.
            <para/>
            Only use this method to support older serialization techniques. When using this class
            for new objects, all serialization is handled automatically.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetDataFromSerializationInfoInternal(System.Runtime.Serialization.SerializationInfo)">
            <summary>
            Retrieves the actual data from the serialization info for the properties registered
            on this object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to get the data from.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Invoked when the deserialization of the object graph is complete.
            </summary>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>..</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.OnDeserialization(System.Object)">
            <summary>
            Invoked when the deserialization of the object graph is complete.
            </summary>
            <param name="sender">The object that has started deserializing.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.CallOnDeserializationCallback(System.Object)">
            <summary>
            Calls the <see cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)"/> method on the object if possible.
            </summary>
            <param name="obj">The object that has finished deserializing.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.ConvertDictionaryToListAndExcludeNonSerializableObjects(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts a dictionary to a list for serialization purposes.
            </summary>
            <param name="dictionary">Dictionary to convert.</param>
            <returns>List that contains all the values of the dictionary.</returns>
            <remarks>
            This method is required because Dictionary can't be serialized.
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase.ConvertKeyValuePairsToPropertyValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Converts a list of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> objects to a list of <see cref="T:Catel.Data.PropertyValue"/> objects.
            <para/>
            This method is intended to provide backwards compatibility for older objects that are serialized using KeyValuePair instead
            of PropertyValue.
            </summary>
            <param name="list">The list.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of property values.</returns>
        </member>
        <member name="M:Catel.Data.DataObjectBase.ConvertListToDictionary(System.Collections.Generic.IEnumerable{Catel.Data.PropertyValue})">
            <summary>
            Converts a list to a dictionary for serialization purposes.
            </summary>
            <param name="list">List to convert.</param>
            <returns>Dictionary that contains all the values of the list.</returns>
        </member>
        <member name="E:Catel.Data.DataObjectBase.PropertyChanging">
            <summary>
            Occurs when a property of this object is changing.
            </summary>
        </member>
        <member name="E:Catel.Data.DataObjectBase.PropertyChanged">
            <summary>
            Occurs when a property of this object has changed.
            </summary>
        </member>
        <member name="E:Catel.Data.DataObjectBase.Validating">
            <summary>
            Occurs when the object is validating.
            </summary>
        </member>
        <member name="E:Catel.Data.DataObjectBase.ValidatingFields">
            <summary>
            Occurs when the object is about the validate the fields.
            </summary>
        </member>
        <member name="E:Catel.Data.DataObjectBase.ValidatedFields">
            <summary>
            Occurs when the object has validated the fields.
            </summary>
        </member>
        <member name="E:Catel.Data.DataObjectBase.ValidatingBusinessRules">
            <summary>
            Occurs when the object is about the validate the business rules.
            </summary>
        </member>
        <member name="E:Catel.Data.DataObjectBase.ValidatedBusinessRules">
            <summary>
            Occurs when the object has validated the business rules.
            </summary>
        </member>
        <member name="E:Catel.Data.DataObjectBase.Validated">
            <summary>
            Occurs when the object is validated.
            </summary>
        </member>
        <member name="E:Catel.Data.DataObjectBase.Initialized">
            <summary>
            Occurs when the object is initialized.
            </summary>
        </member>
        <member name="E:Catel.Data.DataObjectBase.Uninitialized">
            <summary>
            Occurs when the object is uninitialized.
            </summary>
        </member>
        <member name="E:Catel.Data.DataObjectBase.Deserialized">
            <summary>
            Occurs when the object is deserialized.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.PropertyDataManager">
            <summary>
            Gets the property data manager that manages the properties of this object.
            </summary>
            <value>The property data manager.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.SubscribedToEvents">
            <summary>
            Gets or sets a value indicating whether this object is subscribed to all childs.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsInitializing">
            <summary>
            Gets a value indicating whether this object is currently initializing.
            </summary>
            <value>
            	<c>true</c> if this object is currently initializing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsInitialized">
            <summary>
            Gets a value indicating whether this object is initialized.
            </summary>
            <value>
            	<c>true</c> if this object is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsDeserializedDataAvailable">
            <summary>
            Gets or sets a value indicating whether the deserialized data is available, which means that
            OnDeserialized is invoked.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsDeserialized">
            <summary>
            Gets or sets a value indicating whether the object is fully deserialized.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsValidating">
            <summary>
            Gets a value indicating whether the object is currently validating. During validation, no validation will be invoked.
            </summary>
            <value>
            	<c>true</c> if the object is validating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsValidated">
            <summary>
            Gets or sets a value indicating whether this object is validated or not.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsDisposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.ContainsNonSerializableMembers">
            <summary>
            Gets a value indicating whether this instance contains non-serializable members.
            </summary>
            <value>
            	<c>true</c> if this instance contains non-serializable members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.AlwaysInvokeNotifyChanged">
            <summary>
            Gets or sets a value indicating whether this object should always invoke the <see cref="E:Catel.Data.DataObjectBase.PropertyChanged"/> event,
            even when the actual value of a property has not changed.
            <para/>
            Enabling this property is useful when using this class in a WPF environment.
            </summary>
            <remarks>
            By default, this property is true. Disable it to gain a very, very small performance improvement but
            to loose stable WPF compatibility.
            </remarks>
        </member>
        <member name="P:Catel.Data.DataObjectBase.HandlePropertyAndCollectionChanges">
            <summary>
            Gets or sets a value indicating whether this object should handle (thus invoke the specific events) when
            a property of collection value has changed.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.SuspendValidation">
            <summary>
            Gets or sets a value indicating whether the validation should be suspended. A call to <see cref="M:Catel.Data.DataObjectBase.Validate"/> will be returned immediately.
            </summary>
            <value><c>true</c> if validation should be suspended; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.TypesNotToDispose">
            <summary>
            Gets the collection of type names that should be disposed automatically.
            </summary>
            <value>The names of the types not to dispose.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.AutomaticallyDisposeChildObjectsOnDispose">
            <summary>
            Gets or sets a value indicating whether child objects that implement the <see cref="T:System.IDisposable"/> interface are
            disposed automatically when this object is being disposed.
            </summary>
            <value>
            	<c>true</c> if child objects that implement the <see cref="T:System.IDisposable"/> interface are disposed automatically 
                when this object is being disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.AutomaticallyValidateOnPropertyChanged">
            <summary>
            Gets or sets a value indicating whether this object should automatically validate itself when a property value
            has changed.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.Catel#Data#IParent#Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.KeyName">
            <summary>
            Gets the name of the object. By default, this is the hash code of all the properties combined.
            </summary>
            <value>The name of the key.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.Mode">
            <summary>
            Gets the <see cref="T:Catel.Data.SerializationMode"/> of this object.
            </summary>
            <value>The serialization mode.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsInEditSession">
            <summary>
            Gets a value indicating whether the object is currently in an edit session, started by the <see cref="M:Catel.Data.DataObjectBase.BeginEdit"/> method.
            </summary>
            <value>
            	<c>true</c> if this instance is currently in an edit session; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsDirty">
            <summary>
            Gets or sets a value indicating whether this object is dirty (contains unsaved data).
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this object is currently read-only. When the object is read-only, values can only be read, not set.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.IsEditable">
            <summary>
            Gets a value indicating whether this object is editable. This is the opposite of the <see cref="P:Catel.Data.DataObjectBase.IsReadOnly"/> property.
            </summary>
            <value><c>true</c> if this object is editable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.HasWarnings">
            <summary>
            Gets a value indicating whether this object contains any field or business warnings.
            </summary>
            <value>
            	<c>true</c> if this instance has warnings; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.FieldWarningCount">
            <summary>
            Gets the number of field warnings.
            </summary>
            <value>The field warning count.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.BusinessRuleWarningCount">
            <summary>
            Gets the number of business rule warnings.
            </summary>
            <value>The business rule warning count.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.HasErrors">
            <summary>
            Gets a value indicating whether this object contains any field or business errors.
            </summary>
            <value>
            	<c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.FieldErrorCount">
            <summary>
            Gets the number of field errors.
            </summary>
            <value>The field error count.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.BusinessRuleErrorCount">
            <summary>
            Gets the number of business rule errors.
            </summary>
            <value>The business rule error count.</value>
        </member>
        <member name="P:Catel.Data.DataObjectBase.DeserializationSucceeded">
            <summary>
            Gets a value indicating whether the deserialization has succeeded. If automatic deserialization fails, the object
            should try to deserialize manually.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.Catel#ComponentModel#IDataWarningInfo#Warning">
            <summary>
            Gets the current warning.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.Catel#ComponentModel#IDataWarningInfo#Item(System.String)">
            <summary>
            Gets a warning for a specific column.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Warning.</returns>
        </member>
        <member name="P:Catel.Data.DataObjectBase.System#ComponentModel#IDataErrorInfo#Error">
            <summary>
            Gets the current error.
            </summary>
        </member>
        <member name="P:Catel.Data.DataObjectBase.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
            Gets an error for a specific column.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Error.</returns>
        </member>
        <member name="T:Catel.Data.DataObjectBase.BackupData">
            <summary>
            Class containing backup information.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase.BackupData.IsDirty">
            <summary>
            The name of the <see cref="P:Catel.Data.DataObjectBase.IsDirty"/> property.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase.BackupData._object">
            <summary>
            The <see cref="T:Catel.Data.DataObjectBase"/> object that this backup is created for.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase.BackupData._propertyValuesBackup">
            <summary>
            Backup of the property values.
            </summary>
        </member>
        <member name="F:Catel.Data.DataObjectBase.BackupData._objectValuesBackup">
            <summary>
            Backup of the object values.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.BackupData.#ctor(Catel.Data.DataObjectBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.DataObjectBase.BackupData"/> class.
            </summary>
            <param name="obj">Object to backup.</param>
        </member>
        <member name="M:Catel.Data.DataObjectBase.BackupData.CreateBackup">
            <summary>
            Creates a backup of the object property values.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase.BackupData.RestoreBackup">
            <summary>
            Restores the backup to the object.
            </summary>
        </member>
        <member name="T:Catel.Data.DataObjectBase`1">
            <summary>
            Abstract class that serves as a base class for serializable objects.
            </summary>
            <typeparam name="TDataObject">Type that the class should hold (same as the defined type).</typeparam>
        </member>
        <member name="T:Catel.Data.IDataObjectBase`1">
            <summary>
            IDataObjectBase that the <see cref="T:Catel.Data.DataObjectBase`1"/> must implement to easily mock objects.
            </summary>
            <typeparam name="TDataObject">Type that the class should hold (same as the defined type).</typeparam>
            <remarks>
            This interface defines all the generic interfaces that the <see cref="T:Catel.Data.DataObjectBase`1"/> class implements.
            </remarks>
        </member>
        <member name="M:Catel.Data.IDataObjectBase`1.GetDefaultValue``1(System.String)">
            <summary>
            Returns the typed default value of a specific property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">Name of the property.</param>
            <returns>Default value of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">Thrown when the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.IDataObjectBase`1.GetDefaultValue``1(Catel.Data.PropertyData)">
            <summary>
            Returns the typed default value of a specific property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="property"><see cref="T:Catel.Data.PropertyData"/> of the property.</param>
            <returns>Default value of the property.</returns>
            <exception cref="T:Catel.Data.PropertyNotRegisteredException">Thrown when the property is not registered.</exception>
        </member>
        <member name="M:Catel.Data.DataObjectBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.DataObjectBase`1"/> class.
            </summary>
        </member>
        <member name="M:Catel.Data.DataObjectBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.DataObjectBase`1"/> class.
            </summary>
            <para/>
            Only constructor for the DataObjectBase.
            <param name="info">SerializationInfo object, null if this is the first time construction.</param>
            <param name="context">StreamingContext object, simple pass a default new StreamingContext() if this is the first time construction.</param>
            <remarks>
            Call this method, even when constructing the object for the first time (thus not deserializing).
            </remarks>
        </member>
        <member name="M:Catel.Data.DataObjectBase`1.Equals(`0)">
            <summary>
            Checks whether this object equals another object of the same type.
            </summary>
            <param name="other">The other object.</param>
            <returns><c>true</c> if the objects are equal; otherwise <c>false</c></returns>
        </member>
        <member name="T:Catel.Data.PropertyValue">
            <summary>
            Class holding a property value to serialize using the <see cref="T:Catel.Data.DataObjectBase"/>.
            </summary>
        </member>
        <member name="M:Catel.Data.PropertyValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.PropertyValue"/> class.
            </summary>
        </member>
        <member name="M:Catel.Data.PropertyValue.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.PropertyValue"/> class.
            </summary>
            <param name="keyValuePair">The key value pair.</param>
        </member>
        <member name="M:Catel.Data.PropertyValue.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.PropertyValue"/> class.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="P:Catel.Data.PropertyValue.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Catel.Data.PropertyValue.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
            <value>The value of the property.</value>
        </member>
        <member name="T:Catel.MVVM.InterestedInAttribute">
            <summary>
            Attribute to decorate view models with. When a view model is decorated with this attribute, it will automatically
            receive property change notifications for the view models.
            </summary>
        </member>
        <member name="M:Catel.MVVM.InterestedInAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.InterestedInAttribute"/> class.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="P:Catel.MVVM.InterestedInAttribute.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.MVVM.InvalidViewModelException">
            <summary>
            Exception in case there is an invalid view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.InvalidViewModelException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.InvalidViewModelException"/> class.
            </summary>
        </member>
        <member name="T:Catel.Diagnostics.OutputTraceListener">
            <summary>
            Output trace listener.
            </summary>
        </member>
        <member name="M:Catel.Diagnostics.OutputTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Diagnostics.OutputTraceListener"/> class.
            </summary>
        </member>
        <member name="M:Catel.Diagnostics.OutputTraceListener.OnTrace(System.String,System.Diagnostics.TraceEventType)">
            <summary>
            Called when a new trace has occurred.
            </summary>
            <param name="message">The message that is traced.</param>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="E:Catel.Diagnostics.OutputTraceListener.WrittenLine">
            <summary>
            Occurs when a new line is written to this trace listener.
            </summary>
        </member>
        <member name="T:Catel.Diagnostics.OutputTraceListener.WrittenLineDelegate">
            <summary>
            Delegate for the WrittenLine event.
            </summary>
            <param name="message">The message that is traced.</param>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="T:Catel.Data.InvalidPropertyException">
            <summary>
            Exception is When an invalid property is added to the <see cref="T:Catel.Data.DataObjectBase`1"/> class.
            </summary>
        </member>
        <member name="M:Catel.Data.InvalidPropertyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.InvalidPropertyException"/> class.
            </summary>
            <param name="propertyName">Name of the property that caused the exception.</param>
        </member>
        <member name="P:Catel.Data.InvalidPropertyException.PropertyName">
            <summary>
            Gets or sets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="T:Catel.Reflection.CannotGetPropertyValueException">
            <summary>
            Exception in case a property value cannot be get.
            </summary>
        </member>
        <member name="M:Catel.Reflection.CannotGetPropertyValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Reflection.CannotGetPropertyValueException"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Catel.Reflection.CannotGetPropertyValueException.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelBaseWithoutServices">
            <summary>
            View model base for MVVM implementations. This class is based on the <see cref="T:Catel.Data.DataObjectBase"/>, and supports all
            common interfaces used by WPF.
            </summary>
            <remarks>
            This view model base does not add any services. The technique specific implementation should take care of that
            (such as WPF, Silverlight, etc).
            </remarks>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices.LLBLGenRestorePointName">
            <summary>
            Name of the restore point when beginning to edit a model that is an LLBLGen entity.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices._modelObjects">
            <summary>
            Dictionary of available models inside the view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices._modelObjectsInfo">
            <summary>
            Dictionary with info about the available models inside the view model.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices._childViewModels">
            <summary>
            List of child view models which can be registed by the <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.RegisterChildViewModel(Catel.MVVM.IViewModel)"/> method.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices._childViewModelsHaveErrors">
            <summary>
            Value to determine whether child view models have errors or not.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelManager">
            <summary>
            Gets the view model manager.
            </summary>
            <value>The view model manager.</value>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelServiceManager">
            <summary>
            Service manager to manager services of the view models.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices._modelObjectValidateEntityMethods">
            <summary>
            Dictionary of LLBLGen ValidateEntity fields that are available on the models. This mapping is required to dynamically determine
            whether a model is an LLBLGen Pro entity, and therefore must be validated via a call to ValidateEntity.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices._viewModelToModelMap">
            <summary>
            Mappings from view model properties to models and their properties.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices._registeredCommands">
            <summary>
            A list of commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/> interface.
            </summary>
            <remarks>
            Internal so the <see cref="F:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelManager"/> can subscribe to the commands.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.ViewModelBaseWithoutServices._registeredServices">
            <summary>
            A value indiciating whether the services are already registered. If not, the <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.RegisterViewModelServices(Catel.IoC.IIoCProvider)"/> will
            be invoked.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/> class with support for <see cref="T:System.ComponentModel.IEditableObject"/>.
            </summary>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">when a mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">when a mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">when a mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">when a mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">when a mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">when a mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/> class.
            <para/>
            This constructor allows services to be injected. When <param name="services"/> contains any elements, the
            <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.RegisterViewModelServices(Catel.IoC.IIoCProvider)"/> method is not invoked.
            </summary>
            <param name="services">Dictionary of services to register.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">when a mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">when a mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/> class.
            <para/>
            This constructor allows services to be injected. When <param name="services"/> contains any elements, the
            <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.RegisterViewModelServices(Catel.IoC.IIoCProvider)"/> method is not invoked.
            </summary>
            <param name="services">Dictionary of services to register.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">when a mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">when a mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/> class.
            <para/>
            This constructor allows services to be injected. When <param name="services"/> contains any elements, the
            <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.RegisterViewModelServices(Catel.IoC.IIoCProvider)"/> method is not invoked.
            </summary>
            <param name="services">Dictionary of services to register.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">when a mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">when a mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.SetParentViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Sets the parent view model.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.RegisterChildViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Registers a child view model.
            </summary>
            <param name="child">The child view model.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="child"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnChildViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property has changed on the child view model.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnChildViewModelClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the child view model is closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.UnregisterChildViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Unregisters the child view model.
            </summary>
            <param name="child">The child.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="child"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.GetAllModels">
            <summary>
            Gets all models that are decorated with the <see cref="T:Catel.MVVM.ModelAttribute"/>.
            </summary>
            <returns>Array of models.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnPropertyChanging(System.String)">
            <summary>
            Called when a property value is changing.
            </summary>
            <param name="propertyName">Name of the property that is changing.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnPropertyChanged(System.String)">
            <summary>
            Called when a property value has changed.
            </summary>
            <param name="propertyName">Name of the property that has changed.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnCommandExecuted(System.Object,Catel.MVVM.CommandExecutedEventArgs)">
            <summary>
            Called when an <see cref="T:Catel.MVVM.ICatelCommand"/> implementation has just been executed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.CommandExecutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelPropertyChanged(Catel.MVVM.IViewModel,System.String)">
            <summary>
            Called when a property has changed for a view model type that the current view model is interested in. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
            <remarks>
            This method is internal so the <see cref="T:Catel.MVVM.ManagedViewModel"/> can invoke it. This method is only used as a pass-through
            to the actual <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.OnViewModelPropertyChanged(Catel.MVVM.IViewModel,System.String)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnViewModelPropertyChanged(Catel.MVVM.IViewModel,System.String)">
            <summary>
            Called when a property has changed for a view model type that the current view model is interested in. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelCommandExecuted(Catel.MVVM.IViewModel,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command for a view model type that the current view model is interested in has been executed. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter used during the execution.</param>
            <remarks>
            This method is internal so the <see cref="T:Catel.MVVM.ManagedViewModel"/> can invoke it. This method is only used as a pass-through
            to the actual <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.OnViewModelCommandExecuted(Catel.MVVM.IViewModel,Catel.MVVM.ICatelCommand,System.Object)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnViewModelCommandExecuted(Catel.MVVM.IViewModel,Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Called when a command for a view model type that the current view model is interested in has been executed. This can
            be accomplished by decorating the view model with the <see cref="T:Catel.MVVM.InterestedInAttribute"/>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="command">The command that has been executed.</param>
            <param name="commandParameter">The command parameter used during the execution.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.BeginEditObject(System.Object)">
            <summary>
            Begins an edit on an object. Also correctly supports LLBLGen entities.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.EndEditObject(System.Object)">
            <summary>
            Pushes changes since the last <see cref="M:System.ComponentModel.IEditableObject.EndEdit"/> call. Also correctly supports LLBLGen entities.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.CancelEditObject(System.Object)">
            <summary>
            Discards changes since the last <see cref="M:System.ComponentModel.IEditableObject.BeginEdit"/> call. Also correctly supports LLBLGen entities.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of a Model.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnValidating">
            <summary>
            Called when the object is validating.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnValidatingFields">
            <summary>
            Called when the object is validating the fields.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.OnValidatingBusinessRules">
            <summary>
            Called when the object is validating the business rules.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Initialize">
            <summary>
            Initializes the object by setting default values.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Cancel">
            <summary>
            Cancels the editing of the data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Save">
            <summary>
            Saves the data.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Close">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.Cancel"/> of <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.Save"/> method.
            </summary>
            <remarks>
            When implementing this method in a base class, make sure to call the base, otherwise <see cref="P:Catel.MVVM.ViewModelBaseWithoutServices.IsClosed"/> will
            not be set to true.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.IsModelRegistered(System.String)">
            <summary>
            Determines whether a specific property is registered as a model.
            </summary>
            <param name="name">The name of the registered model.</param>
            <returns>
            	<c>true</c> if a specific property is registered as a model; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.RegisterCommands">
            <summary>
            Registers all the commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.UnregisterCommands">
            <summary>
            Unregisters all the commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.InvalidateCommands">
            <summary>
            Invalidates all the commands that implement the <see cref="T:Catel.MVVM.ICatelCommand"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.GetService(System.Type)">
            <summary>
            Gets the service of the specified type.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>Service object or <c>null</c> if the service is not found.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.GetService``1">
            <summary>
            Gets the service of the specified type.
            </summary>
            <typeparam name="T">Type of the service.</typeparam>
            <returns>Service object or <c>null</c> if the service is not found.</returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.RegisterViewModelServices(Catel.IoC.IIoCProvider)">
            <summary>
            Registers the known view model services.
            </summary>
            <param name="iocProvider">The IoC provider.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Catel#MVVM#IViewModel#Initialize">
            <summary>
            Initializes the object by setting default values.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.InitializeViewModel">
            <summary>
            Initializes the object by setting default values.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Catel#MVVM#IViewModel#Validate">
            <summary>
            Validates the data.
            </summary>
            <returns>
            	<c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.ValidateViewModel">
            <summary>
            Validates the data.
            </summary>
            <returns>
            	<c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Catel#MVVM#IViewModel#Validate(System.Boolean,System.Boolean)">
            <summary>
            Validates the specified notify changed properties only.
            </summary>
            <param name="force">if set to <c>true</c>, a validation is forced (even if the object knows it is already validated).</param>
            <param name="notifyChangedPropertiesOnly">if set to <c>true</c> only the properties for which the warnings or errors have been changed
            will be updated via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>; otherwise all the properties that
            had warnings or errors but not anymore and properties still containing warnings or errors will be updated.</param>
            <returns>
            	<c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
            <remarks>
            This method is useful when the view model is initialized before the window, and therefore WPF does not update the errors and warnings.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.ValidateViewModel(System.Boolean,System.Boolean)">
            <summary>
            Validates the specified notify changed properties only.
            </summary>
            <param name="force">if set to <c>true</c>, a validation is forced (even if the object knows it is already validated).</param>
            <param name="notifyChangedPropertiesOnly">if set to <c>true</c> only the properties for which the warnings or errors have been changed
            will be updated via <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>; otherwise all the properties that
            had warnings or errors but not anymore and properties still containing warnings or errors will be updated.</param>
            <returns>
            	<c>true</c> if validation succeeds; otherwise <c>false</c>.
            </returns>
            <remarks>
            This method is useful when the view model is initialized before the window, and therefore WPF does not update the errors and warnings.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Catel#MVVM#IViewModel#Cancel">
            <summary>
            Cancels the editing of the data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.CancelViewModel">
            <summary>
            Cancels the editing of the data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Catel#MVVM#IViewModel#CancelAndClose">
            <summary>
            Cancels the editing of the data, but also closes the view model in the same call.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.CancelAndCloseViewModel">
            <summary>
            Cancels the editing of the data, but also closes the view model in the same call.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Catel#MVVM#IViewModel#Save">
            <summary>
            Saves the data.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.SaveViewModel">
            <summary>
            Saves the data.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Catel#MVVM#IViewModel#SaveAndClose">
            <summary>
            Saves the data, but also closes the view model in the same call if the save succeeds.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.SaveAndCloseViewModel">
            <summary>
            Saves the data, but also closes the view model in the same call if the save succeeds.
            </summary>
            <returns>
            	<c>true</c> if successful; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.Catel#MVVM#IViewModel#Close">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.Cancel"/> of <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.Save"/> method.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.CloseViewModel">
            <summary>
            Closes this instance. Always called after the <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.Cancel"/> of <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.Save"/> method.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBaseWithoutServices.CommandExecuted">
            <summary>
            Occurs when a command on the view model has been executed.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBaseWithoutServices.Saving">
            <summary>
            Occurs when the view model is about the be saved.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBaseWithoutServices.Saved">
            <summary>
            Occurs when the view model is saved successfully.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBaseWithoutServices.Canceling">
            <summary>
            Occurs when the view model is about to be canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBaseWithoutServices.Canceled">
            <summary>
            Occurrs when the view model is canceled.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ViewModelBaseWithoutServices.Closed">
            <summary>
            Occurs when the view model is being closed.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelConstructionTime">
            <summary>
            Gets the view model construction time.
            </summary>
            <value>The view model construction time.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.Dispatcher">
            <summary>
            Gets the dispatcher.
            </summary>
            <value>The dispatcher.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ParentViewModel">
            <summary>
            Gets the parent view model.
            </summary>
            <value>The parent view model.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.InvalidateCommandsOnPropertyChanged">
            <summary>
            Gets a value indicating whether the commands should automatically be invalidated on a property change.
            <para/>
            If this property is <c>false</c>, properties should either be invalidated by the .NET Framework or by a manual
            call to the <see cref="M:Catel.MVVM.ViewModelBaseWithoutServices.InvalidateCommands"/> method.
            </summary>
            <value>
            	<c>true</c> if the commands should automatically be invalidated on a property change; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.SupportIEditableObject">
            <summary>
            Gets or sets a value indicating whether models that implement <see cref="T:System.ComponentModel.IEditableObject"/> are supported correctly.
            </summary>
            <value>
            	<c>true</c> if models that implement <see cref="T:System.ComponentModel.IEditableObject"/> are supported correctly; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.IsInitialized">
            <summary>
            Gets a value indicating whether the view model is initialized.
            </summary>
            <value>
            	<c>true</c> if the view model is initialized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.IsClosed">
            <summary>
            Gets a value indicating whether the view model is closed.
            </summary>
            <value><c>true</c> if the view model is closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.Title">
            <summary>
            Gets the title of the view model.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.HasErrors">
            <summary>
            Gets a value indicating whether this object contains any field or business errors.
            </summary>
            <value>
            	<c>true</c> if this instance has errors; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.HasDirtyModel">
            <summary>
            Gets a value indicating whether this instance has a dirty model.
            </summary>
            <value>
            	<c>true</c> if this instance has a dirty model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.IoCProvider">
            <summary>
            Gets the IoC provider that provides all the implementations for interfaces required by the view-model.
            </summary>
            <value>The IoC provider.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelBaseWithoutServices.ModelInfo">
            <summary>
            Class containing information about a specific model decorated with the <see cref="T:Catel.MVVM.ModelAttribute"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.ModelInfo.#ctor(System.String,Catel.MVVM.ModelAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices.ModelInfo"/> class.
            </summary>
            <param name="name">The name of the model property.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ModelInfo.Name">
            <summary>
            Gets the name of the model property.
            </summary>
            <value>The name of the model property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ModelInfo.SupportIEditableObject">
            <summary>
            Gets a value indicating whether the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping">
            <summary>
            Model value class to store the mapping of the View Model to a Model mapping.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping.#ctor(System.String,Catel.MVVM.ViewModelToModelAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping"/> class.
            </summary>
            <param name="viewModelProperty">The view model property.</param>
            <param name="attribute">The <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/> that was used to define the mapping.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping"/> class.
            </summary>
            <param name="viewModelProperty">The view model property.</param>
            <param name="modelProperty">The model property.</param>
            <param name="valueProperty">The value property.</param>
            <param name="supportLLBLGen">if set to <c>true</c>, LLBLGen will be supported.</param>
            <param name="viewModelLLBLGenEntityProperty">The view model LLBLGen entity property.</param>
            <param name="modelLLBLGenEntityProperty">The model LLBLGen entity property.</param>
            <param name="nullValue">The null value.</param>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping.ViewModelProperty">
            <summary>
            Gets the property name of the mapping of the view model.
            </summary>
            <value>The model view property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping.ModelProperty">
            <summary>
            Gets the property name of the the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping.ValueProperty">
            <summary>
            Gets the property property name of the property in the model.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping.SupportLLBLGen">
            <summary>
            Gets a value indicating whether to support LLBLGen.
            </summary>
            <value><c>true</c> if LLBLGen is supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping.ViewModelLLBLGenEntityProperty">
            <summary>
            Gets the LLBLGen property to set when the view model property changes.
            </summary>
            <value>The LLBLGen property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping.ModelLLBLGenEntityProperty">
            <summary>
            Gets the LLBLGen property to set when the view model property changes.
            </summary>
            <value>The LLBLGen property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelBaseWithoutServices.ViewModelToModelMapping.NullValue">
            <summary>
            Gets the value to set on the LLBLGen entity when the view model property is null.
            </summary>
            <value>The null value.</value>
        </member>
        <member name="T:Catel.MVVM.ManagedViewModel">
            <summary>
            Represents a managed view model. A managed view model is watched for property changes. As soon as a change occurs in one of the
            managed view models, all other interested view models are notified of the changes.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ManagedViewModel.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ManagedViewModel._viewModelInstances">
            <summary>
            List of alive view model instances.
            </summary>
        </member>
        <member name="F:Catel.MVVM.ManagedViewModel._interestedViewModels">
            <summary>
            List of alive view model instances that are interested in other view models.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ManagedViewModel"/> class.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.AddViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Adds a view model instance to the list of instances.
            </summary>
            <param name="viewModel">The view model instance to add.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.WrongViewModelTypeException">When <paramref name="viewModel"/> is not of the right type.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.RemoveViewModelInstance(Catel.MVVM.IViewModel)">
            <summary>
            Removes a view model instance from the list of instances.
            </summary>
            <param name="viewModel">The view model instance to remove.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.AddInterestedViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Adds a view model to the list of interested view models for this view model type.
            </summary>
            <param name="viewModel">The view model instance that is interested in changes.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.RemoveInterestedViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Removes a view model from the list of interested view models for this view model type.
            </summary>
            <param name="viewModel">The view model instance that is interested in changes.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="viewModel"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the ViewModel instances.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnViewModelCommandExecuted(System.Object,Catel.MVVM.CommandExecutedEventArgs)">
            <summary>
            Called when the <see cref="E:Catel.MVVM.ViewModelBaseWithoutServices.CommandExecuted"/> event is invoked.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Catel.MVVM.CommandExecutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.ManagedViewModel.OnInterestedViewModelClosed(System.Object,System.EventArgs)">
            <summary>
            Handles the Closed event of the InterestedViewModel instances.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.MVVM.ManagedViewModel.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.MVVM.Services.IUIVisualizerService">
            <summary>
            This interface defines a UI controller which can be used to display dialogs
            in either modal or modaless form from a ViewModel.
            </summary>
            <remarks>
            This implementation is based on the implementation that can be found in Cinch 
            (see http://www.codeproject.com/KB/WPF/CinchIII.aspx#PopServ). 
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="windowType"/> is not of the right type.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="name">Name of the registered window.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="windowType"/> is not of the right type.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered window.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Show(Catel.MVVM.IViewModel)">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Show(System.String,System.Object)">
            <summary>
            Shows a window that is registered with the specified name in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Show(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.ShowDialog(Catel.MVVM.IViewModel)">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.ShowDialog(System.String,System.Object)">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.ShowDialog(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IUIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.IUIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="T:Catel.MVVM.Services.ILocationService">
            <summary>
            Interface that supports retrieving the current location.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ILocationService.GetCurrentLocation">
            <summary>
            Gets the current location.
            </summary>
            <returns>
            The current location represented as <see cref="T:Catel.MVVM.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.ILocationService.Start">
            <summary>
            Starts the location service so it's retrieving data.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ILocationService.Stop">
            <summary>
            Stops the location service so it's no longer retrieving data.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Services.ILocationService.LocationChanged">
            <summary>
            Occurs when the current location has changed.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.ILocationService.CurrentLocation">
            <summary>
            Gets the current location represented as <see cref="T:Catel.MVVM.Services.ILocation"/>. If no location is available, <c>null</c> will be returned.
            </summary>
            <value>The current location.</value>
            <remarks>
            This is convenience property that internally calls <see cref="M:Catel.MVVM.Services.ILocationService.GetCurrentLocation"/>.
            <para/>
            Note that the services inside Catel do not support <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, thus you cannot 
            subscribe to changes of this property. Instead, subscribe to the <see cref="E:Catel.MVVM.Services.ILocationService.LocationChanged"/> event.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Services.ILocation">
            <summary>
            Interface that represents a location.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.ILocation.Latitude">
            <summary>
            Gets the latitude. The latitute is the angular distance of that location south or north of the equator.
            </summary>
            <value>The latitude.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ILocation.Longitude">
            <summary>
            Gets the longitude. The longitude specifies the east-west position of a point on the Earth's surface.
            </summary>
            <value>The longitude.</value>
        </member>
        <member name="P:Catel.MVVM.Services.ILocation.Altitude">
            <summary>
            Gets the altitude. The altitude is the height of the location.
            </summary>
            <value>The altitude.</value>
        </member>
        <member name="T:Catel.MVVM.WrongViewModelTypeException">
            <summary>
            Exception in case that a wrong type is used for a view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.WrongViewModelTypeException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.WrongViewModelTypeException"/> class.
            </summary>
            <param name="actualType">The actual type.</param>
            <param name="expectedType">The expected type.</param>
        </member>
        <member name="P:Catel.MVVM.WrongViewModelTypeException.ActualType">
            <summary>
            Gets the actual type.
            </summary>
            <value>The actual type.</value>
        </member>
        <member name="P:Catel.MVVM.WrongViewModelTypeException.ExpectedType">
            <summary>
            Gets the expected type.
            </summary>
            <value>The expected type.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelNotRegisteredException">
            <summary>
            Exception in case a view model is not registered, but still being used.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelNotRegisteredException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelNotRegisteredException"/> class.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
        </member>
        <member name="P:Catel.MVVM.ViewModelNotRegisteredException.ViewModelType">
            <summary>
            Gets the type of the view model.
            </summary>
            <value>The type of the view model.</value>
        </member>
        <member name="T:Catel.MVVM.ICommandAuthenticationProvider">
            <summary>
            Interface to allow an authentication mechanism to control the CanExecute state of a command.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ICommandAuthenticationProvider.CanCommandBeExecuted(Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Determines whether the specified <paramref name="command"/> can be executed. The class implementing this interface
            can use any required method to check the command.
            <para/>
            It is recommended to use the <see cref="P:Catel.MVVM.ICatelCommand.Tag"/> property to identify a command.
            </summary>
            <param name="command">The command that is requested.</param>
            <param name="commandParameter">The command parameter.</param>
            <returns>
            	<c>true</c> if this instance [can command be executed] the specified command; otherwise, <c>false</c>.
            </returns>
            <remarks>
            The <c>CanExecute</c> state of a command is queried a lot. The command itself does not cache any results because
            it is not aware of role or identity changes. If caching is required, this must be implemented in the class implementing
            the <see cref="T:Catel.MVVM.ICommandAuthenticationProvider"/> interface.
            </remarks>
        </member>
        <member name="T:Catel.Data.ISavableDataObjectBase">
            <summary>
            ISavableDataObjectBase that defines the additional methods to save a <see cref="T:Catel.Data.IDataObjectBase"/> object.
            </summary>
        </member>
        <member name="M:Catel.Data.ISavableDataObjectBase.Save(System.String)">
            <summary>
            Saves the object to a file using the default formatting.
            </summary>
            <param name="fileName">Filename of the file that will contain the serialized data of this object.</param>
        </member>
        <member name="M:Catel.Data.ISavableDataObjectBase.Save(System.String,Catel.Data.SerializationMode)">
            <summary>
            Saves the object to a file using a specific formatting.
            </summary>
            <param name="fileName">Filename of the file that will contain the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param>
        </member>
        <member name="M:Catel.Data.ISavableDataObjectBase.Save(System.IO.Stream)">
            <summary>
            Saves the object to a stream using the default formatting.
            </summary>
            <param name="stream">Stream that will contain the serialized data of this object.</param>
        </member>
        <member name="M:Catel.Data.ISavableDataObjectBase.Save(System.IO.Stream,Catel.Data.SerializationMode)">
            <summary>
            Saves the object to a stream using a specific formatting.
            </summary>
            <param name="stream">Stream that will contain the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param>
        </member>
        <member name="P:Catel.Data.ISavableDataObjectBase.Mode">
            <summary>
            Gets the <see cref="T:Catel.Data.SerializationMode"/> of this object.
            </summary>
            <value>The serialization mode.</value>
        </member>
        <member name="P:Catel.Data.ISavableDataObjectBase.Bytes">
            <summary>
            Gets the bytes of the current binary serialized data object.
            </summary>
            <value>The bytes that represent the object data.</value>
        </member>
        <member name="T:Catel.MVVM.ViewModelToModelAttribute">
            <summary>
            Attribute to link a property in a view model to a model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/> class. This constructor assumes that the name
            of the property in the view model is the same as in the model.
            </summary>
            <param name="model">The property name that holds the model object.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelToModelAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/> class.
            </summary>
            <param name="model">The property name that holds the model object.</param>
            <param name="property">The property of the model object that should be linked to the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/> property.</param>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.Model">
            <summary>
            Gets the property name that holds the model object.
            <para/>
            Must be a property on the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/> implementation, but is allowed to be private.
            </summary>
            <value>The model property name.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.Property">
            <summary>
            Gets the property of the model object that should be linked to the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/> property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.SupportLLBLGen">
            <summary>
            Gets or sets a value indicating whether to support LLBLGen. When a property on the view model changes, the view model
            will try to find the related field ID instead of the related field since LLBLGen does not support nullable related entities.
            </summary>
            <value><c>true</c> if [support LLBL gen]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.ViewModelLLBLGenEntityProperty">
            <summary>
            Gets or sets the LLBLGen entity property to use when retrieving the value from the view model entity.
            <para/>
            The actual mapping will be like [ViewModel].[ViewModelLLBLGenEntityProperty] = [Model].[ModelLLBLGenEntityProperty].
            <para/>
            If the value is empty, the property to map to is automatically determined by the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/>.
            </summary>
            <remarks>
            This property is only used when <see cref="P:Catel.MVVM.ViewModelToModelAttribute.SupportLLBLGen"/> is <c>true</c>.
            </remarks>
            <value>The LLBLGen entity property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.ModelLLBLGenEntityProperty">
            <summary>
            Gets or sets the LLBLGen entity property to use when retrieving the value from the view model entity.
            <para/>
            The actual mapping will be like [ViewModel].[ViewModelLLBLGenEntityProperty] = [Model].[ModelLLBLGenEntityProperty].
            <para/>
            If the value is empty, the property to map to is automatically determined by the <see cref="T:Catel.MVVM.ViewModelBaseWithoutServices"/>.
            </summary>
            <remarks>
            This property is only used when <see cref="P:Catel.MVVM.ViewModelToModelAttribute.SupportLLBLGen"/> is <c>true</c>.
            </remarks>
            <value>The LLBLGen entity property.</value>
        </member>
        <member name="P:Catel.MVVM.ViewModelToModelAttribute.NullValue">
            <summary>
            Gets or sets the value to set on the LLBLGen back-end property when the view model property is null.
            </summary>
            <value>The null value.</value>
        </member>
        <member name="T:Catel.MVVM.Services.ViewModelServiceBase">
            <summary>
            Base class for all view model services.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IViewModelService">
            <summary>
            Interface to declare services in a view model.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.IViewModelService.Name">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="F:Catel.MVVM.Services.ViewModelServiceBase.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Services.ViewModelServiceBase.Name">
            <summary>
            Gets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="T:Catel.MVVM.Services.ProcessCompletedDelegate">
            <summary>
            Delegate to invoke when a process of the <see cref="T:Catel.MVVM.Services.IProcessService"/> is completed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IProcessService">
            <summary>
            Interface for the Process service.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IProcessService.StartProcess(System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="!:Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IProcessService.StartProcess(System.String,System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="!:Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.IProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <param name="processCompletedCallback">The process completed callback, invoked only when the process is started successfully and completed.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="!:Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="T:Catel.IO.Path">
            <summary>
            Static class that implements some path methods
            </summary>
        </member>
        <member name="F:Catel.IO.Path.SafePrefixForNormalPaths">
            <summary>
            Safe prefix for normal paths.
            </summary>
        </member>
        <member name="F:Catel.IO.Path.SafePrefixForUncPaths">
            <summary>
            Safe prefix for UNC paths.
            </summary>
        </member>
        <member name="F:Catel.IO.Path.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.IO.Path.GetApplicationDataDirectory">
            <summary>
            Gets the application data directory for the company and product as defined the the assembly information of the entry assembly. 
            If the entry assembly is <c>null</c>, this method will fall back to the calling assembly to retrieve the information.
            If the folder does not exist, the folder is automatically created by this method. 
            <para />
            This method returns a value like [application data]\[company]\[product name].
            </summary>
            <returns>Directory for the application data.</returns>
        </member>
        <member name="M:Catel.IO.Path.GetApplicationDataDirectory(System.String)">
            <summary>
            Gets the application data directory for a specific product. If the folder does not exist, the folder is automatically created by this method.
            <para />
            This method returns a value like [application data]\[product name].
            </summary>
            <param name="productName">Name of the product.</param>
            <returns>Directory for the application data.</returns>
        </member>
        <member name="M:Catel.IO.Path.GetApplicationDataDirectory(System.String,System.String)">
            <summary>
            Gets the application data directory for a specific product of a specific company. If the folder does not exist, the
            folder is automatically created by this method.
            <para/>
            This method returns a value like [application data]\[company]\[product name].
            </summary>
            <param name="companyName">Name of the company.</param>
            <param name="productName">Name of the product.</param>
            <returns>Directory for the application data.</returns>
            <exception cref="T:Catel.IO.CannotCreateDirectoryException">Thrown when the directory cannot be created.</exception>
        </member>
        <member name="M:Catel.IO.Path.GetDirectoryName(System.String)">
            <summary>
            Gets the name of the directory.
            </summary>
            <param name="path">The path to get the directory name from.</param>
            <returns>The directory name.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="path"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.GetFileName(System.String)">
            <summary>
            Gets the name of the file.
            </summary>
            <param name="path">The path to get the file name from.</param>
            <returns>The file name.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="path"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.GetLongPathName(System.String)">
            <summary>
            Gets the long name of the path.
            </summary>
            <param name="shortPath">The short path.</param>
            <returns>Long name of the path.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="shortPath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.GetParentDirectory(System.String)">
            <summary>
            Gets the parent directory.
            </summary>
            <param name="path">The path to get the parent directory from.</param>
            <returns>Parent directory of a path. If there is no parent directory, <see cref="F:System.String.Empty"/> is returned.</returns>
            <remarks>
            This method will always strip the trailing backslash from the parent.
            </remarks>
        </member>
        <member name="M:Catel.IO.Path.GetRelativePath(System.String)">
            <summary>
            Returns a relative path string from a full path.
            <para/>
            The path to convert. Can be either a file or a directory
            The base path to truncate to and replace
            <para/>
            Lower case string of the relative path. If path is a directory it's returned 
            without a backslash at the end.
            <para/>
            Examples of returned values:
             .\test.txt, ..\test.txt, ..\..\..\test.txt, ., ..
            </summary>
            <param name="fullPath">Full path to convert to relative path.</param>
            <returns>Relative path.</returns>
            <remarks>
            This method internally uses the <see cref="M:Catel.IO.Path.GetRelativePath(System.String,System.String)"/> method, but passes <c>null</c>
            for the <c>basePath</c> parameter.
            </remarks>
            <exception cref="T:System.ArgumentException">when <paramref name="fullPath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.GetRelativePath(System.String,System.String)">
            <summary>
            Returns a relative path string from a full path.
            <para/>
            The path to convert. Can be either a file or a directory
            The base path to truncate to and replace
            <para/>
            Lower case string of the relative path. If path is a directory it's returned 
            without a backslash at the end.
            <para/>
            Examples of returned values:
             .\test.txt, ..\test.txt, ..\..\..\test.txt, ., ..
            </summary>
            <param name="fullPath">Full path to convert to relative path.</param>
            <param name="basePath">The base path (a.k.a. working directory). If this parameter is <c>null</c> or empty, the current working directory will be used.</param>
            <returns>Relative path.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="fullPath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.GetFullPath(System.String,System.String)">
            <summary>
            Returns the full path for a relative path.
            </summary>
            <param name="relativePath">Relative path to convert to a full path.</param>
            <param name="basePath">Base path (a.k.a. working directory).</param>
            <returns>Full path.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="relativePath"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="basePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.GetFullPath(System.String)">
            <summary>
            Gets the full path.
            </summary>
            <param name="path">The relative path to get the full path of.</param>
            <returns>The full path.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="path"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.GetWin32LongFileName(System.String)">
            <summary>
            Gets the name of the safe long file so paths longer than 255 are supported.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>Safe filename (\\?\ prefixed).</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="filePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.AddWin32LongFileNamePrefix(System.String)">
            <summary>
            Adds the \\?\ or \\?\UNC\ to the filename so Win32 files can safely contain more than 255 characters.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>Win32 filename with long filename support.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="filePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.RemoveWin32LongFileNamePrefix(System.String)">
            <summary>
            Removes the \\?\ or \\?\UNC\ to the filename so Win32 files can safely contain more than 255 characters.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>Win32 filename with long filename support.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="filePath"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.AppendTrailingSlash(System.String)">
            <summary>
            Appends a trailing backslash (\) to the path.
            </summary>
            <param name="path">Path to append the trailing backslash to.</param>
            <returns>Path including the trailing backslash.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="path"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.AppendTrailingSlash(System.String,System.Char)">
            <summary>
            Appends a trailing slash (\ or /) to the path.
            </summary>
            <param name="path">Path to append the trailing slash to.</param>
            <param name="slash">Slash to append (\ or /).</param>
            <returns>Path including the trailing slash.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="path"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.Combine(System.String[])">
            <summary>
            Returns a combination of multiple paths.
            </summary>
            <param name="paths">Paths to combine.</param>
            <returns>Combination of all the paths passed.</returns>
        </member>
        <member name="M:Catel.IO.Path.CombineUrls(System.String[])">
            <summary>
            Returns a combination of multiple urls.
            </summary>
            <param name="urls">Urls to combine.</param>
            <returns>Combination of all the urls passed.</returns>
        </member>
        <member name="M:Catel.IO.Path.ReplacePathSlashesByUrlSlashes(System.String)">
            <summary>
            Replaces path slashes (\) by url slashes (/).
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Prepared url.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="value"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.RemoveStartSlashes(System.String)">
            <summary>
            Removes any slashes (\ or /) at the beginning of the string.
            </summary>
            <param name="value">Value to remove the slashes from.</param>
            <returns>Value without slashes.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="value"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.RemoveTrailingSlashes(System.String)">
            <summary>
            Removes any slashes (\ or /) at the end of the string.
            </summary>
            <param name="value">Value to remove the slashes from.</param>
            <returns>Value without slashes.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="value"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.IO.Path.RemoveStartAndTrailingSlashes(System.String)">
            <summary>
            Removes any slashes (\ or /) at the beginning and end of the string.
            </summary>
            <param name="value">Value to remove the slashes from.</param>
            <returns>Value without trailing slashes.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="value"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="T:Catel.Data.InvalidPropertyValueException">
            <summary>
            Exception when an the new value of a property of the <see cref="T:Catel.Data.DataObjectBase`1"/> class is invalid.
            </summary>
        </member>
        <member name="M:Catel.Data.InvalidPropertyValueException.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.InvalidPropertyValueException"/> class.
            </summary>
            <param name="propertyName">Name of the property that caused the exception.</param>
            <param name="expectedType">Expected type for the property.</param>
            <param name="actualType">Actual object value type.</param>
        </member>
        <member name="P:Catel.Data.InvalidPropertyValueException.PropertyName">
            <summary>
            Gets or sets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Catel.Data.InvalidPropertyValueException.ExpectedType">
            <summary>
            Gets or sets the expected type.
            </summary>
            <value>The expected type.</value>
        </member>
        <member name="P:Catel.Data.InvalidPropertyValueException.ActualType">
            <summary>
            Gets or sets the actual type.
            </summary>
            <value>The actual type.</value>
        </member>
        <member name="T:Catel.Reflection.AppDomainExtensions">
            <summary>
            <see cref="T:System.AppDomain"/> extensions.
            </summary>
        </member>
        <member name="M:Catel.Reflection.AppDomainExtensions.GetTypes(System.AppDomain,System.Type)">
            <summary>
            Gets a list of all types inside the <see cref="T:System.AppDomain"/> that have the <paramref name="baseType"/> as base class.
            <para/>
            If the specified base type is an interface, the types that are returned are types that implement the interface.
            If the specified base type is a class, the types that have the type as base class are returned.
            </summary>
            <param name="appDomain">The app domain.</param>
            <param name="baseType">Type of the base class.</param>
            <returns>List of types found in the <see cref="T:System.AppDomain"/>.</returns>
        </member>
        <member name="M:Catel.Reflection.AppDomainExtensions.GetTypes``1(System.AppDomain)">
            <summary>
            Gets a list of all types inside the <see cref="T:System.AppDomain"/> that have the <typeparamref name="TBaseType"/> as base class.
            </summary>
            <typeparam name="TBaseType">The type of the base class.</typeparam>
            <param name="appDomain">The app domain.</param>
            <returns>
            List of types found in the <see cref="T:System.AppDomain"/>.
            </returns>
        </member>
        <member name="T:Catel.MVVM.Services.ViewModelServiceManager">
            <summary>
            Class that manages services available to view models.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.ViewModelServiceManager._services">
            <summary>
            Dictionary of services registered with this view model service manager.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.ViewModelServiceManager._servicesLock">
            <summary>
            Lock object for the services.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ViewModelServiceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.ViewModelServiceManager"/> class.
            </summary>
            <remarks>
            For internal use only.
            <para/>
            This constructor will not allow the service manager to lazy load services.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.ViewModelServiceManager.#ctor(Catel.IoC.IIoCProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.ViewModelServiceManager"/> class.
            </summary>
            <param name="iocProvider">The ioc provider which will be used for lazy loading.</param>
            <remarks>
            For internal use only.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.ViewModelServiceManager.Clear">
            <summary>
            Clears the services.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ViewModelServiceManager.Add(System.Type,System.Object)">
            <summary>
            Adds a new service.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <param name="serviceInstance">The service instance.</param>
        </member>
        <member name="M:Catel.MVVM.Services.ViewModelServiceManager.Remove(System.Type)">
            <summary>
            Removes the specified service.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Catel.MVVM.Services.ViewModelServiceManager.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.
            -or-
            null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.ViewModelServiceManager.GetService``1">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <typeparam name="T">Type of the service to retrieve.</typeparam>
            <returns>
            A service object of the specified parameter type.
            -or-
            null if there is no service object of the specified parameter type.
            </returns>
        </member>
        <member name="P:Catel.MVVM.Services.ViewModelServiceManager.IoCProvider">
            <summary>
            Gets or sets the IoC provider.
            </summary>
            <value>The IoC provider.</value>
        </member>
        <member name="T:Catel.NotSupportedInSilverlightException">
            <summary>
            Exception in case the functionality is not supported in Silverlight.
            <para />
            Unfortunately, Silverlight misses a lot of functionality. When a feature is not supported in Catel, 
            this is because the .NET Framework (or actually Silverlight) does not allow the code to handle 
            that specific feature.
            </summary>
        </member>
        <member name="M:Catel.NotSupportedInSilverlightException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.NotSupportedInSilverlightException"/> class.
            </summary>
        </member>
        <member name="M:Catel.NotSupportedInSilverlightException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.NotSupportedInSilverlightException"/> class.
            </summary>
            <param name="reason">The reason why the feature is missing.</param>
        </member>
        <member name="P:Catel.NotSupportedInSilverlightException.Reason">
            <summary>
            Get the reason why the feature is not supported.
            </summary>
            <value>The reason why the feature is missing.</value>
        </member>
        <member name="T:Catel.Diagnostics.ExceptionExtensions">
            <summary>
            Exception helper class.
            </summary>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.TraceExceptionAsError(System.Exception,System.String)">
            <summary>
            Traces an error message with exception details.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="message">Message of the trace.</param>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.TraceExceptionAsError(System.Exception,System.String,System.Object[])">
            <summary>
            Traces an error message with exception details.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.TraceExceptionAsWarning(System.Exception,System.String)">
            <summary>
            Traces a warning message with exception details.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="message">Message of the trace.</param>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.TraceExceptionAsWarning(System.Exception,System.String,System.Object[])">
            <summary>
            Traces a warning message with exception details.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.TraceExceptionAsInformation(System.Exception,System.String)">
            <summary>
            Traces an information message with exception details.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="message">Message of the trace.</param>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.TraceExceptionAsInformation(System.Exception,System.String,System.Object[])">
            <summary>
            Traces an information message with exception details.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.TraceExceptionAsVerbose(System.Exception,System.String)">
            <summary>
            Traces a verbose message with exception details.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="message">Message of the trace.</param>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.TraceExceptionAsVerbose(System.Exception,System.String,System.Object[])">
            <summary>
            Traces a verbose message with exception details.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.TraceException(System.Exception,System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Traces a message with exception details.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="level"><see cref="T:System.Diagnostics.TraceLevel"/> to write.</param>
            <param name="message">Message of the trace.</param>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.TraceException(System.Exception,System.Diagnostics.TraceLevel,System.String,System.Object[])">
            <summary>
            Traces a message with exception details.
            </summary>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="level"><see cref="T:System.Diagnostics.TraceLevel"/> to write.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the args array.</param>
            <param name="args">An object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Catel.Diagnostics.ExceptionExtensions.GetInnerException(System.Exception)">
            <summary>
            Gets the inner exception.
            </summary>
            <param name="ex">The exception.</param>
            <returns>Inner exception of the exception. If no inner exception is available, the actual exception is returned.</returns>
        </member>
        <member name="T:Catel.Data.PropertyAlreadyRegisteredException">
            <summary>
            Exception when a property is added to the <see cref="T:Catel.Data.DataObjectBase`1"/> class that is
            already registered by the object.
            </summary>
        </member>
        <member name="M:Catel.Data.PropertyAlreadyRegisteredException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.PropertyAlreadyRegisteredException"/> class.
            </summary>
            <param name="propertyName">Name of the property that caused the exception.</param>
            <param name="propertyType">Type of the object that is trying to register the property.</param>
        </member>
        <member name="P:Catel.Data.PropertyAlreadyRegisteredException.PropertyName">
            <summary>
            Gets or sets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Catel.Data.PropertyAlreadyRegisteredException.PropertyType">
            <summary>
            Gets or sets the property type for which the property is already registered.
            </summary>
            <value>The property type for which the property is already registered.</value>
        </member>
        <member name="T:Catel.Runtime.Serialization.RedirectTypeAttribute">
            <summary>
            Attribute that can be used to redirect types to other types to be able to rename / move property types.
            </summary>
            <remarks>
            This attribute should be appended to the property definition.
            <para/>
            In case this attribute is used on a field or property, the <see cref="P:Catel.Runtime.Serialization.RedirectTypeAttribute.NewAssemblyName"/> and 
            <see cref="P:Catel.Runtime.Serialization.RedirectTypeAttribute.NewTypeName"/> are mandatory. In all other cases, the type and assembly will be
            loaded automatically.
            </remarks>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectTypeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Runtime.Serialization.RedirectTypeAttribute"/> class.
            </summary>
            <param name="originalAssemblyName">Original assembly location..</param>
            <param name="originalTypeName">Original type name.</param>
        </member>
        <member name="P:Catel.Runtime.Serialization.RedirectTypeAttribute.OriginalAssemblyName">
            <summary>
            Gets the original assembly name.
            </summary>
        </member>
        <member name="P:Catel.Runtime.Serialization.RedirectTypeAttribute.NewAssemblyName">
            <summary>
            Gets or sets the new assembly name.
            </summary>
            <remarks>
            Leave empty if the assembly name is unchanged.
            </remarks>
        </member>
        <member name="P:Catel.Runtime.Serialization.RedirectTypeAttribute.OriginalTypeName">
            <summary>
            Gets the original type name.
            </summary>
            <remarks>
            List or Array types should be postfixed with a [[]].
            </remarks>
        </member>
        <member name="P:Catel.Runtime.Serialization.RedirectTypeAttribute.NewTypeName">
            <summary>
            Gets or sets the new type name.
            </summary>
            <remarks>
            Leave empty if the type name is unchanged.
            <para />
            List or Array types should be postfixed with a [[]].
            </remarks>
        </member>
        <member name="P:Catel.Runtime.Serialization.RedirectTypeAttribute.OriginalType">
            <summary>
            Gets the original type.
            </summary>
        </member>
        <member name="P:Catel.Runtime.Serialization.RedirectTypeAttribute.TypeToLoad">
            <summary>
            Gets the new type that should be loaded.
            </summary>
        </member>
        <member name="T:Catel.MVVM.IViewModelContainer">
            <summary>
            Defines a control as a <see cref="T:Catel.MVVM.IViewModel"/> container.
            </summary>
        </member>
        <member name="P:Catel.MVVM.IViewModelContainer.ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:Catel.MVVM.IViewModelContainer.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:System.Windows.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.MVVM.IViewModelContainer.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.MVVM.IViewModelContainer.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ModelAttribute">
            <summary>
            Attribute to define a property in a view model as a model. Objects decorated with this attribute
            will be automatically validated when a property changes.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ModelAttribute"/> class.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ModelAttribute.SupportIEditableObject">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.ComponentModel.IEditableObject"/> interface should be used on the model if possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.MVVM.ICatelCommand">
            <summary>
            Adds the <see cref="E:Catel.MVVM.ICatelCommand.CanExecuteChanged"/> event to the <c>ICommand</c> interface implementation.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ICatelCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Catel.MVVM.ICatelCommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="P:Catel.MVVM.ICatelCommand.Tag">
            <summary>
            Gets the tag for this command. A tag is a way to link any object to a command so you can use your own
            methods to recognize the commands, for example by ID or string.
            <para />
            By default, the value is <c>null</c>.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="E:Catel.MVVM.ICatelCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="E:Catel.MVVM.ICatelCommand.Executed">
            <summary>
            Occurs when the command has just been executed successfully.
            </summary>
        </member>
        <member name="T:Catel.IO.Win32IOApi">
            <summary>
            Win32 file API.
            </summary>
        </member>
        <member name="T:Catel.LLBLGen.LLBLGenExtensions">
            <summary>
            Extension methods for LLBLGen Pro.
            </summary>
            <remarks>
            This class extensively use reflection so no actual reference to LLBLGen is required.
            </remarks>
        </member>
        <member name="F:Catel.LLBLGen.LLBLGenExtensions.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.IsLLBLGenType(System.Object)">
            <summary>
            Determines whether the specified object is an LLBLGen type (entity or collection).
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified object is an LLBLGen type; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method uses the <see cref="M:Catel.LLBLGen.LLBLGenExtensions.IsEntityCollection(System.Object)"/> and <see cref="M:Catel.LLBLGen.LLBLGenExtensions.IsEntity(System.Object)"/> methods.
            </remarks>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.IsEntity(System.Object)">
            <summary>
            Determines whether the specified object is an LLBLGen entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified object is an LLBLGen entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.IsEntityCollection(System.Object)">
            <summary>
            Determines whether the specified object is an LLBLGen entity collection.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified object is an LLBLGen entity collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.ValidateEntity(System.Object)">
            <summary>
            Validates the entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.SaveFields(System.Object,System.String)">
            <summary>
            Saves the fields.
            </summary>
            <param name="entity">The entity.</param>
            <param name="name">The name of the saved fields.</param>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.RollbackFields(System.Object,System.String)">
            <summary>
            Rollbacks the fields.
            </summary>
            <param name="entity">The entity.</param>
            <param name="name">The name of the saved fields.</param>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.RollbackFieldsAndRelations(System.Object,System.String)">
            <summary>
            Rollbacks the fields, and for all the dirty fields that are rolled back, the relations are refetched as well.
            </summary>
            <param name="entity">The entity.</param>
            <param name="name">The name of the saved fields.</param>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.DiscardSavedFields(System.Object)">
            <summary>
            Discards the saved fields.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.Refetch(System.Object)">
            <summary>
            Refetches the specified object.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.EntityIsDirty(System.Object)">
            <summary>
            Returns is the supplied Entity is dirty.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.GetModifiedFieldsForSavedFields(System.Object,System.String)">
            <summary>
            Gets the modified fields for saved fields.
            </summary>
            <param name="entity">The entity.</param>
            <param name="name">The name of the saved fields.</param>
            <returns>Array of field names that have changed.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="entity"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="name"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.GetCurrentFieldValue(System.Object,System.String)">
            <summary>
            Gets the entity field value.
            </summary>
            <param name="entity">The entity.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>Current value of the field.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="entity"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="fieldName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.GetCurrentFieldValue(System.Object)">
            <summary>
            Gets the current field value.
            </summary>
            <param name="entityField">The entity field.</param>
            <returns>Current field value.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="entityField"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.GetEntityFieldName(System.Object)">
            <summary>
            Gets the name of the entity field.
            </summary>
            <param name="entityField">The entity field.</param>
            <returns>The entity field name.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="entityField"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.GetEntityRelations(System.Object)">
            <summary>
            Gets the entity relations.
            </summary>
            <param name="entity">The entity.</param>
            <returns>Array of <c>IRelation</c> objects.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="entity"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.GetEntityRelationForField(System.Object,System.String)">
            <summary>
            Gets the entity relation for the specified field.
            </summary>
            <param name="entity">The entity.</param>
            <param name="fieldName">Name of the field to find the relation for.</param>
            <returns>The <c>IRelation</c> or <c>null</c> if no relation exists for the field.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="entity"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="fieldName"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenExtensions.SetRelationToNotFetched(System.Object,System.Object)">
            <summary>
            Sets the AlreadyFetched[MappedFieldName] property of the specified relation to false.
            </summary>
            <param name="entity">The entity.</param>
            <param name="relation">Relation to refetch.</param>
            <returns>
            <c>true</c> if the relation is set to not fetched successfully; otherwise <c>false</c>..
            </returns>
            <remarks>Call this method only for OneToOne and OneToMany relations.</remarks>
            <exception cref="T:System.ArgumentNullException">when <paramref name="entity"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="relation"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Runtime.Serialization.SerializationHelper">
            <summary>
            Class that makes serialization much easier and safer.
            </summary>
        </member>
        <member name="F:Catel.Runtime.Serialization.SerializationHelper.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.Runtime.Serialization.SerializationHelper._serializers">
            <summary>
            Cache for the <see cref="T:System.Xml.Serialization.XmlSerializer"/> per name.
            </summary>
        </member>
        <member name="M:Catel.Runtime.Serialization.SerializationHelper.GetXmlSerializer(System.Type,System.String)">
            <summary>
            Gets the XML serializer for a specific type. This method caches serializers so the
            performance can be improved when a serializer is used more than once.
            </summary>
            <param name="type">The type to get the xml serializer for.</param>
            <param name="xmlName">Name of the property as known in XML.</param>
            <returns><see cref="T:System.Xml.Serialization.XmlSerializer"/> for the given type.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.SerializationHelper.GetBinarySerializer(System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> for binary (de)serialization.
            </summary>
            <param name="supportRedirects">if set to <c>true</c>, redirects of types are supported. This is substantially slower.</param>
            <returns><see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> with the requested options.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.SerializationHelper.GetString(System.Runtime.Serialization.SerializationInfo,System.String,System.String)">
            <summary>
            Retrieves a string from a SerializationInfo object.
            </summary>
            <param name="info">SerializationInfo object.</param>
            <param name="name">Name of the value to retrieve.</param>
            <param name="defaultValue">Default value when value does not exist.</param>
            <returns>String value.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.SerializationHelper.GetInt(System.Runtime.Serialization.SerializationInfo,System.String,System.Int32)">
            <summary>
            Retrieves an integer from a SerializationInfo object.
            </summary>
            <param name="info">SerializationInfo object</param>
            <param name="name">Name of the value to retrieve.</param>
            <param name="defaultValue">Default value when value does not exist.</param>
            <returns>Integer value.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.SerializationHelper.GetBool(System.Runtime.Serialization.SerializationInfo,System.String,System.Boolean)">
            <summary>
            Retrieves a boolean from a SerializationInfo object.
            </summary>
            <param name="info">SerializationInfo object.</param>
            <param name="name">Name of the value to retrieve.</param>
            <param name="defaultValue">Default value when value does not exist.</param>
            <returns>Boolean value.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.SerializationHelper.GetObject``1(System.Runtime.Serialization.SerializationInfo,System.String,``0)">
            <summary>
            Retrieves an object from a SerializationInfo object.
            </summary>
            <typeparam name="T">Type of the value to read from the serialization information.</typeparam>
            <param name="info">SerializationInfo object.</param>
            <param name="name">Name of the value to retrieve.</param>
            <param name="defaultValue">Default value when value does not exist.</param>
            <returns>object value.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.SerializationHelper.GetObject(System.Runtime.Serialization.SerializationInfo,System.String,System.Type,System.Object)">
            <summary>
            Retrieves an object from a SerializationInfo object.
            </summary>
            <param name="info">SerializationInfo object.</param>
            <param name="name">Name of the value to retrieve.</param>
            <param name="type">Type of the object to retrieve.</param>
            <param name="defaultValue">Default value when value does not exist.</param>
            <returns>object value.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.SerializationHelper.SerializeXml(System.String,System.Object)">
            <summary>
            Serializes the XML.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="obj">The object.</param>
            <returns><c>true</c> if the object is serialized to xml successfully; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.SerializationHelper.DeserializeXml``1(System.String)">
            <summary>
            Deserializes the specified file name to an object.
            </summary>
            <typeparam name="T">Type of the object that is contained in the file.</typeparam>
            <param name="fileName">Name of the file.</param>
            <returns>Deserialized type or <c>null</c> if not successful.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.SerializationHelper.DeserializeXml``1(System.String,System.String)">
            <summary>
            Deserializes the specified file name to an object. If the object cannot be serialized by the
            full path, the relative path is used as a last resort.
            </summary>
            <typeparam name="T">Type of the object that is contained in the file.</typeparam>
            <param name="fullFileName">Full name of the file.</param>
            <param name="relativeFileName">Name of the relative file.</param>
            <returns>
            Deserialized type or <c>null</c> if not successful.
            </returns>
        </member>
        <member name="T:Catel.MVVM.Services.WindowNotRegisteredException">
            <summary>
            Exception in case a window not registered, but still being used.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.WindowNotRegisteredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.WindowNotRegisteredException"/> class.
            </summary>
            <param name="name">The name of the window.</param>
        </member>
        <member name="P:Catel.MVVM.Services.WindowNotRegisteredException.Name">
            <summary>
            Gets the name of the window.
            </summary>
            <value>The name of the window.</value>
        </member>
        <member name="T:Catel.MVVM.ModelNotRegisteredException">
            <summary>
            Exception for when a model is not registered on a class, but a <see cref="T:Catel.MVVM.ViewModelToModelAttribute"/> is used with the model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ModelNotRegisteredException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ModelNotRegisteredException"/> class.
            </summary>
            <param name="modelName">Name of the model.</param>
            <param name="propertyDeclaringViewModelToModelAttribute">The property declaring the view model to model attribute.</param>
        </member>
        <member name="P:Catel.MVVM.ModelNotRegisteredException.ModelName">
            <summary>
            Gets the name of the model.
            </summary>
            <value>The name of the model.</value>
        </member>
        <member name="P:Catel.MVVM.ModelNotRegisteredException.PropertyDeclaringViewModelToModelAttribute">
            <summary>
            Gets the property declaring the view model to model attribute.
            </summary>
            <value>The property declaring the view model to model attribute.</value>
        </member>
        <member name="T:log4net.log4netExtensions">
            <summary>
            Log4net extensions.
            </summary>
        </member>
        <member name="F:log4net.log4netExtensions._stopwatchTracers">
            <summary>
            A dictionary containing all living instances of the stopwatches.
            </summary>
        </member>
        <member name="M:log4net.log4netExtensions.StartStopwatchTrace(log4net.ILog,System.String)">
            <summary>
            Starts the trace of a stopwatch trace. Should be ended with a call to <see cref="M:log4net.log4netExtensions.StopStopwatchTrace(log4net.ILog,System.String)"/>.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="name">The name of the stopwatch.</param>
        </member>
        <member name="M:log4net.log4netExtensions.StartStopwatchTrace(log4net.ILog,System.String,System.Boolean)">
            <summary>
            Starts the trace of a stopwatch trace. Should be ended with a call to <see cref="M:log4net.log4netExtensions.StopStopwatchTrace(log4net.ILog,System.String)"/>.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="name">The name of the stopwatch.</param>
            <param name="traceNameOnStart">if set to <c>true</c>, the name will be traced both on the start and stop of the stopwatch.</param>
        </member>
        <member name="M:log4net.log4netExtensions.StopStopwatchTrace(log4net.ILog,System.String)">
            <summary>
            Stops the stopwatch trace and writes the duration as Verbose to the trace.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="name">The name of the stopwatch.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Debug(log4net.ILog,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log as debug.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="format">The formatted text.</param>
            <param name="args">The arguments for the format.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Debug(log4net.ILog,System.Exception,System.String)">
            <summary>
            Writes a message to the log as debug with exception details.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="message">Message of the trace.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Debug(log4net.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log as debug with exception details.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="format">The formatted text.</param>
            <param name="args">The arguments for the format.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Info(log4net.ILog,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log as information.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="format">The formatted text.</param>
            <param name="args">The arguments for the format.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Info(log4net.ILog,System.Exception,System.String)">
            <summary>
            Writes a message to the log as info with exception details.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="message">Message of the trace.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Info(log4net.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log as info with exception details.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="format">The formatted text.</param>
            <param name="args">The arguments for the format.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Warn(log4net.ILog,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log as warning.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="format">The formatted text.</param>
            <param name="args">The arguments for the format.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Warn(log4net.ILog,System.Exception,System.String)">
            <summary>
            Writes a message to the log as warning with exception details.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="message">Message of the trace.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Warn(log4net.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log as warning with exception details.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="format">The formatted text.</param>
            <param name="args">The arguments for the format.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Error(log4net.ILog,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log as error.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="format">The formatted text.</param>
            <param name="args">The arguments for the format.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Error(log4net.ILog,System.Exception,System.String)">
            <summary>
            Writes a message to the log as error with exception details.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="message">Message of the trace.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Error(log4net.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log as error with exception details.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="format">The formatted text.</param>
            <param name="args">The arguments for the format.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Fatal(log4net.ILog,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log as fatal.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="format">The formatted text.</param>
            <param name="args">The arguments for the format.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Fatal(log4net.ILog,System.Exception,System.String)">
            <summary>
            Writes a message to the log as fatal with exception details.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="message">Message of the trace.</param>
        </member>
        <member name="M:log4net.log4netExtensions.Fatal(log4net.ILog,System.Exception,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the log as fatal with exception details.
            </summary>
            <param name="log">The log to write to.</param>
            <param name="ex"><see cref="T:System.Exception"/> that contains the additional information.</param>
            <param name="format">The formatted text.</param>
            <param name="args">The arguments for the format.</param>
        </member>
        <member name="T:Catel.IoC.UnityContainer">
            <summary>
            Singleton unity container to make it very easy to get instances services.
            </summary>
        </member>
        <member name="F:Catel.IoC.UnityContainer._instance">
            <summary>
            The instance of this singleton class.
            </summary>
        </member>
        <member name="F:Catel.IoC.UnityContainer._unityContainer">
            <summary>
            The <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> managed by this class.
            </summary>
        </member>
        <member name="F:Catel.IoC.UnityContainer._unityContainerLock">
            <summary>
            Lock object for the <see cref="F:Catel.IoC.UnityContainer._unityContainer"/> field.
            </summary>
        </member>
        <member name="P:Catel.IoC.UnityContainer.Instance">
            <summary>
            Gets the instance of this singleton class.
            </summary>
            <value>The instance of this singleton class.</value>
        </member>
        <member name="P:Catel.IoC.UnityContainer.Container">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> maanged by this class.
            </summary>
            <value>The unity container.</value>
        </member>
        <member name="T:Catel.Data.SavableDataObjectBase`1">
            <summary>
            Abstract class that makes the <see cref="T:Catel.Data.DataObjectBase`1"/> serializable.
            </summary>
            <typeparam name="T">Type that the class should hold (same as the defined type).</typeparam>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.SavableDataObjectBase`1"/> class.
            </summary>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.SavableDataObjectBase`1"/> class.
            </summary>
            <param name="info">SerializationInfo object, null if this is the first time construction.</param>
            <param name="context">StreamingContext object, simple pass a default new StreamingContext() if this is the first time construction.</param>
            <remarks>
            Call this method, even when constructing the object for the first time (thus not deserializing).
            </remarks>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.ToXml">
            <summary>
            Serializes the object to and xml object.
            </summary>
            <returns><see cref="T:System.Xml.Linq.XDocument"/> containing the serialized data.</returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.ToByteArray">
            <summary>
            Serializes the object to a byte array.
            </summary>
            <returns>Byte array containing the serialized data.</returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Save(System.String)">
            <summary>
            Saves the object to a file using the default formatting.
            </summary>
            <param name="fileName">Filename of the file that will contain the serialized data of this object.</param>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Save(System.String,Catel.Data.SerializationMode)">
            <summary>
            Saves the object to a file using a specific formatting.
            </summary>
            <param name="fileName">Filename of the file that will contain the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Save(System.IO.Stream)">
            <summary>
            Saves the object to a stream using the default formatting.
            </summary>
            <param name="stream">Stream that will contain the serialized data of this object.</param>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Save(System.IO.Stream,Catel.Data.SerializationMode)">
            <summary>
            Saves the object to a stream using a specific formatting.
            </summary>
            <param name="stream">Stream that will contain the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.String)">
            <summary>
            Loads the object from a file using binary formatting.
            </summary>
            <param name="fileName">Filename of the file that contains the serialized data of this object.</param>
            <returns>Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.</returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.String,System.Boolean)">
            <summary>
            Loads the object from a file using binary formatting.
            </summary>
            <param name="fileName">Filename of the file that contains the serialized data of this object.</param>
            <param name="enableRedirects">if set to <c>true</c>, redirects will be enabled.</param>
            <returns>Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.</returns>
            <remarks>
            When enableRedirects is enabled, loading will take more time. Only set
            the parameter to <c>true</c> when the deserialization without redirects fails.
            </remarks>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.String,Catel.Data.SerializationMode)">
            <summary>
            Loads the object from a file using a specific formatting.
            </summary>
            <param name="fileName">Filename of the file that contains the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param>
            <returns>Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.</returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.String,Catel.Data.SerializationMode,System.Boolean)">
            <summary>
            Loads the object from a file using a specific formatting.
            </summary>
            <param name="fileName">Filename of the file that contains the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param>
            <param name="enableRedirects">if set to <c>true</c>, redirects will be enabled.</param>
            <returns>Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.</returns>
            <remarks>
            When enableRedirects is enabled, loading will take more time. Only set
            the parameter to <c>true</c> when the deserialization without redirects fails.
            </remarks>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.Xml.Linq.XDocument)">
            <summary>
            Loads the object from an XmlDocument object.
            </summary>
            <param name="xmlDocument">The XML document.</param>
            <returns>Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.</returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.Byte[])">
            <summary>
            Loads the object from a stream using binary formatting.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.</returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.Byte[],System.Boolean)">
            <summary>
            Loads the object from a stream.
            </summary>
            <param name="bytes">The byte array.</param>
            <param name="enableRedirects">if set to <c>true</c>, redirects will be enabled.</param>
            <returns>
            Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.
            </returns>
            <remarks>
            When enableRedirects is enabled, loading will take more time. Only set
            the parameter to <c>true</c> when the deserialization without redirects fails.
            </remarks>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.IO.Stream)">
            <summary>
            Loads the object from a stream using binary formatting.
            </summary>
            <param name="stream">Stream that contains the serialized data of this object.</param>
            <returns>Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.</returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.IO.Stream,System.Boolean)">
            <summary>
            Loads the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="enableRedirects">if set to <c>true</c>, redirects will be enabled.</param>
            <returns>Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.</returns>
            <remarks>
            When enableRedirects is enabled, loading will take more time. Only set
            the parameter to <c>true</c> when the deserialization without redirects fails.
            </remarks>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.IO.Stream,Catel.Data.SerializationMode)">
            <summary>
            Loads the object from a stream using a specific formatting.
            </summary>
            <param name="stream">Stream that contains the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param> 
            <returns>Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.</returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.Load(System.IO.Stream,Catel.Data.SerializationMode,System.Boolean)">
            <summary>
            Loads the object from a stream using a specific formatting.
            </summary>
            <param name="stream">Stream that contains the serialized data of this object.</param>
            <param name="mode"><see cref="T:Catel.Data.SerializationMode"/> to use.</param> 
            <param name="enableRedirects">if set to <c>true</c>, redirects will be enabled.</param>
            <returns>Deserialized instance of the object. If the deserialization fails, <c>null</c> is returned.</returns>
            <remarks>
            When enableRedirects is enabled, loading will take more time. Only set
            the parameter to <c>true</c> when the deserialization without redirects fails.
            </remarks>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.GetObjectFromXmlNode(System.Xml.Linq.XNode,System.String,System.String)">
            <summary>
            Gets the object from XML node.
            </summary>
            <param name="node">The node from which to get the object.</param>
            <param name="propertyName">Name of the property as known in the class.</param>
            <param name="xmlName">Name of the property as known in XML.</param>
            <returns>Object or <c>null</c>.</returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.MapXmlNameToPropertyName(System.String)">
            <summary>
            Maps the name of the XML element to a property name.
            </summary>
            <param name="xmlName">Name of the XML element.</param>
            <returns>Name of the property that represents the xml value.</returns>
        </member>
        <member name="M:Catel.Data.SavableDataObjectBase`1.MapPropertyNameToXmlName(System.String)">
            <summary>
            Maps the name of the property name to an XML name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the XML element that represents the property value.</returns>
        </member>
        <member name="P:Catel.Data.SavableDataObjectBase`1.Bytes">
            <summary>
            Gets the bytes of the current binary serialized data object.
            </summary>
            <value>The bytes.</value>
        </member>
        <member name="T:Catel.ExcludeReason">
            <summary>
            Use this enum to provide a valid reason for excluding coverage. Expand this enum 
            if you encounter a new type of reason. 
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.StaticSingletonWillOnlyBeCoveredInProductionScenario">
            <summary>
            Static singleton will only be covered in production scenarios.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.ConstructorWillOnlyBeCoveredInProductionScenario">
            <summary>
            Constructor will only be covered in production scenarios. 
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.MethodWillOnlyBeCoveredInProductionScenario">
            <summary>
            Method will only be covered in production scenarios. 
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.ToBeImplementedInFutureSprint">
            <summary>
            Must be implemented in a future sprint.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.PropertyWillBeSubstitutedInTest">
            <summary>
            Property will be substituted during a test.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.ContainsCodeWhichCannotBeSubstitutedInTest">
            <summary>
            Contains code which cannot be substituted in a test.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.InterfaceMethodWillNotBeImplementedInThisClass">
            <summary>
            Interface will not be implemented in this class.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.TestCode">
            <summary>
            This is test code, and therefore needs to be excluded.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.ClassWillOnlyBeCoveredInProductionScenario">
            <summary>
            Class will only be covered in production scenarios. 
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.DataType">
            <summary>
            This is a data type, and therefore needs to be excluded.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.GeneratedClass">
            <summary>
            This is a generated class, and therefore needs to be excluded.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.NativeMethodWillBeCoveredInNativeUnitTests">
            <summary>
            Native method will be covered in native unit tests.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.Deprecated">
            <summary>
            This object is deprecated, no need to test it any longer.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.DebugLogging">
            <summary>
            This is debug logging, and therefore needs to be excluded.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.NonUsedAbstractImplementation">
            <summary>
            Object is a non-used abstract implementation.
            </summary>
        </member>
        <member name="F:Catel.ExcludeReason.Attribute">
            <summary>
            Attribute is not covered by unit tests.
            </summary>
        </member>
        <member name="T:Catel.CoverageExcludeAttribute">
            <summary>
            Use this to skip coverage for the method which is decorated with this 
            attribute. Use with care! 
            Do not put this attribute in a specific namespace.
            </summary>
        </member>
        <member name="F:Catel.CoverageExcludeAttribute._reason">
            <summary>
            Reason why the object is excluded from coverage.
            </summary>
        </member>
        <member name="M:Catel.CoverageExcludeAttribute.#ctor(Catel.ExcludeReason)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.CoverageExcludeAttribute"/> class.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Catel.CoverageExcludeAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Catel.Reflection.CannotSetPropertyValueException">
            <summary>
            Exception in case a property value cannot be set.
            </summary>
        </member>
        <member name="M:Catel.Reflection.CannotSetPropertyValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Reflection.CannotSetPropertyValueException"/> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Catel.Reflection.CannotSetPropertyValueException.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="T:Catel.IO.Utils.FileWatcherChangeType">
            <summary>
            Available FileWatcher changes.
            </summary>
        </member>
        <member name="F:Catel.IO.Utils.FileWatcherChangeType.FileAdded">
            <summary>
            A file is added.
            </summary>
        </member>
        <member name="F:Catel.IO.Utils.FileWatcherChangeType.FileDeleted">
            <summary>
            A file is deleted.
            </summary>
        </member>
        <member name="F:Catel.IO.Utils.FileWatcherChangeType.FileRenamed">
            <summary>
            A file is renamed.
            </summary>
        </member>
        <member name="F:Catel.IO.Utils.FileWatcherChangeType.FileChanged">
            <summary>
            A file is changed.
            </summary>
        </member>
        <member name="T:Catel.IO.Utils.FileWatcherEventArgs">
            <summary>
            Arguments sent through when an event is fired
            </summary>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcherEventArgs.#ctor(System.String,System.String,System.String,System.String,Catel.IO.Utils.FileWatcherChangeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.IO.Utils.FileWatcherEventArgs"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="path">The specific path.</param>
            <param name="oldPath">The old path.</param>
            <param name="oldName">The old name.</param>
            <param name="changeType">Type of the change.</param>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcherEventArgs.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcherEventArgs.OldFileName">
            <summary>
            Gets the old name of the file.
            </summary>
            <value>The old name of the file.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcherEventArgs.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The path to watch.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcherEventArgs.OldPath">
            <summary>
            Gets the old path.
            </summary>
            <value>The old path.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcherEventArgs.ChangeType">
            <summary>
            Gets the type of the change.
            </summary>
            <value>The type of the change.</value>
        </member>
        <member name="T:Catel.IO.Utils.FileWatcher">
            <summary>
            Monitors a folder for file system changes.
            </summary>
        </member>
        <member name="F:Catel.IO.Utils.FileWatcher._path">
            <summary>
            The path to watch.
            </summary>
        </member>
        <member name="F:Catel.IO.Utils.FileWatcher._filter">
            <summary>
            The filter for the files to watch.
            </summary>
        </member>
        <member name="F:Catel.IO.Utils.FileWatcher._fsw">
            <summary>
            The actual <see cref="T:System.IO.FileSystemWatcher"/> that is wrapped by this class.
            </summary>
        </member>
        <member name="F:Catel.IO.Utils.FileWatcher._includeSubdirectories">
            <summary>
            A value indicating whether subdirectories are included or not.
            </summary>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.IO.Utils.FileWatcher"/> class.
            </summary>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.IO.Utils.FileWatcher"/> class.
            </summary>
            <param name="path">The path to watch.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.IO.Utils.FileWatcher"/> class.
            </summary>
            <param name="path">The path to watch.</param>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.StartWatcher">
            <summary>
            Start the watcher for a specific folder with a specific filter.
            </summary>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.StopWatcher">
            <summary>
            Stop the folder watcher from raising events.
            </summary>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.CreateFileWatcher">
            <summary>
            Creates the file watcher.
            </summary>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.OnChanged(Catel.IO.Utils.FileWatcherEventArgs)">
            <summary>
            Raises the <see cref="E:Changed"/> event.
            </summary>
            <param name="e">The <see cref="T:Catel.IO.Utils.FileWatcherEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.OnCreated(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Called when the <see cref="T:System.IO.FileSystemWatcher"/> has detected a change.
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:System.IO.FileSystemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Called when the <see cref="T:System.IO.FileSystemWatcher"/> has detected a change.
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:System.IO.RenamedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.OnDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Called when the <see cref="T:System.IO.FileSystemWatcher"/> has detected a change.
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:System.IO.FileSystemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.IO.Utils.FileWatcher.OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Called when the <see cref="T:System.IO.FileSystemWatcher"/> has detected a change.
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:System.IO.FileSystemEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Catel.IO.Utils.FileWatcher.Changed">
            <summary>
            Occurs when something has changed.
            </summary>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcher.Path">
            <summary>
            Gets or sets the path to watch.
            </summary>
            <value>The path to watch.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcher.Filter">
            <summary>
            Gets or sets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcher.IsStarted">
            <summary>
            Gets a value indicating whether this instance is started.
            </summary>
            <value>
            	<c>true</c> if this instance is started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcher.CurrentFileName">
            <summary>
            Gets the name of the current file.
            </summary>
            <value>The name of the current file.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcher.CurrentOldFileName">
            <summary>
            Gets the name of the current old file.
            </summary>
            <value>The name of the current old file.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcher.CurrentPath">
            <summary>
            Gets the current path.
            </summary>
            <value>The current path.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcher.CurrentOldPath">
            <summary>
            Gets the current old path.
            </summary>
            <value>The current old path.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcher.CurrentChangeType">
            <summary>
            Gets the type of the current change.
            </summary>
            <value>The type of the current change.</value>
        </member>
        <member name="P:Catel.IO.Utils.FileWatcher.IncludeSubdirectories">
            <summary>
            Gets or sets a value indicating whether to include sub directories or not.
            </summary>
            <value>
            	<c>true</c> if sub directories should be included; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Data.PropertyNotNullableException">
            <summary>
            Exception when a property value is set to null but when the type does not support
            null values.
            </summary>
        </member>
        <member name="M:Catel.Data.PropertyNotNullableException.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.PropertyNotNullableException"/> class.
            </summary>
            <param name="propertyName">Name of the property that caused the exception.</param>
            <param name="propertyType">Type of the object that is trying to register the property.</param>
        </member>
        <member name="P:Catel.Data.PropertyNotNullableException.PropertyName">
            <summary>
            Gets or sets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Catel.Data.PropertyNotNullableException.PropertyType">
            <summary>
            Gets or sets the property type for which the property is already registered.
            </summary>
            <value>The property type for which the property is already registered.</value>
        </member>
        <member name="T:Catel.MVVM.Services.UICompletedEventArgs">
            <summary>
            This is the EventArgs return value for the IUIVisualizer.Show completed event.
            </summary>
            <remarks>
            This implementation is based on the implementation that can be found in Cinch 
            (see http://www.codeproject.com/KB/WPF/CinchIII.aspx#PopServ). 
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.UICompletedEventArgs.#ctor(System.Object,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.UICompletedEventArgs"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:Catel.MVVM.Services.UICompletedEventArgs.DataContext">
            <summary>
            Gets the data context.
            </summary>
            <value>The data context.</value>
        </member>
        <member name="P:Catel.MVVM.Services.UICompletedEventArgs.Result">
            <summary>
            Gets the result of the window.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:Catel.LLBLGen.LLBLGenHelper">
            <summary>
            LLBLGen Pro helper class.
            </summary>
            <remarks>
            This class extensively use reflection so no actual reference to LLBLGen is required.
            </remarks>
        </member>
        <member name="F:Catel.LLBLGen.LLBLGenHelper.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetEntityMethod(System.String,System.Type[])">
            <summary>
            Gets a method with the specified name of the <c>IEntityCore</c> interface.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="signatureParameterTypes">The signature parameter types.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> or <c>null</c> if the method is not found.</returns>
            <remarks>
            This method only supports the retrieval of public instance methods that have no parameters.
            </remarks>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Gets the method from a specified <paramref name="type"/> by it's signature.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="signatureParameterTypes">The signature parameter types.</param>
            <returns>
            	<see cref="T:System.Reflection.MethodInfo"/> or <c>null</c> if the method is not found.
            </returns>
            <remarks>
            This method only supports the retrieval of public instance methods.
            </remarks>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetEntityProperty``1(System.String)">
            <summary>
            Gets a entity property based on it's <typeparamref name="TProperty">return type</typeparamref> and it's <paramref name="propertyName">name</paramref>.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.IsLLBLGenType(System.Type)">
            <summary>
            Determines whether the specified type is an LLBLGen type (entity or collection).
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            	<c>true</c> if the specified type is an LLBLGen type; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method uses the <see cref="M:Catel.LLBLGen.LLBLGenHelper.IsEntityCollection(System.Type)"/> and <see cref="M:Catel.LLBLGen.LLBLGenHelper.IsEntity(System.Type)"/> methods.
            </remarks>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.IsLLBLGenType(System.Object)">
            <summary>
            Determines whether the specified object is an LLBLGen type (entity or collection).
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>
            	<c>true</c> if the specified object is an LLBLGen type; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This method uses the <see cref="M:Catel.LLBLGen.LLBLGenHelper.IsEntityCollection(System.Type)"/> and <see cref="M:Catel.LLBLGen.LLBLGenHelper.IsEntity(System.Type)"/> methods.
            </remarks>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.IsEntity(System.Type)">
            <summary>
            Determines whether the specified type is an LLBLGen entity.
            </summary>
            <param name="type">The type to check.</param>
            <returns>
            	<c>true</c> if the specified type is an LLBLGen entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.IsEntity(System.Object)">
            <summary>
            Determines whether the specified object is an LLBLGen entity.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>
            	<c>true</c> if the specified object is an LLBLGen entity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.IsEntityCollection(System.Type)">
            <summary>
            Determines whether the specified type is an LLBLGen entity collection.
            </summary>
            <param name="type">The typ to checke.</param>
            <returns>
            	<c>true</c> if the specified type is an LLBLGen entity collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.IsEntityCollection(System.Object)">
            <summary>
            Determines whether the specified object is an LLBLGen entity collection.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>
            	<c>true</c> if the specified object is an LLBLGen entity collection; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetValidateEntityMethod(System.Object)">
            <summary>
            Gets the <c>IEntityCore.ValidateEntity</c> method if available.
            </summary>
            <param name="entity">The entity to get the method from.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> or <c>null</c> if the method is not found.</returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetSaveFieldsMethod(System.Object)">
            <summary>
            Gets the <c>IEntityCore.SaveFields(string)</c> method if available.
            </summary>
            <param name="entity">The entity to get the method from.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> or <c>null</c> if the method is not found.</returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetDiscardSavedFieldsMethod(System.Object)">
            <summary>
            Gets the <c>IEntityCore.GetDiscardSavedFieldsMethod()</c> method if available.
            </summary>
            <param name="entity">The entity to get the method from.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> or <c>null</c> if the method is not found.</returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetRollbackFieldsMethod(System.Object)">
            <summary>
            Gets the <c>IEntityCore.RollbackFields(string)</c> method if available.
            </summary>
            <param name="entity">The entity to get the method from.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> or <c>null</c> if the method is not found.</returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetRefetchMethod(System.Object)">
            <summary>
            Gets the refetch method.
            </summary>
            <param name="entity">The entity to get the method from.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> or <c>null</c> if the method is not found.</returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetRelatedEntityPropertyName(System.Type,System.String)">
            <summary>
            Gets the name of the related entity property. For example, if <c>Product</c> is passed of an <c>Order</c> entity, this
            method will return <c>ProductID</c>.
            </summary>
            <param name="type">The type of the LLBLGen entity.</param>
            <param name="property">The property to map.</param>
            <returns>
            The name of the mapped property, or <c>null</c> if the property cannot be mapped.
            </returns>
            <remarks>
            For now, this method returns the property name with "ID" appended. Still waiting for feedback from LLBLGen team.
            TODO: actually retrieve the property name correctly
            </remarks>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetEntityIsDirtyProperty">
            <summary>
            Gets IEntityCore's IsDirty property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetIEntityCore(System.Type)">
            <summary>
            Gets the <c>IEntityCore</c> interface of the type if available.
            </summary>
            <param name="type">The type to get the interface from.</param>
            <returns>
            	<c>IEntityCore</c> or <c>null</c> if this type has no support for LLBLGen Pro.
            </returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetIEntityCore(System.Object)">
            <summary>
            Gets the <c>IEntityCore</c> interface of the object if available.
            </summary>
            <param name="entity">The entity to get the interface from.</param>
            <returns><c>IEntityCore</c> or <c>null</c> if this object has no support for LLBLGen Pro.</returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetIEntityCollectionCore(System.Type)">
            <summary>
            Gets the <c>IEntityCollectionCore</c> interface of the type if available.
            </summary>
            <param name="type">The type to get the interface from.</param>
            <returns><c>IEntityCollectionCore</c> or <c>null</c> if this type has no support for LLBLGen Pro.</returns>
        </member>
        <member name="M:Catel.LLBLGen.LLBLGenHelper.GetIEntityCollectionCore(System.Object)">
            <summary>
            Gets the <c>IEntityCollectionCore</c> interface of the object if available.
            </summary>
            <param name="entity">The entity to get the interface from.</param>
            <returns><c>IEntityCollectionCore</c> or <c>null</c> if this object has no support for LLBLGen Pro.</returns>
        </member>
        <member name="P:Catel.LLBLGen.LLBLGenHelper.EntityType">
            <summary>
            Gets the type of IEntityCore.
            </summary>
            <value>The type of the IEntityCore.</value>
        </member>
        <member name="P:Catel.LLBLGen.LLBLGenHelper.EntityCollectionType">
            <summary>
            Gets the type of IEntityCollectionCore.
            </summary>
            <value>The type of the IEntityCollectionCore.</value>
        </member>
        <member name="P:Catel.LLBLGen.LLBLGenHelper.IsLLBLGenAvailable">
            <summary>
            Gets a value indicating whether LLBLGen Pro is available.
            </summary>
            <value>
            	<c>true</c> if LLBLGen Pro is available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Data.PropertyChangedWithSenderEventArgs">
            <summary>
            Property changed event args that are used when a property has changed. The event arguments contains both
            the original sender as the current sender of the event.
            </summary>
        </member>
        <member name="M:Catel.Data.PropertyChangedWithSenderEventArgs.#ctor(System.Object,System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.PropertyChangedWithSenderEventArgs"/> class.
            </summary>
            <param name="originalSender">The original sender.</param>
            <param name="latestSender">The latest sender.</param>
            <param name="eventArgs">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Data.PropertyChangedWithSenderEventArgs.#ctor(System.Object,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.PropertyChangedWithSenderEventArgs"/> class.
            </summary>
            <param name="originalSender">The original sender.</param>
            <param name="latestSender">The latest sender.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Catel.Data.PropertyChangedWithSenderEventArgs.OriginalSender">
            <summary>
            Gets the original sender.
            </summary>
            <value>The original sender.</value>
        </member>
        <member name="P:Catel.Data.PropertyChangedWithSenderEventArgs.LatestSender">
            <summary>
            Gets the latest sender.
            </summary>
            <value>The latest sender.</value>
        </member>
        <member name="T:Catel.Reflection.ReflectionExtensions">
            <summary>
            Reflection extension class.
            </summary>
        </member>
        <member name="F:Catel.Reflection.ReflectionExtensions._properties">
            <summary>
            Cache for the properties per type.
            </summary>
        </member>
        <member name="F:Catel.Reflection.ReflectionExtensions._methods">
            <summary>
            Cache for the methods per type.
            </summary>
        </member>
        <member name="M:Catel.Reflection.ReflectionExtensions.GetFieldAndAllowPrivateBaseMembers(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets the field info for a specific field. But, the good thing about this is that it also supports
            <see cref="F:System.Reflection.BindingFlags.FlattenHierarchy"/> for private members in base classes.
            </summary>
            <param name="type">The type to reflect.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="bindingFlags">The binding flags.</param>
            <returns><see cref="T:System.Reflection.FieldInfo"/> or <c>null</c> if the field is not found.</returns>
        </member>
        <member name="M:Catel.Reflection.ReflectionExtensions.GetPropertyCached(System.Type,System.String)">
            <summary>
            Gets the property info for a specific property of a specific type.
            </summary>
            <param name="type">The type to reflect.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> of the property or <c>null</c> if the property is not found.</returns>
        </member>
        <member name="M:Catel.Reflection.ReflectionExtensions.GetMethodCached(System.Type,System.String)">
            <summary>
            Gets the method for a specific type.
            </summary>
            <param name="type">The type that contains the member.</param>
            <param name="methodName">Name of the method.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> of the method or <c>null</c> if the method is not found.</returns>
        </member>
        <member name="M:Catel.Reflection.ReflectionExtensions.AddObjectToCache``1(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,``0}},System.Type,System.String,``0)">
            <summary>
            Adds an object to cache.
            </summary>
            <typeparam name="T">Type of the member.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="type">The type that contains the member.</param>
            <param name="memberName">Name of the member.</param>
            <param name="reflectedMember">The reflected member.</param>
        </member>
        <member name="M:Catel.Reflection.ReflectionExtensions.GetObjectFromCache``1(System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.String,``0}},System.Type,System.String)">
            <summary>
            Gets an object from cache.
            </summary>
            <typeparam name="T">Type of the member.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="type">The type that contains the member.</param>
            <param name="memberName">Name of the member.</param>
            <returns>object or <c>null</c> if the object does not exist in the cache.</returns>
        </member>
        <member name="T:Catel.IO.CannotCreateDirectoryException">
            <summary>
            Thrown when the requested directory cannot be created.
            </summary>
        </member>
        <member name="M:Catel.IO.CannotCreateDirectoryException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.IO.CannotCreateDirectoryException"/> class.
            </summary>
            <param name="directory">The directory.</param>
        </member>
        <member name="P:Catel.IO.CannotCreateDirectoryException.Directory">
            <summary>
            Gets the directory.
            </summary>
            <value>The directory.</value>
        </member>
        <member name="T:Catel.AttributeHelper">
            <summary>
            Attribute helper class.
            </summary>
        </member>
        <member name="M:Catel.AttributeHelper.TryGetAttribute``1(System.Reflection.PropertyInfo,``0@)">
            <summary>
            Tries to the get attribute.
            </summary>
            <typeparam name="TAttribute">The attribute type.</typeparam>
            <param name="propertyInfo">The property info.</param>
            <param name="attribute">The attribute.</param>
            <returns>
            	<c>true</c> if the attribute is retrieved successfully; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Runtime.Serialization.RedirectDeserializationBinder">
            <summary>
            <see cref="T:System.Runtime.Serialization.SerializationBinder"/> class that supports backwards compatible serialization.
            </summary>
        </member>
        <member name="F:Catel.Runtime.Serialization.RedirectDeserializationBinder.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.Runtime.Serialization.RedirectDeserializationBinder._redirectAttributes">
            <summary>
            A dictionary of all <see cref="T:Catel.Runtime.Serialization.RedirectTypeAttribute"/> found.
            </summary>
        </member>
        <member name="F:Catel.Runtime.Serialization.RedirectDeserializationBinder._microsoftPublicKeyTokens">
            <summary>
            A list of microsoft public key tokens.
            </summary>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Runtime.Serialization.RedirectDeserializationBinder"/> class.
            <para/>
            Creates a custom binder that redirects all the types to new types if required. All properties
            decorated with the <see cref="T:Catel.Runtime.Serialization.RedirectTypeAttribute"/> will be redirected.
            </summary>
            <remarks>
            This constructor searches for attributes of the current application domain.
            </remarks>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.#ctor(System.AppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Runtime.Serialization.RedirectDeserializationBinder"/> class.
            <para/>
            Creates a custom binder that redirects all the types to new types if required. All properties
            decorated with the <see cref="T:Catel.Runtime.Serialization.RedirectTypeAttribute"/> will be redirected.
            </summary>
            <param name="appDomain"><see cref="T:System.AppDomain"/> to search in.</param>
            <remarks>
            This constructor searches for attributes in a specific application domain.
            </remarks>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Runtime.Serialization.RedirectDeserializationBinder"/> class.
            <para/>
            This method automatically loads all the assemblies into the current AppDomain and then uses the
            <see cref="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})"/> constructor.
            <para/>
            Creates a custom binder that redirects all the types to new types if required. All properties
            decorated with the <see cref="T:Catel.Runtime.Serialization.RedirectTypeAttribute"/> will be redirected.
            </summary>
            <param name="assemblies">Array of assembly locations that should be searched.</param>
            <remarks>
            This constructor searches for attributes in specific assemblies.
            <para/>
            No exceptions are caught during the loading of the assemblies. The caller is responsible for handling
            the exceptions correctly.
            </remarks>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Runtime.Serialization.RedirectDeserializationBinder"/> class.
            <para/>
            Creates a custom binder that redirects all the types to new types if required. All properties
            decorated with the <see cref="T:Catel.Runtime.Serialization.RedirectTypeAttribute"/> will be redirected.
            </summary>
            <param name="assemblies">Array of assembly locations that should be searched.</param>
            <remarks>
            This constructor searches for attributes in specific assemblies.
            </remarks>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.Initialize(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Initializes the binder by searching for all <see cref="T:Catel.Runtime.Serialization.RedirectTypeAttribute"/> in the
            assemblies passed to this method.
            </summary>
            <param name="assemblies">Array of assembly locations that should be searched.</param>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.InitializeAttributes(System.Object,Catel.Runtime.Serialization.RedirectTypeAttribute[])">
            <summary>
            Initializes the binder by searching for all <see cref="T:Catel.Runtime.Serialization.RedirectTypeAttribute"/> in the
            attributes passed to this method.
            </summary>
            <param name="decoratedObject">object that was decorated with the attribute.</param>
            <param name="attributes">Array of attributes to search for.</param>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.BindToType(System.String,System.String)">
            <summary>
            Binds an assembly and typename to a specific type.
            </summary>
            <param name="assemblyName">Original assembly name.</param>
            <param name="typeName">Original type name.</param>
            <returns><see cref="T:System.Type"/> that the serialization should actually use.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.LoadType(System.String)">
            <summary>
            Tries to load a type on a safe way.
            </summary>
            <param name="type">The type to load.</param>
            <returns>The type or <c>null</c> if this method fails.</returns>
            <remarks>
            In case this method fails to load the type, a warning will be traced with additional information.
            </remarks>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.SplitType(System.String,System.String@,System.String@)">
            <summary>
            Splits the type into a type name and assembly name.
            </summary>
            <param name="type">Type to split.</param>
            <param name="assemblyName">Assemby name.</param>
            <param name="typeName">Type name.</param>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.ConvertTypeToVersionIndependentType(System.String)">
            <summary>
            Converts a string representation of a type to a version independent type by removing the assembly version information.
            </summary>
            <param name="type">Type to convert.</param>
            <returns>String representing the type without version information.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.ConvertTypeToNewType(System.String)">
            <summary>
            Converts a string representation of a type to a redirected type.
            </summary>
            <param name="type">Type to convert.</param>
            <returns>String representing the type that represents the redirected type.</returns>
        </member>
        <member name="M:Catel.Runtime.Serialization.RedirectDeserializationBinder.GetInnerTypes(System.String)">
            <summary>
            Returns the inner type of a type, for example, a generic array type.
            </summary>
            <param name="type">Full type which might contain an inner type.</param>
            <returns>Array of inner types.</returns>
        </member>
        <member name="P:Catel.Runtime.Serialization.RedirectDeserializationBinder.MicrosoftPublicKeyTokens">
            <summary>
            Gets the Microsoft public key tokens.
            </summary>
            <value>The Microsoft public key tokens.</value>
        </member>
        <member name="T:Catel.Reflection.PropertyHelper">
            <summary>
            Property helper class.
            </summary>
        </member>
        <member name="F:Catel.Reflection.PropertyHelper.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Reflection.PropertyHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property value of a specific object.
            </summary>
            <param name="obj">The object.</param>
            <param name="property">The property.</param>
            <returns>
            The property value or <c>null</c> if no property can be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="obj"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Reflection.PropertyNotFoundException">when <paramref name="obj"/> is not found or not publicly available.</exception>
            <exception cref="T:Catel.Reflection.CannotGetPropertyValueException">when the property value cannot be read.</exception>
        </member>
        <member name="M:Catel.Reflection.PropertyHelper.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Gets the property value of a specific object.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="obj">The object.</param>
            <param name="property">The property.</param>
            <returns>
            The property value or <c>null</c> if no property can be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="obj"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Reflection.PropertyNotFoundException">when <paramref name="obj"/> is not found or not publicly available.</exception>
            <exception cref="T:Catel.Reflection.CannotGetPropertyValueException">when the property value cannot be read.</exception>
        </member>
        <member name="M:Catel.Reflection.PropertyHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the property value of a specific object.
            </summary>
            <param name="obj">The object.</param>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="obj"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.Reflection.PropertyNotFoundException">when <paramref name="obj"/> is not found or not publicly available.</exception>
            <exception cref="T:Catel.Reflection.CannotSetPropertyValueException">when the property value cannot be written.</exception>
        </member>
        <member name="T:Catel.MVVM.CommandExecutedEventArgs">
            <summary>
            <see cref="T:System.EventArgs"/> implementation for the event when an <see cref="T:Catel.MVVM.ICatelCommand"/> has been executed.
            </summary>
        </member>
        <member name="M:Catel.MVVM.CommandExecutedEventArgs.#ctor(Catel.MVVM.ICatelCommand,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.CommandExecutedEventArgs"/> class.
            </summary>
            <param name="command">The command that just has been executed.</param>
            <param name="commandParameter">The command parameter that was used for the execution.</param>
        </member>
        <member name="P:Catel.MVVM.CommandExecutedEventArgs.Command">
            <summary>
            Gets the command that just has been executed.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.MVVM.CommandExecutedEventArgs.CommandParameter">
            <summary>
            Gets the command parameter used for the execution.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="T:Catel.IO.Directory">
            <summary>
            Directory class.
            </summary>
        </member>
        <member name="M:Catel.IO.Directory.CreateDirectory(System.String)">
            <summary>
            Creates the specified directory.
            </summary>
            <param name="path">The path to create.</param>
        </member>
        <member name="M:Catel.IO.Directory.Exists(System.String)">
            <summary>
            Checks whether the specified directory exists.
            </summary>
            <param name="directory">The directory to check.</param>
            <returns><c>true</c> if the directory exists; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="directory"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.IO.Directory.Delete(System.String)">
            <summary>
            Deletes the specified directory.
            </summary>
            <param name="directory">The directory.</param>
            <returns><c>true</c> if the directory is deleted; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentException">when <paramref name="directory"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="T:Catel.Reflection.AssemblyExtensions">
            <summary>
            Assembly info helper class.
            </summary>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.Title(System.Reflection.Assembly)">
            <summary>
            Gets the title of a specific assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The title of the assembly.</returns>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.Version(System.Reflection.Assembly)">
            <summary>
            Gets the version of a specific assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The version of the assembly.</returns>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.Version(System.Reflection.Assembly,System.Int32)">
            <summary>
            Gets the version of a specific assembly with a separator count.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="separatorCount">Number that determines how many version numbers should be returned.</param>
            <returns>The version of the assembly.</returns>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.InformationalVersion(System.Reflection.Assembly)">
            <summary>
            Gets the informational version.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The informational version.</returns>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.Description(System.Reflection.Assembly)">
            <summary>
            Gets the description of a specific assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The description of the assembly.</returns>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.Product(System.Reflection.Assembly)">
            <summary>
            Gets the product of a specific assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The product of the assembly.</returns>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.Copyright(System.Reflection.Assembly)">
            <summary>
            Gets the copyright of a specific assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The copyright of the assembly.</returns>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.Company(System.Reflection.Assembly)">
            <summary>
            Gets the company of a specific assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The company of the assembly</returns>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.Path(System.Reflection.Assembly)">
            <summary>
            Gets the path of a specific assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The path of the assembly.</returns>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.GetAssemblyAttribute``1(System.Reflection.Assembly)">
            <summary>
            Gets the assembly attribute.
            </summary>
            <typeparam name="TAttibute">The type of the attibute.</typeparam>
            <param name="assembly">The assembly.</param>
            <returns>The attribute that the assembly is decorated with or <c>null</c> if the assembly is not decorated with the attribute.</returns>
        </member>
        <member name="M:Catel.Reflection.AssemblyExtensions.GetAssemblyAttributeValue(System.Reflection.Assembly,System.Type,System.String)">
            <summary>
            Gets the specific <see cref="T:System.Attribute"/> value of the attribute type in the specified assembly.
            </summary>
            <param name="assembly">Assembly to read the information from.</param>
            <param name="attribute">Attribute to read.</param>
            <param name="property">Property to read from the attribute.</param>
            <returns>Value of the attribute or empty if the attribute is not found.</returns>
        </member>
        <member name="T:Catel.Properties.Exceptions">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.ArgumentCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Argument cannot be null or empty.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.ArgumentMustBeOfType">
            <summary>
              Looks up a localized string similar to Argument must be of type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.BeginEditCannotBeInvokedTwice">
            <summary>
              Looks up a localized string similar to BeginEdit cannot be invoked twice. A call to BeginEdit must always be closed with a call to CancelEdit or EndEdit..
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.CannotCompareToObjectNotImplementingIDataObjectBase">
            <summary>
              Looks up a localized string similar to Cannot compare to other object because the other object does not implement IDataObjectBase.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.CannotGetPropertyValueException">
            <summary>
              Looks up a localized string similar to Cannot get the value of property &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.CannotSetPropertyValueException">
            <summary>
              Looks up a localized string similar to Cannot set the value of property &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.ErrorOpeningFileViaWin32">
            <summary>
              Looks up a localized string similar to Error opening file Win32. Error code {0}.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.FailedToCreateDirectory">
            <summary>
              Looks up a localized string similar to Failed to create directory &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.FileNotFound">
            <summary>
              Looks up a localized string similar to File not found.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.InvalidViewModel">
            <summary>
              Looks up a localized string similar to Invalid or no view model.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.ModelNotRegistered">
            <summary>
              Looks up a localized string similar to There is no model &apos;{0}&apos; registered with the model attribute, so the ViewModelToModel attribute on property &apos;{1}&apos; is invalid.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.NonSerializablePropertiesNotSupported">
            <summary>
              Looks up a localized string similar to Properties that are not serializable are not supported.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.NotSupportedInSilverlight">
            <summary>
              Looks up a localized string similar to Unfortunately, this is not supported in Silverlight.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.NotSupportedInWindowsPhone7">
            <summary>
              Looks up a localized string similar to Unfortunately, this is not supported in Windows Phone 7.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.ParameterMustBeAnInterface">
            <summary>
              Looks up a localized string similar to Parameter must be an interface.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.PropertyNotFound">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is not found.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.PropertyNotFoundInModel">
            <summary>
              Looks up a localized string similar to Mapped viewmodel property &apos;{0}&apos; to model property &apos;{1}&apos; is invalid because property &apos;{1}&apos; is not found on the model &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.ViewModelCanBeInitializedOnce">
            <summary>
              Looks up a localized string similar to View model can only be initialized once.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.ViewModelNotRegistered">
            <summary>
              Looks up a localized string similar to The view model of type &apos;{0}&apos; is not registered thus cannot be used in this context.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.WindowNotRegistered">
            <summary>
              Looks up a localized string similar to There is not window registered as &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Properties.Exceptions.WrongViewModelType">
            <summary>
              Looks up a localized string similar to The view model is of the wrong type. Expected &apos;{0}&apos;, but type is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IOpenFileService">
            <summary>
            Interface for the Open File service.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.MessageResult">
            <summary>
            Available message results.
            </summary>
            <remarks>
            Although directly extracted from the WPF <c>MessageBoxResult</c>, this enum provides more flexibility to use
            other ways to show messages to the user instead of the default <c>MessageBox</c>.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Services.MessageResult.None">
            <summary>
            No result available.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageResult.OK">
            <summary>
            Message is acknowledged.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageResult.Cancel">
            <summary>
            Message is canceled.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageResult.Yes">
            <summary>
            Message is acknowledged with yes.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageResult.No">
            <summary>
            Message is acknowledged with no.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.MessageButton">
            <summary>
            Available message buttons.
            </summary>
            <remarks>
            Although directly extracted from the WPF <c>MessageBoxButton</c>, this enum provides more flexibility to use
            other ways to show messages to the user instead of the default <c>MessageBox</c>.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Services.MessageButton.OK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageButton.OKCancel">
            <summary>
            OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageButton.YesNo">
            <summary>
            Yes and No buttons.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageButton.YesNoCancel">
            <summary>
            Yes, No and Cancel buttons.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.MessageImage">
            <summary>
            Available message images.
            </summary>
            <remarks>
            Although directly extracted from the WPF <c>MessageBoxImage</c>, this enum provides more flexibility to use
            other ways to show messages to the user instead of the default <c>MessageBox</c>.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.None">
            <summary>
            Show no image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Information">
            <summary>
            Information image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Question">
            <summary>
            Question image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Exclamation">
            <summary>
            Exclamation image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Error">
            <summary>
            Error image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Stop">
            <summary>
            Stop image.
            </summary>
        </member>
        <member name="F:Catel.MVVM.Services.MessageImage.Warning">
            <summary>
            Warning image.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.IMessageService">
            <summary>
            Interface for the message service.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowError(System.Exception)">
            <summary>
            Shows the error.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowError(System.String)">
            <summary>
            Shows the error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowError(System.String,System.String)">
            <summary>
            Shows the error.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowWarning(System.String)">
            <summary>
            Shows the warning.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowWarning(System.String,System.String)">
            <summary>
            Shows the warning.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowInformation(System.String)">
            <summary>
            Shows the information.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.ShowInformation(System.String,System.String)">
            <summary>
            Shows the information.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.Show(System.String)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.Show(System.String,System.String)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.IMessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon to show.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="T:Catel.Data.PropertyData">
            <summary>
            Object that contains all the property data that is used by the <see cref="T:Catel.Data.DataObjectBase`1"/> class.
            </summary>
        </member>
        <member name="F:Catel.Data.PropertyData._type">
            <summary>
            Type of the property.
            </summary>
        </member>
        <member name="M:Catel.Data.PropertyData.#ctor(System.String,System.Type,System.Object,System.Boolean,System.EventHandler{Catel.Data.PropertyChangedWithSenderEventArgs},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Data.PropertyData"/> class.
            </summary>
            <param name="name">Name of the property.</param>
            <param name="type">Type of the property.</param>
            <param name="defaultValue">Default value of the property.</param>
            <param name="setParent">if set to <c>true</c>, the parent of the property will be set.</param>
            <param name="propertyChangedEventHandler">The property changed event handler.</param>
            <param name="isSerializable">if set to <c>true</c>, the property is serializable.</param>
            <param name="includeInSerialization">if set to <c>true</c>, the property should be included in the serialization.</param>
            <param name="isDataObjectBaseProperty">if set to <c>true</c>, the property is declared by the <see cref="T:Catel.Data.DataObjectBase"/>.</param>
        </member>
        <member name="M:Catel.Data.PropertyData.GetDefaultValue">
            <summary>
            Returns the default value of the property.
            </summary>
            <returns>Default value of the property.</returns>
        </member>
        <member name="M:Catel.Data.PropertyData.GetDefaultValue``1">
            <summary>
            Returns the typed default value of the property.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <returns>Default value of the property.</returns>
        </member>
        <member name="P:Catel.Data.PropertyData.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Catel.Data.PropertyData.Type">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Catel.Data.PropertyData.DefaultValue">
            <summary>
            Gets or sets the default value of the property.
            </summary>
        </member>
        <member name="P:Catel.Data.PropertyData.SetParent">
            <summary>
            Gets a value indicating whether to set the parent after creating or deserializing the property.
            </summary>
            <value><c>true</c> if the parent of the should be set after creating or deserializing the property; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Data.PropertyData.PropertyChangedEventHandler">
            <summary>
            Gets a value indicating the property changed event handler.
            </summary>
            <value>The property changed event handler.</value>
        </member>
        <member name="P:Catel.Data.PropertyData.IsSerializable">
            <summary>
            Gets a value indicating whether this property is serializable.
            </summary>
            <value>
            	<c>true</c> if this property is serializable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.PropertyData.IncludeInSerialization">
            <summary>
            Gets a value indicating whether whether the property should be included in the serialization.
            </summary>
            <value>
            	<c>true</c> if the property should be included in the serialization; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Data.PropertyData.IsDataObjectBaseProperty">
            <summary>
            Gets a value indicating whether the property is declared by the <see cref="T:Catel.Data.DataObjectBase"/>.
            </summary>
            <value>
            	<c>true</c> if the property is declared by the <see cref="T:Catel.Data.DataObjectBase"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.TypeHelper">
            <summary>
            <see cref="T:System.Type"/> helper class.
            </summary>
        </member>
        <member name="F:Catel.TypeHelper.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.TypeHelper.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            Determines whether the subclass is of a raw generic type.
            </summary>
            <param name="generic">The generic.</param>
            <param name="toCheck">The type to check.</param>
            <returns>
            	<c>true</c> if the subclass is of a raw generic type; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="generic"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="toCheck"/> is <c>null</c>.</exception>
            <remarks>
            This implementation is based on this forum thread:
            http://stackoverflow.com/questions/457676/c-reflection-check-if-a-class-is-derived-from-a-generic-class
            </remarks>
        </member>
        <member name="M:Catel.TypeHelper.FormatType(System.String,System.String)">
            <summary>
            Formats a type in the official type description like [typename], [assemblyname].
            </summary>
            <param name="assembly">Assembly name to format.</param>
            <param name="type">Type name to format.</param>
            <returns>Type name like [typename], [assemblyname].</returns>
        </member>
        <member name="M:Catel.TypeHelper.FormatInnerTypes(System.String[])">
            <summary>
            Formats multiple inner types into one string.
            </summary>
            <param name="innerTypes">The inner types.</param>
            <returns>
            string representing a combination of all inner types.
            </returns>
        </member>
        <member name="M:Catel.TypeHelper.IsTypeNullable(System.Type)">
            <summary>
            Returns whether a type is nullable or not.
            </summary>
            <param name="type">Type to check.</param>
            <returns>
            True if the type is nullable, otherwise false.
            </returns>
        </member>
        <member name="M:Catel.TypeHelper.AreObjectsEqual(System.Object,System.Object)">
            <summary>
            Checks whether the 2 specified objects are equal. This method is better, simple because it also checks boxing so
            2 integers with the same values that are boxed are equal.
            </summary>
            <param name="object1">The first object.</param>
            <param name="object2">The second object.</param>
            <returns><c>true</c> if the objects are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.TypeHelper.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> for the specified property.
            </summary>
            <param name="type">The type that contains the properties.</param>
            <param name="property">The property name.</param>
            <returns>
            	<see cref="T:System.Reflection.PropertyInfo"/> or <c>null</c> if no property info is found.
            </returns>
        </member>
        <member name="F:Catel.TypeHelper.TypeSizes">
            <summary>
            Cache of type sizes.
            </summary>
        </member>
        <member name="M:Catel.TypeHelper.InitializeSizeHelper">
            <summary>
            Initializes the size helper.
            </summary>
            <returns>Dictionary containing the type and its size.</returns>
        </member>
        <member name="M:Catel.TypeHelper.SizeOf(System.Object)">
            <summary>
            Determine the size of any object.
            </summary>
            <param name="obj">The object you want to know the size of.</param>
            <returns>A size in bytes, or -1 if the request failed.</returns>
        </member>
        <member name="M:Catel.TypeHelper.ReflectiveSizeOf(System.Object)">
            <summary>
            Determines the reflective size of any object.
            </summary>
            <param name="obj">The object you want to know the size of.</param>
            <returns>A size in bytes, or -1 if the request failed.</returns>
        </member>
        <member name="M:Catel.TypeHelper.TryCast``2(``1,``0@)">
            <summary>
            Tries to Generic cast of a value.
            </summary>
            <typeparam name="TOutput">Requested return type.</typeparam>
            <typeparam name="TInput">The input type.</typeparam>
            <param name="value">The value to cast.</param>
            <param name="output">The casted value.</param>
            <returns>When a cast is succeded true else false.</returns>
        </member>
        <member name="M:Catel.TypeHelper.Cast``2(``1)">
            <summary>
            Generic cast of a value.
            </summary>
            <typeparam name="TOutput">Requested return type.</typeparam>
            <typeparam name="TInput">The input type.</typeparam>
            <param name="value">The value to cast.</param>
            <returns>The casted value.</returns>
        </member>
        <member name="M:Catel.TypeHelper.Cast``2(``1,``0)">
            <summary>
            Generic cast of a value.
            </summary>
            <typeparam name="TOutput">Requested return type.</typeparam>
            <typeparam name="TInput">The input type.</typeparam>
            <param name="value">The value to cast.</param>
            <param name="whenNullValue">When unable to cast the incoming value, this value is returned instead.</param>
            <returns>The casted value or when uncastable the <paramref name="whenNullValue" /> is returned.</returns>
        </member>
        <member name="M:Catel.TypeHelper.Cast``1(System.Object)">
            <summary>
            Generic cast of a value.
            </summary>
            <typeparam name="TOutput">Requested return type.</typeparam>
            <param name="input">The object to cast.</param>
            <returns>The casted value.</returns>
        </member>
        <member name="M:Catel.TypeHelper.Cast``1(System.Object,``0)">
            <summary>
            Generic cast of a value.
            </summary>
            <typeparam name="TOutput">Requested return type.</typeparam>
            <param name="input">The input.</param>
            <param name="whenNullValue">When unable to cast the incoming value, this value is returned instead.</param>
            <returns>
            The casted value or when uncastable the <paramref name="whenNullValue"/> is returned.
            </returns>
        </member>
        <member name="M:Catel.TypeHelper.PropertyGet``2(System.String,``1)">
            <summary>
            Gets a specific property from an object.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="property">The name of the property to get.</param>
            <param name="sourceObject">The source object.</param>
            <returns>The property.</returns>
        </member>
        <member name="M:Catel.TypeHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="instance">The instance.</param>
            <param name="propertyPath">The property path.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Catel.TypeHelper.GetField(System.Object,System.String)">
            <summary>
            This method gives you the ability to read values of private fields of an object.
            </summary>
            <param name="instance">The instance of the object of which you want to know the private value.</param>
            <param name="fieldName">The name of the field you want to know... when you want to know a field of an private object of an object you can use the common OO-notation.</param>
            <returns>
            The value of the object.
            <para />
            NOTE: When the Field is not found the object, an exception is thrown.
            </returns>
        </member>
        <member name="M:Catel.TypeHelper.GetField(System.Type,System.Object,System.String)">
            <summary>
            This method gives you the ability to read values of private fields of an object.
            </summary>
            <param name="typeInterface">The interface use want to use when interpeting the class</param>
            <param name="instance">The instance of the object of which you want to know the private value.</param>
            <param name="fieldName">The name of the field you want to know... when you want to know a field of an private object of an object you can use the common OO-notation.</param>
            <returns>
            The value of the object.
            <para />
            NOTE: When the Field is not found the object, an exception is thrown.
            </returns>
        </member>
        <member name="M:Catel.TypeHelper.GetMemberValue(System.Type,System.Object,System.String)">
            <summary>
            Gets the member info.
            </summary>
            <param name="typeInterface">The type interface.</param>
            <param name="instance">The instance.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>The value of the object.</returns>
        </member>
        <member name="M:Catel.TypeHelper.SetField(System.Object,System.String,System.Object)">
            <summary>
            This method gives you the ability to change values of private fields of an object.
            </summary>
            <param name="instance">The instance of the object of which you want to change a field-value.</param>
            <param name="fieldName">The field-name... when you want to know a field of an private object of an object you can use the common OO-notation.</param>
            <param name="value">The value you want to put in the field, WARNING this method does NOT check the types of the objects.</param>
        </member>
        <member name="M:Catel.TypeHelper.SetField(System.Type,System.Object,System.String,System.Object)">
            <summary>
            This method gives you the ability to change values of private fields of an object.
            </summary>
            <param name="typeInterface">The interface use want to use when interpeting the class</param>
            <param name="instance">The instance of the object of which you want to change a field-value.</param>
            <param name="fieldName">The field-name... when you want to know a field of an private object of an object you can use the common OO-notation.</param>
            <param name="value">The value you want to put in the field, WARNING this method does NOT check the types of the objects.</param>
        </member>
        <member name="M:Catel.TypeHelper.CombineHash(System.Int32[])">
            <summary>
            Combine multiple hashcodes in to one.
            </summary>
            <param name="hashes">An array of hashcodes.</param>
            <returns>An 'unique' hashcode.</returns>
            <remarks>
            Based on System.Web.UI.HashCodeCombiner (use Reflector).
            </remarks>
        </member>
        <member name="M:Catel.TypeHelper.ClearAllEvents(System.Object)">
            <summary>
            Clears all events.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Catel.TypeHelper.UnsubscribeAll(System.Object,System.Reflection.EventInfo)">
            <summary>
            Unsubscribes all.
            </summary>
            <param name="obj">The object.</param>
            <param name="ei">The event info.</param>
        </member>
        <member name="M:Catel.TypeHelper.ClearEvent(System.Object,System.Object)">
            <summary>
            Clears the event.
            </summary>
            <param name="instance">The object instance.</param>
            <param name="eventHandler">The event handler.</param>
        </member>
        <member name="T:Catel.TypeHelper.Parser">
            <summary>
            Helper class for converting Strings to GUIDs.
            </summary>
        </member>
        <member name="F:Catel.TypeHelper.Parser.PatternGuidTester">
            <summary>
            Pattern guid tester.
            </summary>
        </member>
        <member name="F:Catel.TypeHelper.Parser.RxGuidTester">
            <summary>
            The <see cref="T:System.Text.RegularExpressions.Regex"/> containing the guid tester.
            </summary>
        </member>
        <member name="M:Catel.TypeHelper.Parser.TryParseGuid(System.String,System.Guid@)">
            <summary>
            Tries to parse a string to a guid.
            </summary>
            <param name="input">The string version of the guid. Currently supported layouts dddddddd-dddd-dddd-dddd-dddddddddddd and dddddddddddddddddddddddddddddddd where d is a hexadecimal digit.</param>
            <param name="output">When the parse succeeds this is the guid else it is set to Guid.Empty.</param>
            <returns>False when the parse failed else true.</returns>
        </member>
        <member name="T:Catel.DoWorkDelegate">
            <summary>
            Delegate to execute the work by the <see cref="T:Catel.RetrySafetyCounter"/>.
            </summary>
            <returns><c>true</c> if successful; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Catel.IsWorkCompletedDelegate">
            <summary>
            Delegate to check whether work is completed by the <see cref="T:Catel.RetrySafetyCounter"/>.
            </summary>
            <returns><c>true</c> if the work is completed; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Catel.RetrySafetyCounter">
            <summary>
            Class to use when an action should be retried for a specific amount of time, and between the retries, the thread must
            sleep for a specific amount of time.
            </summary>
            <example>
            <code>
            int safetyCount = 25;
            bool isSucceeded = false;
            while ((isSucceeded != true) &amp;&amp; (safetyCount > 0))
            {
                if (PerformAction())
                {
                    isSucceeded = true;
                }
            
                safetyCount--;
            }
            </code>
            </example>
        </member>
        <member name="M:Catel.RetrySafetyCounter.#ctor(Catel.DoWorkDelegate,Catel.IsWorkCompletedDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.RetrySafetyCounter"/> class with a default of 25 retries and
            a sleep time of 50 milliseconds.
            </summary>
            <param name="doWorkDelegate">The delegate that actually executes the work that should be done.</param>
            <param name="isWorkCompletedDelegate">The delegate that checks whether the work is successful.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="doWorkDelegate"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="isWorkCompletedDelegate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.RetrySafetyCounter.#ctor(Catel.DoWorkDelegate,Catel.IsWorkCompletedDelegate,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.RetrySafetyCounter"/> class with a sleep time of 50 milliseconds.
            </summary>
            <param name="doWorkDelegate">The delegate that actually executes the work that should be done.</param>
            <param name="isWorkCompletedDelegate">The delegate that checks whether the work is successful.</param>
            <param name="maximumNumberOfRetries">The number of retries.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="doWorkDelegate"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="isWorkCompletedDelegate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.RetrySafetyCounter.#ctor(Catel.DoWorkDelegate,Catel.IsWorkCompletedDelegate,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.RetrySafetyCounter"/> class.
            </summary>
            <param name="doWorkDelegate">The delegate that actually executes the work that should be done.</param>
            <param name="isWorkCompletedDelegate">The delegate that checks whether the work is successful.</param>
            <param name="maximumNumberOfRetries">The number of retries.</param>
            <param name="millisecondsToSleep">The milliseconds to sleep.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="doWorkDelegate"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="isWorkCompletedDelegate"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.RetrySafetyCounter.DoWork">
            <summary>
            Executes the work that has to be performed in the while loop. If the <see cref="P:Catel.RetrySafetyCounter.DoWorkDelegate"/>
            returns <c>false</c> at any moment, the loop will be exited, even when number of retries left has not yet reached
            zero.
            </summary>
            <returns><c>true</c> if succeeded; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.RetrySafetyCounter.Reset">
            <summary>
            Resets the counter.
            </summary>
        </member>
        <member name="P:Catel.RetrySafetyCounter.DoWorkDelegate">
            <summary>
            Gets or sets the delegate that actually executes the work that should be done.
            </summary>
            <value>The delegate.</value>
        </member>
        <member name="P:Catel.RetrySafetyCounter.IsWorkCompletedDelegate">
            <summary>
            Gets or sets the delegate that checks whether the work is successful.
            </summary>
            <value>The delegate.</value>
        </member>
        <member name="P:Catel.RetrySafetyCounter.IsSuccessful">
            <summary>
            Gets a value indicating whether this <see cref="T:Catel.RetrySafetyCounter"/> is successful.
            </summary>
            <value><c>true</c> if successful; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.RetrySafetyCounter.MaximumNumberOfRetries">
            <summary>
            Gets or sets the maximum number of retries.
            </summary>
            <value>The maximum number of retries.</value>
        </member>
        <member name="P:Catel.RetrySafetyCounter.NumberOfRetries">
            <summary>
            Gets the number of retries.
            </summary>
            <value>The number of retries.</value>
        </member>
        <member name="P:Catel.RetrySafetyCounter.NumberOfRetriesLeft">
            <summary>
            Gets the number of retries left.
            </summary>
            <value>The number of retries left.</value>
        </member>
        <member name="P:Catel.RetrySafetyCounter.MillisecondsToSleep">
            <summary>
            Gets or sets the milliseconds to sleep.
            </summary>
            <value>The milliseconds to sleep.</value>
        </member>
        <member name="T:log4net.Appender.TraceAppenderEx">
            <summary>
            Appends log events to the <see cref="T:System.Diagnostics.Trace"/> system.
            </summary>
            <remarks>
            <para>
            The application configuration file can be used to control what listeners 
            are actually used. See the MSDN documentation for the 
            <see cref="T:System.Diagnostics.Trace"/> class for details on configuring the
            trace system.
            </para>
            <para>
            Events are written using the <c>System.Diagnostics.Trace.Write(string,string)</c>
            method. The event's logger name is the default value for the category parameter 
            of the Write method. 
            </para>
            <para>
            <b>Compact Framework</b><br/>
            The Compact Framework does not support the <see cref="T:System.Diagnostics.Trace"/>
            class for any operation except <c>Assert</c>. When using the Compact Framework this
            appender will write to the <see cref="T:System.Diagnostics.Debug"/> system rather than
            the Trace system. This appender will therefore behave like the <see cref="T:log4net.Appender.DebugAppender"/>.
            </para>
            </remarks>
            <author>Douglas de la Torre</author>
            <author>Nicko Cadell</author>
            <author>Gert Driesen</author>
            <author>Ron Grabowski</author>
            <author>Geert van Horrik (created the extended version)</author>
        </member>
        <member name="M:log4net.Appender.TraceAppenderEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TraceAppenderEx"/> class.
            </summary>
            <remarks>Empty default constructor</remarks>
        </member>
        <member name="M:log4net.Appender.TraceAppenderEx.#ctor(log4net.Layout.ILayout)">
            <summary>
            Initializes a new instance of the <see cref="T:log4net.Appender.TraceAppenderEx"/> class
            with a specified layout.
            </summary>
            <param name="layout">The layout to use with this appender.</param>
            <remarks>
            <para>
            Obsolete constructor.
            </para>
            </remarks>
        </member>
        <member name="M:log4net.Appender.TraceAppenderEx.Append(log4net.Core.LoggingEvent)">
            <summary>
            Writes the logging event to the <see cref="T:System.Diagnostics.Trace"/> system.
            </summary>
            <param name="loggingEvent">The event to log.</param>
            <remarks>
            <para>
            Writes the logging event to the <see cref="T:System.Diagnostics.Trace"/> system.
            </para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TraceAppenderEx._immediateFlush">
            <summary>
            Immediate flush means that the underlying writer or output stream
            will be flushed at the end of each append operation.
            </summary>
            <remarks>
            <para>
            Immediate flush is slower but ensures that each append request is 
            actually written. If <see cref="P:log4net.Appender.TraceAppenderEx.ImmediateFlush"/> is set to
            <c>false</c>, then there is a good chance that the last few
            logs events are not actually written to persistent media if and
            when the application crashes.
            </para>
            <para>
            The default value is <c>true</c>.</para>
            </remarks>
        </member>
        <member name="F:log4net.Appender.TraceAppenderEx._category">
            <summary>
            Defaults to %logger
            </summary>
        </member>
        <member name="P:log4net.Appender.TraceAppenderEx.ImmediateFlush">
            <summary>
            Gets or sets a value indicating whether the appender will 
            flush at the end of each write.
            </summary>
            <remarks>
            <para>The default behavior is to flush at the end of each 
            write. If the option is set to<c>false</c>, then the underlying 
            stream can defer writing to physical medium to a later time. 
            </para>
            <para>
            Avoiding the flush operation at the end of each append results 
            in a performance gain of 10 to 20 percent. However, there is safety
            trade-off involved in skipping flushing. Indeed, when flushing is
            skipped, then it is likely that the last few log events will not
            be recorded on disk when the application exits. This is a high
            price to pay even for a 20% performance gain.
            </para>
            </remarks>
        </member>
        <member name="P:log4net.Appender.TraceAppenderEx.Category">
            <summary>
            Gets or sets the category parameter sent to the Trace method.
            </summary>
            <remarks>
            <para>
            Defaults to %logger which will use the logger name of the current 
            <see cref="T:log4net.Core.LoggingEvent"/> as the category parameter.
            </para>
            <para>
            </para> 
            </remarks>
        </member>
        <member name="P:log4net.Appender.TraceAppenderEx.RequiresLayout">
            <summary>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </summary>
            <value><c>true</c> if the appender requires layout to be set; otherwise <c>false</c>.</value>
            <remarks>
            <para>
            This appender requires a <see cref="N:log4net.Layout"/> to be set.
            </para>
            </remarks>
        </member>
    </members>
</doc>
