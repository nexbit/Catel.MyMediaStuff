<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Catel.Windows</name>
    </assembly>
    <members>
        <member name="T:Catel.Windows.Media.Imaging.ImagingExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.ConvertBitmapToBitmapSource(System.Drawing.Bitmap)">
            <summary>
            Converts a <see cref="T:System.Drawing.Bitmap"/> to a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> object.
            </summary>
            <param name="bitmap"><see cref="T:System.Drawing.Bitmap"/> to convert.</param>
            <returns><see cref="T:System.Windows.Media.Imaging.BitmapSource"/> or null if an error occurs.</returns>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.Resize(System.Windows.Media.Imaging.BitmapImage,System.Int32,System.Int32)">
            <summary>
            Resizes the specified bitmap. It resizes the bitmap, but keeps the scale.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="maxWidth">Width of the max.</param>
            <param name="maxHeight">Height of the max.</param>
            <returns>
            	<see cref="T:System.Windows.Media.Imaging.BitmapImage"/> with the right size.
            </returns>
            <remarks>If the original image is 1000x100 px and you specify a new dimension of 100x100 px the resized image is 100x10px</remarks>
            <exception cref="T:System.ArgumentNullException">when <paramref name="bitmap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.ConvertToImage(System.Windows.Media.Imaging.BitmapImage)">
            <summary>
            Converts to image.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="bitmap"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Media.Imaging.ImagingExtensions.ConvertToBitmapImage(System.Drawing.Image)">
            <summary>
            Converts to bitmap image.
            </summary>
            <param name="image">The image.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="image"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.Input.DataCommands">
            <summary>
            Data commands class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Input.DataCommands.#cctor">
            <summary>
            Constructor that initializes the commands.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.DataCommands.Add">
            <summary>
            Start adding a new item or reference.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.DataCommands.AddAll">
            <summary>
            Start adding a new item or reference.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.DataCommands.Remove">
            <summary>
            Remove a item or reference.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.DataCommands.RemoveAll">
            <summary>
            Edit a item or change reference.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.DataCommands.Edit">
            <summary>
            Edit a item or change reference.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.DataCommands.Sort">
            <summary>
            Sort.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.DataCommands.Synchronize">
            <summary>
            Synchronize data.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.DataCommands.Revert">
            <summary>
            Revert data.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.DataCommands.Submit">
            <summary>
            Submit.
            </summary>
        </member>
        <member name="T:Catel.Windows.Windows.ValidationHelper">
            <summary>
            Validation helper class.
            </summary>
            <remarks>
            This code is based on the code that can be found at:
            http://www.primordialcode.com/index.php/2009/08/19/wpf-force-validation-rules-attached-object-executed/.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Windows.ValidationHelper.GetDependencyProperties(System.Type)">
            <summary>
            Gets the dependency properties of a specific type.
            </summary>
            <param name="type">The type.</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/> containing all the found dependency properties.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="type"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Windows.ValidationHelper.UpdateBindingsValidation(System.Windows.DependencyObject)">
            <summary>
            Updates the bindings validation. Sometimes, WPF doesn't show the validation red border
            when validation occurs too soon. This method will force all bound properties to revalidate.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="dependencyObject"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.DependencyObjectExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.DependencyObject"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetAncestorObject``1(System.Windows.DependencyObject)">
            <summary>
            Returns the ancestory object of a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <typeparam name="T">Ancestor object.</typeparam>
            <param name="visualObject">Visual object to get the ancestor object for.</param>
            <returns><see cref="T:System.Windows.DependencyObject"/> or null if no ancestor object is found.</returns>
            <remarks>
            	If visualObject was of type T it was returned as ancestor, this is changed.
            	GetAncestorObject wil not return supplied parameter anymore.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalOrVisualAncestor(System.Windows.DependencyObject,System.Predicate{System.Object})">
            <summary>
            Finds the logical or visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalOrVisualAncestor(System.Windows.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the logical or visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalAncestor(System.Windows.DependencyObject,System.Predicate{System.Object})">
            <summary>
            Finds the logical ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalAncestor(System.Windows.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the logical ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalAncestorByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the logical ancestor by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindLogicalRoot(System.Windows.DependencyObject)">
            <summary>
            Finds the logical root.
            </summary>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualAncestor(System.Windows.DependencyObject,System.Predicate{System.Object})">
            <summary>
            Finds the visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualAncestor(System.Windows.DependencyObject,System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds the visual ancestor according to the predicate.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualAncestorByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the visual ancestor by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualDescendant(System.Windows.DependencyObject,System.Predicate{System.Object})">
            <summary>
            Finds the visual descendant.
            </summary>
            <param name="startElement">The start element.</param>
            <param name="condition">The condition.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualDescendantByType``1(System.Windows.DependencyObject)">
            <summary>
            Finds the visual descendant by type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.FindVisualRoot(System.Windows.DependencyObject)">
            <summary>
            Finds the visual root.
            </summary>
            <param name="startElement">The start element.</param>
            <returns>object or <c>null</c> if the ancestor is not found.</returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Gets the visual children.
            </summary>
            <param name="parent">The parent.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.IEnumerable`1"/> of all children.
            </returns>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.UpdateAllBindings(System.Windows.DependencyObject)">
            <summary>
            Updates all the bindings of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.UpdateAllBindings(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Updates all the bindings of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="recursive">if set to <c>true</c>, the bindings will be updated recursively using the <see cref="T:System.Windows.Media.VisualTreeHelper"/>.</param>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetBindingExpressions(System.Windows.DependencyObject)">
            <summary>
            Gets all the binding expressions of the specified <paramref name="element"/> in a non-recursive way.
            </summary>
            <param name="element">The element.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all bindings.</returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetBindingExpressions(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets all the binding expressions of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <param name="recursive">if set to <c>true</c>, the bindings will be searched recursively using the <see cref="T:System.Windows.Media.VisualTreeHelper"/>.</param>
            <returns>
            	<see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all bindings.
            </returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetDependencyProperties(System.Windows.DependencyObject)">
            <summary>
            Gets the dependency properties of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all dependency properties.</returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DependencyObjectExtensions.GetAttachedProperties(System.Windows.DependencyObject)">
            <summary>
            Gets the attached properties of the specified <paramref name="element"/>.
            </summary>
            <param name="element">The element.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all attached properties.</returns>
            <remarks>
            This code is originally found at http://stackoverflow.com/questions/3586870/retrieve-all-data-bindings-from-wpf-window.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ConverterHelper">
            <summary>
            Converter helper class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.ConverterHelper.DoNothingBindingValue">
            <summary>
            The generic <c>DoNothing</c> value, compatible with WPF and Silverlight.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.GetFirstValidationErrorConverter">
            <summary>
            Converts a collection containing <see cref="T:System.Windows.Controls.ValidationError"/> objects to return the first error
            or an empty string in case there are no errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.GetFirstValidationErrorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a collection containing <see cref="T:System.Windows.Controls.ValidationError"/> objects to return the first error
            or an empty string in case there are no errors.
            </summary>
            <param name="value">Values to check for. Both collections and arrays are supported.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>String containing the first error or <see cref="F:System.String.Empty"/> in case there are not errors.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.GetFirstValidationErrorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method isn't supported.
            </summary>
            <param name="value">Not used.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>Always null.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ContainsItemsConverter">
            <summary>
            Converter that converts whether a collection contains items or not.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ContainsItemsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the count of a collection to true or false, depending on whether the collection contains items.
            </summary>
            <param name="value">Values to check for. Both collections and arrays are supported.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>True when at least 1 item is inside the collection or array, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ContainsItemsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <remarks>
            This method is not supported.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.AreEqualMultiValueConverter">
            <summary>
            Converts a comparison of 2 bindings to a boolean whether the 
            objects are equal or not.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.AreEqualMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the comparison of 2 values to a boolean.
            </summary>
            <param name="values">Values to convert. Only 2 values are supported.</param>
            <param name="targetType">Not supported.</param>
            <param name="parameter">Not supported.</param>
            <param name="culture">Not supported.</param>
            <returns>True if the values are equal, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.AreEqualMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not supported.
            </summary>
            <param name="value">Not supported.</param>
            <param name="targetTypes">Not supported.</param>
            <param name="parameter">Not supported.</param>
            <param name="culture">Not supported.</param>
            <returns>Not supported.</returns>
        </member>
        <member name="T:Catel.Windows.Data.BindingEvaluator">
            <summary>
            Class to help evaluate bindings at runtime.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.BindingEvaluator.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.BindingEvaluator"/> class.
            </summary>
            <param name="dataContext">The data context.</param>
        </member>
        <member name="M:Catel.Windows.Data.BindingEvaluator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.BindingEvaluator"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Data.BindingEvaluator.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationType">
            <summary>
            Business validation type.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationType.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationType.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationEventAction">
            <summary>
            Validation event action.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Added">
            <summary>
            Added.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.Removed">
            <summary>
            Removed.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ValidationEventAction.ClearAll">
            <summary>
            All validation info of the specified object should be cleared.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.WarningAndErrorValidator">
            <summary>
            Control for adding business rule validation to the form. Assign a value or binding to source for the business object or 
            collection of bussiness objects to validate.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.WarningAndErrorValidator._objectValidation">
            <summary>
            List of objects that are currently being validated. 
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.WarningAndErrorValidator.SourceProperty">
            <summary>
            DependencyProperty definition as the backing store for Source.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.Initialize">
            <summary>
            Initializes this instance. Loads all the errors and warnings that were added when the control was not yet loaded.s
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CleanUp">
            <summary>
            Cleans up.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.UpdateSource(System.Object,System.Object)">
            <summary>
            Updates the source.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.AddObjectsToWatchList(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Adds an <see cref="T:System.Collections.IEnumerable"/> of objects to the watch list.
            </summary>
            <param name="values">The values to add to the watch list.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.AddObjectToWatchList(System.Object)">
            <summary>
            Adds the object to the watch list.
            </summary>
            <param name="value">The object to add to the watch list.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.AddObjectToWatchList(System.Object,System.Collections.IEnumerable)">
            <summary>
            Adds the object to the watch list.
            </summary>
            <param name="value">The object to add to the watch list.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RemoveObjectsFromWatchList(System.Collections.IEnumerable)">
            <summary>
            Removes an <see cref="T:System.Collections.IEnumerable"/> of objects from the watch list.
            </summary>
            <param name="values">The values to remove from the watch list.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RemoveObjectFromWatchList(System.Object)">
            <summary>
            Removes the object from watch list.
            </summary>
            <param name="value">The object to remove from the watch list.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckObjectValidation(System.Object,System.String,System.Collections.IEnumerable)">
            <summary>
            Checks a entity that either implements the <see cref="T:Catel.ComponentModel.IDataWarningInfo"/> or <see cref="T:System.ComponentModel.IDataErrorInfo"/> on warnings and errors.
            </summary>
            <param name="value">The object to check.</param>
            <param name="propertyChanged">The propery that has been changed. <c>null</c> if no specific property has changed.</param>
            <param name="parentEnumerable">The parent enumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
            <remarks>
            Internally calls the generic method with the same name.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckObjectValidationForFields(System.Object,System.String,System.Collections.ObjectModel.ObservableCollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Checks the object validation for fields warnings or errors.
            </summary>
            <param name="value">The value.</param>
            <param name="propertyChanged">The property changed.</param>
            <param name="infoList">The info list containing the warning or error info.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.CheckFieldWarningsOrErrors(System.Object,System.String,Catel.Windows.Controls.ValidationType)">
            <summary>
            Checks the field warnings or errors.
            </summary>
            <param name="value">The value.</param>
            <param name="propertyChanged">The property changed.</param>
            <param name="validationType">Type of the validation.</param>
            <returns>
            List of warnings or errors returned by the object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.GetWarningOrError(System.Object,Catel.Windows.Controls.ValidationType)">
            <summary>
            Gets the warning or error message for the object.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>
            Warning or error message formatted for the object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferences(System.Object,Catel.Windows.Controls.ValidationData,Catel.Windows.Controls.ValidationData)">
            <summary>
            Raises the events for differences.
            </summary>
            <param name="value">The value.</param>
            <param name="oldValidationData">The old validation data.</param>
            <param name="newValidationData">The new validation data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferencesInFields(System.Object,System.Collections.Generic.ICollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},System.Collections.Generic.ICollection{Catel.Windows.Controls.FieldWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises the events for differences in fields.
            </summary>
            <param name="value">The value.</param>
            <param name="oldFieldData">The old field data.</param>
            <param name="newFieldData">The new field data.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseEventsForDifferencesInBusiness(System.Object,System.Collections.Generic.ICollection{Catel.Windows.Controls.BusinessWarningOrErrorInfo},System.Collections.Generic.ICollection{Catel.Windows.Controls.BusinessWarningOrErrorInfo},Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises the events for differences in business.
            </summary>
            <param name="value">The value.</param>
            <param name="oldBusinessData">The old business data.</param>
            <param name="newBusinessData">The new business data.</param>
            <param name="validationType">Type of the validation.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.RaiseBusinessValidationWarningOrError(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Raises an validation warning or error event.
            </summary>
            <param name="value">The value.</param>
            <param name="message">A message.</param>
            <param name="action">A action for handling the error event.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.iNotifyPropertyChanged_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handling changes of properties within entity.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Catel.Windows.Controls.WarningAndErrorValidator.iNotifyCollectionChanged_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handling change of collection updating connections and error messages.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">Event args.</param>
        </member>
        <member name="P:Catel.Windows.Controls.WarningAndErrorValidator.Source">
            <summary>
            Source for validation. This can be an business object which implements <see cref="T:System.ComponentModel.IDataErrorInfo"/> 
            and <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> or an <see cref="T:System.Collections.IEnumerable"/> containing bussiness objects.
            In case of a <see cref="T:System.Collections.IEnumerable"/> then the content should be static or the interface <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <remarks>
            Wrapper for the Source dependency property.
            </remarks>
        </member>
        <member name="E:Catel.Windows.Controls.WarningAndErrorValidator.Validation">
            <summary>
            Occurs when validation is triggered.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationData">
            <summary>
            Class containing all validation info (thus warnings and errors) about a specific object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ValidationData"/> class.
            </summary>
            <param name="parentEnumerable">The parent ParentEnumerable. <c>Null</c> if the object does not belong to an enumerable.</param>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.ClearWarningsAndErrors">
            <summary>
            Clears the warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.ParentEnumerable">
            <summary>
            Gets or sets the parent enumerable.
            </summary>
            <value>The parent enumerable.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.FieldWarnings">
            <summary>
            Gets the field warnings.
            </summary>
            <value>The field warnings.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.BusinessWarnings">
            <summary>
            Gets the business warnings.
            </summary>
            <value>The business warnings.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.FieldErrors">
            <summary>
            Gets the field errors.
            </summary>
            <value>The field errors.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationData.BusinessErrors">
            <summary>
            Gets the business errors.
            </summary>
            <value>The business errors.</value>
        </member>
        <member name="T:Catel.Windows.Controls.BusinessWarningOrErrorInfo">
            <summary>
            Information class about business warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.BusinessWarningOrErrorInfo"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningOrErrorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.BusinessWarningOrErrorInfo.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Catel.Windows.Controls.FieldWarningOrErrorInfo">
            <summary>
            Information class about field warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.FieldWarningOrErrorInfo"/> class.
            </summary>
            <param name="field">The field.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Catel.Windows.Controls.FieldWarningOrErrorInfo.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.FieldWarningOrErrorInfo.Field">
            <summary>
            Gets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Catel.Windows.Controls.FieldWarningOrErrorInfo.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="T:Catel.Windows.Controls.BusinessWarningValidationRule">
            <summary>
            Validation rule class for handling bussiness warning validation.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessWarningValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, performs validation checks on a value.
            </summary>
            <param name="value">The value from the binding target to check.</param>
            <param name="cultureInfo">The culture to use in this rule.</param>
            <returns>
            A <see cref="T:System.Windows.Controls.ValidationResult"/> object.
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.BusinessErrorValidationRule">
            <summary>
            Validation rule class for handling bussiness error validation.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.BusinessErrorValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, performs validation checks on a value.
            </summary>
            <param name="value">The value from the binding target to check.</param>
            <param name="cultureInfo">The culture to use in this rule.</param>
            <returns>
            A <see cref="T:System.Windows.Controls.ValidationResult"/> object.
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.ValidationEventArgs">
            <summary>
            Event arguments for event <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> Validation.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ValidationEventArgs.#ctor(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ValidationEventArgs"/> class.
            </summary>
            <param name="value">The value that contains the warning or error.</param>
            <param name="message">The actual warning or error message.</param>
            <param name="action">The action of the validation event.</param>
            <param name="type">The type of validation.</param>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Value">
            <summary>
            Gets the value that contains the warning or error.
            </summary>
            <value>The value that contains the warning or error.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Message">
            <summary>
            Gets the actual warning or error message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Action">
            <summary>
            A action for handling event.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.ValidationEventArgs.Type">
            <summary>
            Gets the type of the validation.
            </summary>
            <value>The type of the validation.</value>
        </member>
        <member name="T:Catel.Windows.Input.TipOfTheDayCommands">
            <summary>
            Tip of the day commands class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Input.TipOfTheDayCommands.#cctor">
            <summary>
            Initializes the static members of the <see cref="T:Catel.Windows.Input.TipOfTheDayCommands"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.TipOfTheDayCommands.ShowNextTip">
            <summary>
            Show next tip.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.TipOfTheDayCommands.LaunchTipEditor">
            <summary>
            Launch text editor.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.TipOfTheDayCommands.Preview">
            <summary>
            Preview.
            </summary>
        </member>
        <member name="T:Catel.Windows.Media.Effects.ShaderEffectBase">
            <summary>
            Base class for shader effects in Catel.
            </summary>
        </member>
        <member name="F:Catel.Windows.Media.Effects.ShaderEffectBase.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Windows.Media.Effects.ShaderEffectBase"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.ShaderEffect"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Media.Effects.ShaderEffectBase.InputProperty">
            <summary>
            Property definition for <see cref="P:Catel.Windows.Media.Effects.ShaderEffectBase.Input"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.InitializePixelShader">
            <summary>
            Initializes the pixel shader.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.CreatePixelShader">
            <summary>
            Creates the pixel shader.
            </summary>
            <returns><see cref="T:System.Windows.Media.Effects.PixelShader"/>.</returns>
        </member>
        <member name="M:Catel.Windows.Media.Effects.ShaderEffectBase.OnPixelShaderInvalidPixelShaderEncountered(System.Object,System.EventArgs)">
            <summary>
            Handles the InvalidPixelShaderEncountered event of the PixelShader control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>
            This is added to prevent a real crash on the app because of an invalid pixel shader.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Media.Effects.ShaderEffectBase.IsEnabled">
            <summary>
            Gets a value indicating whether this shader effect is enabled.
            </summary>
            <value>
            	<c>true</c> if this shader effect is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Media.Effects.ShaderEffectBase.Input">
            <summary>
            Gets or sets the input brush.
            </summary>
            <value>The input.</value>
        </member>
        <member name="T:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping">
            <summary>
            Rappresenta la mappatura tra namespace XML e namespace CLR con relativo assembly
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.XmlNamespace">
            <summary>
            Restituisce o imposta il namespace XML
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.AssemblyId">
            <summary>
            Restituisce l'id dell'assembly
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.ClrNamespace">
            <summary>
            Restituisce il namespace clr
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlPIMapping.Presentation">
            <summary>
            Restituisce il mapping di default di WPF
            </summary>
        </member>
        <member name="T:Catel.Windows.UIElementExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.UIElement"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.GetFocusedControl(System.Windows.UIElement)">
            <summary>
            Gets the focused control.
            </summary>
            <param name="element">The element to check and all childs.</param>
            <returns>The focused <see cref="T:System.Windows.UIElement"/> or <c>null</c> if none if the children has the focus.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.IInputElement)">
            <summary>
            Focuses the first control on the ContentElement. Also focuses the parents first.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.IInputElement"/>.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.ContentElement)">
            <summary>
            Focuses the first control on the ContentElement. Also focuses the parents first.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.ContentElement"/>.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.UIElement)">
            <summary>
            Focuses the first control on the UI Element. Also focuses the parents first.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.UIElement"/>.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.IInputElement,System.Boolean)">
            <summary>
            Focuses the first control on the ContentElement.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.IInputElement"/>.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.ContentElement,System.Boolean)">
            <summary>
            Focuses the first control on the ContentElement.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.ContentElement"/>.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Windows.UIElement,System.Boolean)">
            <summary>
            Focuses the first control on the UI Element.
            </summary>
            <param name="element">Reference to the current <see cref="T:System.Windows.UIElement"/>.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusFirstControl(System.Object,System.Boolean)">
            <summary>
            Focuses the first control on the UI Element.
            </summary>
            <param name="element">Reference to the current element.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.FocusNextControl(System.Object,System.Boolean)">
            <summary>
            Focuses the next control on the UI Element.
            </summary>
            <param name="element">Element to focus the next control of.</param>
            <param name="focusParentsFirst">if set to <c>true</c>, the parents are focused first.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Windows.IInputElement,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Windows.UIElement,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Windows.ContentElement,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.MoveFocus(System.Object,System.Windows.Input.FocusNavigationDirection,System.Int32)">
            <summary>
            Moves the focus in a specific direction.
            </summary>
            <param name="element">The element.</param>
            <param name="direction">The direction.</param>
            <param name="hops">The hops.</param>
        </member>
        <member name="M:Catel.Windows.UIElementExtensions.InvalidateRect(System.Windows.UIElement)">
            <summary>
            Invalidates the rect as it is possible in win32.
            </summary>
            <param name="element">The element.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="element"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ShortDateFormattingConverter">
            <summary>
            ShortDateFormattingConverter
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.FormattingConverter">
            <summary>
            Converter for formatting short date values.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.FormattingConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.FormattingConverter"/> class.
            </summary>
            <param name="defaultFormatString">A default format string.</param>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to formatted string.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Format string.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.FormattingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
            <remarks>We don't intend this to ever be called.</remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ShortDateFormattingConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ShortDateFormattingConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ShortDateFormattingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type.</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
            <remarks>We don't intend this to ever be called.</remarks>
        </member>
        <member name="T:Catel.Windows.Controls.RadioButtonEx">
            <summary>
            A radio button that solves the 2-way binding issue of the <c>RadioButton.IsChecked</c> property in WPF 3.5.
            <para/>
            To solve the issue, use this <see cref="T:System.Windows.Controls.RadioButton"/> implementation and bind to the <see cref="P:Catel.Windows.Controls.RadioButtonEx.IsCheckedReal"/> instead of
            <c>RadioButton.IsChecked</c>.
            <para/>
            For more information about the issue, see this forum thread:
            http://social.msdn.microsoft.com/forums/en-US/wpf/thread/8eb8280a-19c4-4502-8260-f74633a9e2f2/
            </summary>
            <remarks>
            This code is originally found at http://pstaev.blogspot.com/2008/10/binding-ischecked-property-of.html.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.RadioButtonEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.RadioButtonEx"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RadioButtonEx.IsCheckedRealProperty">
            <summary>
            DependencyProperty definition as the backing store for IsCheckedReal.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RadioButtonEx.OnIsCheckedRealChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.RadioButtonEx.IsCheckedReal"/> property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RadioButtonEx.RadioButtonExtended_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Unchecked event of the RadioButtonExtended control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.RadioButtonEx.RadioButtonExtended_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Checked event of the RadioButtonExtended control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Controls.RadioButtonEx.IsCheckedReal">
            <summary>
            Gets or sets IsCheckedReal.
            </summary>
            <remarks>
            Wrapper for the IsCheckedReal dependency property.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Services.UIVisualizerService">
            <summary>
            Service to show modal or non-modal popup windows.
            
            This implementation of the <see cref="T:Catel.MVVM.Services.IUIVisualizerService"/> automatically adds all instances of the
            <see cref="T:Catel.Windows.DataWindow`1"/> class that are found in the current application domain.
            
            All other windows will have to be registered manually.
            </summary>
            <remarks>
            This implementation is based on the implementation that can be found in Cinch 
            (see http://www.codeproject.com/KB/WPF/CinchIII.aspx#PopServ). 
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.UIVisualizerService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="name">Name of the registered window.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered window.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Show(Catel.MVVM.IViewModel)">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.ViewModelNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.Type,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Show(System.String,System.Object)">
            <summary>
            Shows a window that is registered with the specified name in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Show(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.ViewModelNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.Type,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel)">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ShowDialog(System.String,System.Object)">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.CreateWindow(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs},System.Boolean)">
            <summary>
            This creates the WPF window from a key.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data that will be set as data context.</param>
            <param name="completedProc">Callback</param>
            <param name="isModal">True if this is a ShowDialog request</param>
            <returns>The created window.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.UIVisualizerService.RegisterTypesAutomatically">
            <summary>
            Registers the types automatically.
            </summary>
        </member>
        <member name="T:Catel.Windows.Media.VisualExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.Media.Visual"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.VisualExtensions.GetParentWindow(System.Windows.Media.Visual)">
            <summary>
            Get the parent window for this visual object or null when not exists.
            </summary>
            <param name="visualObject">Reference to visual object.</param>
            <returns>Reference to partent window or null when not exists.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.IsSelectedConverter">
            <summary>
            Converts a selected value to either true of false.
            </summary>
            <remarks>
            This converter is very usefull when a mutual exclusive selection must be made
            Original code found at http://geekswithblogs.net/claraoscura/archive/2008/10/17/125901.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.TraceOutputControl">
            <summary>
            Interaction logic for TraceOutputControl.xaml
            </summary>
            <summary>
            TraceOutputControl
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.TraceOutputControl"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.TraceOutputControl.TraceLevelOutputProperty">
            <summary>
            DependencyProperty definition as the backing store for TraceLevelOutput.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.Clear_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the Clear command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.Clear_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the Clear command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.CopyToClipboard_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the CopyToClipboard command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.CopyToClipboard_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the CopyToClipboard command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.TraceLevelOutput_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the TraceLevelOutput dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.traceListener_WrittenLine(System.String,System.Diagnostics.TraceEventType)">
            <summary>
            Invoked when the WrittenLine event of the TraceListener is raised.
            </summary>
            <param name="message">The message.</param>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.OnTraceLevelOutputPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:TraceLevelOutputPropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.ClearData">
            <summary>
            Clears the output window.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.WriteLine(System.String,System.Diagnostics.TraceEventType)">
            <summary>
            Writes a line to the output window.
            </summary>
            <param name="message">Message to write.</param>
            <param name="eventType">Type of the event.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.ScrollToBottom">
            <summary>
            Moves the cursor down so the latest output is visible.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.TraceEntriesToString(System.Collections.Generic.IEnumerable{Catel.Windows.Controls.TraceOutputControl.TraceEntry})">
            <summary>
            Converts a list of trace entries to a string.
            </summary>
            <param name="entries">The entries.</param>
            <returns>STring representing the trace entries.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.TraceEntryCollection">
            <summary>
            Gets or sets the trace entry collection.
            </summary>
            <value>The trace entry collection.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.FilteredTraceEntryCollection">
            <summary>
            Gets or sets the filtered trace entry collection.
            </summary>
            <value>The filtered trace entry collection.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.TraceListener">
            <summary>
            Gets or sets the trace listener.
            </summary>
            <value>The trace listener.</value>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.TraceLevelOutput">
            <summary>
            Gets or sets TraceLevelOutput.
            </summary>
            <remarks>
            Wrapper for the TraceLevelOutput dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.AvailableTraceLevelCollection">
            <summary>
            Returns the available trace levels.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.TraceOutputControl.ClearDelegate">
            <summary>
            Delegate that can be used to re-invoke a method when it comes from a different thread.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.TraceOutputControl.WriteDelegate">
            <summary>
            Delegate that can be used to re-invoke a method when it comes from a different thread.
            </summary>
            <param name="message">Message to write</param>
            <param name="eventType">Trace event type</param>
        </member>
        <member name="T:Catel.Windows.Controls.TraceOutputControl.TraceEntry">
            <summary>
            Class containing a trace entry as it will be used in the output control.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.TraceEntry.#ctor">
            <summary>
            Initializes a new verbose empty trace entry.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.TraceEntry.#ctor(System.Diagnostics.TraceLevel,System.String)">
            <summary>
            Initializes a new trace entry for the current date/time.
            </summary>
            <param name="level"><see cref="P:Catel.Windows.Controls.TraceOutputControl.TraceEntry.TraceLevel"/> of the trace entry.</param>
            <param name="message">Message of the trace entry.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.TraceEntry.#ctor(System.Diagnostics.TraceLevel,System.String,System.DateTime)">
            <summary>
            Initializes a new instance that can be fully customized.
            </summary>
            <param name="level"><see cref="P:Catel.Windows.Controls.TraceOutputControl.TraceEntry.TraceLevel"/> of the trace entry.</param>
            <param name="message">Message of the trace entry.</param>
            <param name="time"><see cref="T:System.DateTime"/> when the entry was created.</param>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.TraceEntry.Message">
            <summary>
            Actual trace message.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.TraceEntry.TraceLevel">
            <summary>
            Trace level.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.TraceEntry.Time">
            <summary>
            Date/time of the trace message.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.TraceOutputControl.FilteredTraceList">
            <summary>
            Filtered trace list.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.TraceOutputControl.FilteredTraceList._source">
            <summary>
            The source with the original data.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.TraceOutputControl.FilteredTraceList._levelToShow">
            <summary>
            The level which needs to be shown. 'Off' means no filtering.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.FilteredTraceList.#ctor(System.Collections.ObjectModel.ObservableCollection{Catel.Windows.Controls.TraceOutputControl.TraceEntry})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.TraceOutputControl.FilteredTraceList"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.FilteredTraceList.ItemMatchesLevel(Catel.Windows.Controls.TraceOutputControl.TraceEntry)">
            <summary>
            Determines if the given entry matches the filter tracelevel.
            </summary>
            <param name="traceEntry">The trace entry.</param>
            <returns>true if matches of if filter is 'Off', false if not </returns>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.FilteredTraceList.ResetList">
            <summary>
            Resets the list, copies all matching items from the source to this list.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.TraceOutputControl.FilteredTraceList.Source_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the CollectionChanged event of the source control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Controls.TraceOutputControl.FilteredTraceList.LevelToShow">
            <summary>
            Gets or sets the level to show. If set to 'Off' the filter shows all.
            </summary>
            <value>The level to show.</value>
        </member>
        <member name="T:Catel.Windows.Controls.LinkLabelBehavior">
            <summary>
            Available <see cref="T:Catel.Windows.Controls.LinkLabel"/> behaviors.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelBehavior.SystemDefault">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelBehavior.AlwaysUnderline">
            <summary>
            Always underline.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelBehavior.HoverUnderline">
            <summary>
            Hover underline.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelBehavior.NeverUnderline">
            <summary>
            Never underline.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.BindableRun">
            <summary>
            Bindable run class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.BindableRun.BoundTextProperty">
            <summary>
            DependencyProperty definition as the backing store for BoundText
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.BindableRun.BoundText_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the BoundText dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="P:Catel.Windows.Controls.BindableRun.BoundText">
            <summary>
            Wrapper for the BoundText dependency property.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.UserControl`1">
            <summary>
            <see cref="T:System.Windows.Controls.UserControl"/> that supports MVVM by using a <see cref="T:Catel.MVVM.IViewModel"/> typed parameter.
            If the user control is not constructed with the right view model by the developer, it will try to create
            the view model itself. It does this by keeping an eye on the <c>DataContext</c> property. If
            the property changes, the control will check the type of the DataContext and try to create the view model by using
            the DataContext value as the constructor. If the view model can be constructed, the DataContext of the UserControl will
            be replaced by the view model.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <remarks>
            This control suffers a lot from the bugs, or features "by design" as Microsoft likes to call it, of WPF. Below are the most 
            common issues that this control suffers from:
            <para/>
            1) WPF sometimes invokes the Loaded multiple times, without invoking Unloaded.
            <para/>
            2) The data context cannot be changed before the <c>UserControl.IsLoaded</c> property is true. This means that you will get a lot of binding errors,
               but they are invalid. We think the reason you cannot change the DataContext before the IsLoaded property is true because of performance reasons.
            <para/>
            3) The designer of WPF doesn't allow abstract generic baseclasses. In an ideal situation, this control would be abstract,
               but since there is no danger in making in non-abstract, the addition of designer support wins.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.UserControl`1.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.UserControl`1"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.UserControl`1"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the data context has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnLoaded">
            <summary>
            Initializes the user control.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnUnloaded">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closed"/> event.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.UpdateParentSubscriptions">
            <summary>
            Updates the parent subscriptions so this control is notified on parent datacontext changes.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnViewModelChanged">
            <summary>
            Called when the view model has changed.
            </summary>
            <remarks>
            If this method is overriden, it is important to call the base as well.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.DetermineRealDataContext">
            <summary>
            Determines the real data context. If there already is a real data context, no new data context will
            be determined.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.SubscribeToRealDataContext(System.Windows.UIElement,System.Windows.Data.BindingExpression)">
            <summary>
            Subscribes to the real DataContext so changes can be reflected.
            </summary>
            <param name="parentElement">The parent element.</param>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.UnsubscribeFromRealDataContext">
            <summary>
            Unsubscribes from the real DataContext.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.SubscribeToParentViewModelContainer">
            <summary>
            Subscribes to the parent view model container.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.UnsubscribeFromParentViewModelContainer">
            <summary>
            Unsubscribes from the parent view model container.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.SubscribeToParentViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Subscribes to a parent view model.
            </summary>
            <param name="parentViewModel">The parent view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.UnsubscribeFromParentViewModel">
            <summary>
            Unsubscribes from a parent view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.RegisterViewModelAsChild">
            <summary>
            Registers the view model as child on the parent view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.UnregisterViewModelAsChild">
            <summary>
            Unregisters the view model as child on the parent view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.UpdateDataContextToUseViewModel(System.Object)">
            <summary>
            Updates the data context to use view model.
            </summary>
            <param name="newDataContext">The new data context.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.InitializeNewViewModel(`0)">
            <summary>
            Initializes the new view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.ConstructViewModelUsingArgumentOrDefaultConstructor(System.Object)">
            <summary>
            Tries to construct the view model using the argument. If that fails, it will try to use
            the default constructor of the view model. If that is not available, <c>null</c> is returned.
            </summary>
            <param name="injectionObject">The object that is injected into the view model constructor.</param>
            <returns>
            Constructed view model or <c>null</c> if the view model could not be constructed.
            </returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.CloseAndDiposeViewModel">
            <summary>
            Closes and diposes the current view model.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnParentElementDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <c>DataContext</c> property of the parent element has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnRealDataContextPropertyChangedViaDependencyProperty(System.Object,System.EventArgs)">
            <summary>
            Handles the PropertyChanged event of the real DataContext via dependency properties.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnRealDataContextPropertyChangedViaINotifyPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the real DataContext via INotifyPropertyChanged.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.UpdateToNewDataContextAfterRealDataContextChange(System.Object)">
            <summary>
            Called when the real data context property has changed (so we must update).
            </summary>
            <param name="sender">The sender which is the real data context.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnParentViewModelContainerViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the ViewModelChanged event of the parent ViewModel container.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnParentViewModelCanceling(System.Object,System.EventArgs)">
            <summary>
            Handles the Canceling event of the parent ViewModel.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.OnParentViewModelSaving(System.Object,System.EventArgs)">
            <summary>
            Handles the Saving event of the parent ViewModel.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.ClearWarningsAndErrorsForObject(System.Object)">
            <summary>
            Clears the warnings and errors for the specified object.
            </summary>
            <param name="obj">The object.</param>
            <remarks>
            Since there is a "bug" in the .NET Framework (DataContext issue), this method clears the current
            warnings and errors in the InfoBarMessageControl if available.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.GetRealDataContext">
            <summary>
            Gets the real data context. This means that the value will first check whether there is a real data context. If so,
            that data context will be used. If there is no real data context, the actual data context will be returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.GetDependencyPropertyDescription(System.Windows.DependencyObject,System.String)">
            <summary>
            Gets the dependency property description for the specified property.
            </summary>
            <param name="dependencyObject">The dependency object that owns the property.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><see cref="T:System.ComponentModel.DependencyPropertyDescriptor"/> or <c>null</c> if the property is not found.</returns>
            <remarks>
            This method needs a special naming convention to succeed. If a property is called "Name", then the registered
            dependency property needs to be registered as "NameProperty".
            </remarks>
            <exception cref="T:System.ArgumentNullException">when <paramref name="dependencyObject"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="propertyName"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.GetParent(System.Windows.FrameworkElement)">
            <summary>
            Gets the parent of the specified element, both for Silverlight and WPF.
            </summary>
            <param name="element">The element.</param>
            <returns>The parent <see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if there is no parent.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.FindParentByPredicate(System.Predicate{System.Object})">
            <summary>
            Finds a parent by predicate. It first tries to find the parent via the <c>UserControl.Parent</c> property, and if that
            doesn't satisfy, it uses the <c>UserControl.TemplatedParent</c> property.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns><see cref="T:System.Windows.DependencyObject"/> or <c>null</c> if no parent is found that matches the predicate.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.UserControl`1.FindParentByPredicate(System.Predicate{System.Object},System.Int32)">
            <summary>
            Finds a parent by predicate. It first tries to find the parent via the <c>UserControl.Parent</c> property, and if that
            doesn't satisfy, it uses the <c>UserControl.TemplatedParent</c> property.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="maxDepth">The maximum number of levels to go up when searching for the parent. If smaller than 0, no maximum is used.</param>
            <returns>
            	<see cref="T:System.Windows.DependencyObject"/> or <c>null</c> if no parent is found that matches the predicate.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.Catel#MVVM#IViewModelContainer#ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.HasRealDataContext">
            <summary>
            Gets a value indicating whether there is a real DataContext this control is watching.
            </summary>
            <value>
            	<c>true</c> if there is a real DataContext this control is watching; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.HasParentViewModelContainer">
            <summary>
            Gets a value indicating whether there is a parent view model container available.
            </summary>
            <value>
            	<c>true</c> if there is a parent view model container available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.ParentViewModelContainer">
            <summary>
            Gets the parent view model container.
            </summary>
            <value>The parent view model container.</value>
            <remarks>
            For internal usage only.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.IsSubscribedToParentViewModel">
            <summary>
            Gets a value indicating whether this instance is subscribed to a parent view model.
            </summary>
            <value>
            	<c>true</c> if this instance is subscribed to a parent view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.SupportParentViewModelContainers">
            <summary>
            Gets or sets a value indicating whether parent view model containers are supported. If supported,
            the user control will search for a <see cref="T:System.Windows.DependencyObject"/> that implements the <see cref="T:Catel.MVVM.IViewModelContainer"/>
            interface. During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any parent control implementing the <see cref="T:Catel.MVVM.IViewModelContainer"/> interface, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>false</c>.
            <para/>
            The default value is <c>true</c>.
            </summary>
            <value>
            	<c>true</c> if parent view model containers are supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.SkipSearchingForInfoBarMessageControl">
            <summary>
            Gets or sets a value indicating whether to skip the search for an info bar message control. If not skipped,
            the user control will search for a the first <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> that can be found. 
            During this search, the user control will use both the visual and logical tree.
            <para/>
            If a user control does not have any <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>, searching
            for it is useless and requires the control to search all the way to the top for the implementation. To prevent this from
            happening, set this property to <c>true</c>.
            <para/>
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if the search for an info bar message control should be skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.UserControl`1.DisableWhenNoViewModel">
            <summary>
            Gets or sets a value indicating whether the user control should automatically be disabled when there is no
            active view model.
            </summary>
            <value>
            	<c>true</c> if the user control should automatically be disabled when there is no active view model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl`1.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:System.Windows.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.Windows.Controls.UserControl`1.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.Controls.UserControl`1.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="T:Catel.MVVM.UI.ControlToViewModelMappingContainer">
            <summary>
            Container class for <see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/> elements.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlToViewModelMappingContainer.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlToViewModelMappingContainer._controlToViewModelMappings">
            <summary>
            Dictionary containing all the control to view model mappings.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlToViewModelMappingContainer._viewModelToControlMappings">
            <summary>
            Dictionary containing all the view model to control mappings.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingContainer.#ctor(System.Windows.DependencyObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ControlToViewModelMappingContainer"/> class.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="dependencyObject"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingContainer.GetAllControlToViewModelMappings">
            <summary>
            Gets all the <see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/> that are registered.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all registered <see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingContainer.ContainsControlToViewModelMapping(System.String)">
            <summary>
            Determines whether the manager contains a control to view model property mapping for the specified control property name.
            </summary>
            <param name="controlPropertyName">Name of the control property.</param>
            <returns>
            	<c>true</c> if the manager contains a control to view model property mapping for the specified control property name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingContainer.GetControlToViewModelMapping(System.String)">
            <summary>
            Gets the <see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/> that is mapped to the specified control property name.
            </summary>
            <param name="controlPropertyName">Name of the control property.</param>
            <returns><see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingContainer.ContainsViewModelToControlMapping(System.String)">
            <summary>
            Determines whether the manager contains a view model to control property mapping for the specified view model property name.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <returns>
            	<c>true</c> if the manager contains a view model to control property mapping for the specified view model property name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingContainer.GetViewModelToControlMapping(System.String)">
            <summary>
            Gets the <see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/> that is mapped to the specified view model property name.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <returns><see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/>.</returns>
        </member>
        <member name="T:Catel.MVVM.Services.ProcessService">
            <summary>
            Process service to run files or start processes from a view model.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.ProcessService.StartProcess(System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.ProcessService.StartProcess(System.String,System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.ProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <param name="processCompletedCallback">The process completed callback, invoked only when the process is started successfully and completed.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="T:Catel.Environment">
            <summary>
            Environment information about Catel.
            </summary>
        </member>
        <member name="T:Catel.Windows.MultipleChoiceWindow">
            <summary>
            Interaction logic for MultipleChoiceWindow.xaml
            </summary>
            <summary>
            MultipleChoiceWindow
            </summary>
        </member>
        <member name="T:Catel.Windows.DataWindow">
            <summary>
            <see cref="T:System.Windows.Window"/> class that implements the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> and
            the default buttons, according to the <see cref="T:Catel.Windows.DataWindowMode"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindow.Offset">
            <summary>
            Offset of the window to the sides of the primary monitor.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> with the <see cref="F:Catel.Windows.DataWindowMode.OkCancel"/> mode.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of this class with custom commands.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of this class with custom commands.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="buttons">The buttons.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.#ctor(System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},System.Boolean)">
            <summary>
            Initializes a new instance of this class with custom commands.
            </summary>
            <param name="buttons">The buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteOK">
            <summary>
            Executes the OK command without a parameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteOK(System.Object)">
            <summary>
            Executes the OK command with a parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnOKCanExecute(System.Object)">
            <summary>
            Determines whether the user can execute the OK command.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnOKExecute(System.Object)">
            <summary>
            Handled when the user invokes the OK command.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteCancel">
            <summary>
            Executes the Cancel command without a parameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteCancel(System.Object)">
            <summary>
            Executes the Cancel command with a parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCancelCanExecute(System.Object)">
            <summary>
            Determines whether the user can execute the Cancel command.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCancelExecute(System.Object)">
            <summary>
            Handled when the user invokes the Cancel command.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteApply">
            <summary>
            Executes the Apply command without a parameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteApply(System.Object)">
            <summary>
            Executes the Apply command with a parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnApplyCanExecute(System.Object)">
            <summary>
            Determines whether the user can execute the Apply command.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnApplyExcute(System.Object)">
            <summary>
            Handled when the user invokes the Apply command.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteClose">
            <summary>
            Executes the Close command without a parameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ExecuteClose(System.Object)">
            <summary>
            Executes the Close command with a parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCloseCanExecute(System.Object)">
            <summary>
            Determines whether the user can execute the Close command.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns><c>true</c> if the command can be executed; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnCloseExecute(System.Object)">
            <summary>
            Handled when the user invokes the Close command.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.AddCustomButton(Catel.Windows.DataWindowButton)">
            <summary>
            Adds a custom button to the list of buttons.
            </summary>
            <param name="dataWindowButton">The data window button.</param>
            <exception cref="T:System.InvalidOperationException">when the button is added when the window is already loaded.</exception>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnContentChanged(System.Object,System.Object)">
            <summary>
            Invoked when the content of this control has been changed. This method will add the dynamic controls automatically.
            </summary>
            <param name="oldContent">Old content.</param>
            <param name="newContent">New content.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnInternalGridChanged">
            <summary>
            Called when the internal grid has changed.
            </summary>
            <remarks>
            This method is only invoked when the grid is set, not when the grid is cleared (which is something that should never happen).
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnLoaded">
            <summary>
            Called when the <see cref="T:Catel.Windows.DataWindow"/> is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnUnloaded">
            <summary>
            Called when the <see cref="T:Catel.Windows.DataWindow"/> is unloaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.EnableWindowOffset(System.EventArgs)">
            <summary>
            Enables the window offset as it was used before Catel 1.3. To support the maximized state,
            the default is removed.
            <para />
            If you want to have an offset for non-maximized windows, either call this method or set the
            <c>MaxWidth</c> and <c>MaxHeight</c> properties.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.OnDataWindowClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Closing event of the DataWindow control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow.Initialize">
            <summary>
            Initializes the window.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="P:Catel.Windows.DataWindow.Mode">
            <summary>
            Gets the <see cref="T:Catel.Windows.DataWindowMode"/> that this window uses.
            </summary>
        </member>
        <member name="P:Catel.Windows.DataWindow.CanClose">
            <summary>
            Gets or sets a value indicating whether this instance can close.
            </summary>
            <value><c>true</c> if this instance can close; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.Commands">
            <summary>
            Gets the commands that are currently available on the data window.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.DefaultButton">
            <summary>
            Gets the default button.
            </summary>
            <value>The default button.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsOKButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is OK button available.
            </summary>
            <value>
            	<c>true</c> if this instance is OK button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsCancelButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is cancel button available.
            </summary>
            <value>
            	<c>true</c> if this instance is cancel button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsApplyButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is apply button available.
            </summary>
            <value>
            	<c>true</c> if this instance is apply button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.IsCloseButtonAvailable">
            <summary>
            Gets a value indicating whether this instance is close button available.
            </summary>
            <value>
            	<c>true</c> if this instance is close button available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindow.ClosedByButton">
            <summary>
            Gets or sets a value indicating whether the window was closed by a 'user'-button.
            </summary>
            <value><c>true</c> if closed by button; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow.InternalGrid">
            <summary>
            Gets the internal grid. This control gives internal classes a change to add additional controls to
            the dynamically created grid.
            </summary>
            <value>The internal grid.</value>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.#ctor(System.Collections.Generic.IEnumerable{Catel.Windows.Choice})">
            <summary>
            Creates a new instance of the mutliple choice window where specify is allowed.
            </summary>
            <param name="choiceCollection">Collection of <see cref="P:Catel.Windows.MultipleChoiceWindow.Choice"/> objects to display.</param>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.#ctor(System.Collections.Generic.IEnumerable{Catel.Windows.Choice},System.Boolean)">
            <summary>
            Creates a new instance of the mutliple choice window.
            </summary>
            <param name="choiceCollection">Collection of <see cref="P:Catel.Windows.MultipleChoiceWindow.Choice"/> objects to display.</param>
            <param name="allowSpecify">If true, a custom specification is allowed.</param>
        </member>
        <member name="F:Catel.Windows.MultipleChoiceWindow.ChoiceSpecifyProperty">
            <summary>
            DependencyProperty definition as the backing store for ChoiceSpecify.
            </summary>
        </member>
        <member name="F:Catel.Windows.MultipleChoiceWindow.SelectedChoiceProperty">
            <summary>
            DependencyProperty definition as the backing store for SelectedChoice.
            </summary>
        </member>
        <member name="F:Catel.Windows.MultipleChoiceWindow.ChoiceProperty">
            <summary>
            DependencyProperty definition as the backing store for Choice.
            </summary>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.ChoiceSpecify_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the ChoiceSpecify dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.SelectedChoice_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the SelectedChoice dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.UpdateChoices">
            <summary>
            Updates the available choices.
            </summary>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="M:Catel.Windows.MultipleChoiceWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.MultipleChoiceWindow.AllowSpecify">
            <summary>
            Gets or sets whether a custom specification is allowed.
            </summary>
        </member>
        <member name="P:Catel.Windows.MultipleChoiceWindow.ChoiceCollection">
            <summary>
            Gets or sets the collection of <see cref="P:Catel.Windows.MultipleChoiceWindow.Choice"/> objects.
            </summary>
        </member>
        <member name="P:Catel.Windows.MultipleChoiceWindow.ChoiceSpecify">
            <summary>
            Gets or sets ChoiceSpecify.
            </summary>
            <remarks>
            Wrapper for the ChoiceSpecify dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.MultipleChoiceWindow.SelectedChoice">
            <summary>
            Gets or sets SelectedChoice.
            </summary>
            <remarks>
            Wrapper for the SelectedChoice dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.MultipleChoiceWindow.Choice">
            <summary>
            Gets or sets Choice.
            </summary>
            <remarks>
            Wrapper for the Choice dependency property.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Choice">
            <summary>
            Class representing a choice that can be used in the <see cref="T:Catel.Windows.MultipleChoiceWindow"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Choice.#ctor(System.String)">
            <summary>
            Creates a new choice where the text displayed is the same
            as the value of the choice comment when this choice is chosen.
            </summary>
            <param name="header">Text to display.</param>
        </member>
        <member name="M:Catel.Windows.Choice.#ctor(System.String,System.String)">
            <summary>
            Creates a new reason where the text displayed is different
            then the value of the reason when this reason is chosen.
            </summary>
            <param name="header">Text to display.</param>
            <param name="explanation">Text to set to reason when this reason is chosen.</param>
        </member>
        <member name="M:Catel.Windows.Choice.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new reason where the text displayed is different
            then the value of the reason when this reason is chosen.
            
            This constructor also allows to specify whether customization is allowed.
            </summary>
            <param name="header">Text to display.</param>
            <param name="explanation">Text to set to reason when this reason is chosen.</param>
            <param name="allowCustomization">If true, customization is allowed for this reason.</param>
        </member>
        <member name="P:Catel.Windows.Choice.AllowCustomization">
            <summary>
            Gets whether this reason allows customization.
            </summary>
        </member>
        <member name="P:Catel.Windows.Choice.Header">
            <summary>
            Gets the reason header. This text will be used to display the reason in
            the list of available reasons.
            </summary>
        </member>
        <member name="P:Catel.Windows.Choice.Explanation">
            <summary>
            Gets the explanation of the reason. This text will be used to
            fill the reason text when this reason is chosen.
            </summary>
        </member>
        <member name="P:Catel.Windows.Choice.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Catel.Windows.VisualTargetPresentationSource">
            <summary>
            Support for multi-threaded host visuals.
            </summary>
            <remarks>
            The original code can be found here: http://blogs.msdn.com/b/dwayneneed/archive/2007/04/26/multithreaded-ui-hostvisual.aspx.
            </remarks>
        </member>
        <member name="M:Catel.Windows.VisualTargetPresentationSource.#ctor(System.Windows.Media.HostVisual)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.VisualTargetPresentationSource"/> class.
            </summary>
            <param name="hostVisual">The host visual.</param>
        </member>
        <member name="M:Catel.Windows.VisualTargetPresentationSource.GetCompositionTargetCore">
            <summary>
            When overridden in a derived class, returns a visual target for the given source.
            </summary>
            <returns>
            Returns a <see cref="T:System.Windows.Media.CompositionTarget"/> that is target for rendering the visual.
            </returns>
        </member>
        <member name="P:Catel.Windows.VisualTargetPresentationSource.RootVisual">
            <summary>
            When overridden in a derived class, gets or sets the root visual being presented in the source.
            </summary>
            <value></value>
            <returns>
            The root visual.
            </returns>
        </member>
        <member name="P:Catel.Windows.VisualTargetPresentationSource.IsDisposed">
            <summary>
            When overridden in a derived class, gets a value that declares whether the object is disposed.
            </summary>
            <value></value>
            <returns>true if the object is disposed; otherwise, false.
            </returns>
        </member>
        <member name="T:Catel.Windows.PixelShaderMode">
            <summary>
            Sets the available pixel shader modes of Catel.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Off">
            <summary>
            Disable all pixel shaders.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Auto">
            <summary>
            Automatically determine the best option.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Hardware">
            <summary>
            Use hardware for the pixel shaders.
            </summary>
        </member>
        <member name="F:Catel.Windows.PixelShaderMode.Software">
            <summary>
            Use software for the pixel shaders.
            </summary>
        </member>
        <member name="T:Catel.Windows.StyleHelper">
            <summary>
            Helper class for WPF styles and themes.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.DefaultKeyPrefix">
            <summary>
            Prefix of a default style key.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.DefaultKeyPostfix">
            <summary>
            Postfix of a default style key.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper._resourceDictionaryCache">
            <summary>
            Cached decompiled XAML resource dictionaries.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper._styleToFrameworkElementTypeCache">
            <summary>
            Cached types of <see cref="T:System.Windows.FrameworkElement"/> belonging to the string representation of the type.
            </summary>
        </member>
        <member name="F:Catel.Windows.StyleHelper.PixelShaderMode">
            <summary>
            This property allows you to disable all pixel shaders in Catel.
            <para />
            By default, all pixel shaders are enabled.
            </summary>
        </member>
        <member name="M:Catel.Windows.StyleHelper.EnsureApplicationResourcesAndCreateStyleForwarders(System.Uri)">
            <summary>
            Ensures that an application instance exists and the styles are applied to the application. This method is extremely useful
            to apply when WPF is hosted (for example, when loaded as plugin of a non-WPF application).
            </summary>
            <exception cref="T:System.ArgumentNullException">when <paramref name="applicationResourceDictionary"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the current application (<see cref="P:System.Windows.Application.Current"/> to retrieve
            the resources. The forwarders will be written to the same dictionary.
            </summary>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources, but the forwarders will be written to the same dictionary as
            the source dictionary.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are 
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            <para />
            This method will use the passed resources.
            </summary>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CreateStyleForwardersForDefaultStyles(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Windows.ResourceDictionary,System.Boolean)">
            <summary>
            Creates style forwarders for default styles. This means that all styles found in the theme that are
            name like Default[CONTROLNAME]Style (i.e. "DefaultButtonStyle") will be used as default style for the
            control.
            This method will use the passed resources.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="sourceResources">Resource dictionary to read the keys from (thus that contains the default styles).</param>
            <param name="targetResources">Resource dictionary where the forwarders will be written to.</param>
            <param name="forceForwarders">if set to <c>true</c>, styles will not be completed but only forwarders are created.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="sourceResources"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetResources"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindResourceDictionaryDeclaringType(System.Windows.ResourceDictionary,System.Type)">
            <summary>
            Finds the <see cref="T:System.Windows.ResourceDictionary"/> declaring the real style for the target type.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="targetType">Type of the target.</param>
            <returns><see cref="T:System.Windows.ResourceDictionary"/> in which the style is defined, or <c>null</c> if not found.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindDefaultStyles(System.Windows.ResourceDictionary)">
            <summary>
            Finds all the the default styles definitions 
            </summary>
            <param name="sourceResources">The source resources.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CompleteStyleWithAdditionalInfo(System.Windows.Style,System.Windows.Style)">
            <summary>
            Completes a style with additional info.
            </summary>
            <param name="style">The style.</param>
            <param name="styleWithAdditionalInfo">The style with additional info.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="style"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="styleWithAdditionalInfo"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.StyleHelper.RecreateDefaultStylesBasedOnTheme(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary)">
            <summary>
            Recreates the default styles based on theme.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="resources">The resources to fix.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="resources"/> is <c>null</c>.</exception>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            </remarks>
        </member>
        <member name="M:Catel.Windows.StyleHelper.CloneStyleIfBasedOnControl(System.Windows.ResourceDictionary,System.Windows.Style,System.Type)">
            <summary>
            Clones a style when the style is based on a control.
            </summary>
            <param name="rootResourceDictionary">The root resource dictionary.</param>
            <param name="style">The style.</param>
            <param name="basedOnType">Type which the style is based on.</param>
            <returns><see cref="T:System.Windows.Style"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="rootResourceDictionary"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="style"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="basedOnType"/> is <c>null</c>.</exception>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            <para/>
            Should be used in combination with the <c>RecreateDefaultStylesBasedOnTheme</c> method.
            </remarks>
        </member>
        <member name="M:Catel.Windows.StyleHelper.FindFrameworkElementStyleIsBasedOn(System.Uri,System.String)">
            <summary>
            Finds the <see cref="T:System.Windows.FrameworkElement"/> a specific style is based on.
            </summary>
            <param name="resourceDictionaryUri">The resource dictionary URI.</param>
            <param name="styleKey">The style key.</param>
            <returns>
            	<see cref="T:System.Type"/> or <c>null</c> if the style is not based on a <see cref="T:System.Windows.FrameworkElement"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="resourceDictionaryUri"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="styleKey"/> is <c>null</c>.</exception>
            <remarks>
            This method is introduced due to the lack of the ability to use DynamicResource for the BasedOn property when
            defining styles inside a derived theme.
            Should be used in combination with the <see cref="M:Catel.Windows.StyleHelper.RecreateDefaultStylesBasedOnTheme(System.Windows.ResourceDictionary,System.Windows.ResourceDictionary)"/> method.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.CountCollapsedConverter">
            <summary>
            Convert for auto collapsing of control depending on given count.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.VisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.VisibilityConverterBase"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.VisibilityConverterBase.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <remarks>
            By default, this method does nothing.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Data.Converters.VisibilityConverterBase.NotVisibleVisibility">
            <summary>
            Gets the <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.
            </summary>
            <value>The not visible visibility.</value>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountCollapsedConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CountCollapsedConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountCollapsedConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CountCollapsedConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountCollapsedConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.CountHiddenConverter">
            <summary>
            Convert for auto hiding of control depending on given count.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CountHiddenConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CountHiddenConverter"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToOppositeBooleanConverter">
            <summary>
            Convert a value to it's inverted value.
            </summary>
            <remarks>Currently only values of type bool are accepted.</remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToOppositeBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts value to the inverted value.
            </summary>
            <param name="value">A value, currently only bool supported.</param>
            <param name="targetType">Currently only bool supported.</param>
            <param name="parameter">Not in use.</param>
            <param name="culture">Not in use.</param>
            <returns>The inverted value.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToOppositeBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts value back, simply inverts again.
            </summary>
            <param name="value">A value, currently only bool supported.</param>
            <param name="targetType">Currently only bool supported.</param>
            <param name="parameter">Not in use.</param>
            <param name="culture">Not in use.</param>
            <returns>The inverted value.</returns>
        </member>
        <member name="T:Catel.Windows.Controls.LinkLabelClickBehavior">
            <summary>
            Available <see cref="T:Catel.Windows.Controls.LinkLabel"/> clickevent behaviors.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelClickBehavior.Undefined">
            <summary>
            No explicit behavior defined, will use the set-click-event.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabelClickBehavior.OpenUrlInBrowser">
            <summary>
            Opens the set url in the systems webbrowser.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.InfoBarMessageControlVisibilityConverter">
            <summary>
            Converter for the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> to determine whether the control
            should be visible for the current mode and
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControlVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.ArgumentException">If <paramref name="value"/> is not of type <see cref="T:Catel.Windows.Controls.InfoBarMessageControlMode"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControlVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.ApprovementCaption">
            <summary>
              Looks up a localized string similar to Approved.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.ChoiceSpecify">
            <summary>
              Looks up a localized string similar to Specify.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandBrowseForFileBrowse">
            <summary>
              Looks up a localized string similar to Browse for file....
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandDataAdd">
            <summary>
              Looks up a localized string similar to Add.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandDataAddAll">
            <summary>
              Looks up a localized string similar to Add all.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandDataEdit">
            <summary>
              Looks up a localized string similar to Edit.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandDataRemove">
            <summary>
              Looks up a localized string similar to Remove.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandDataRemoveAll">
            <summary>
              Looks up a localized string similar to Remove all.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandDataRevert">
            <summary>
              Looks up a localized string similar to Revert.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandDataSort">
            <summary>
              Looks up a localized string similar to Sort.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandDataSubmit">
            <summary>
              Looks up a localized string similar to Submit.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandDataSynchronize">
            <summary>
              Looks up a localized string similar to Synchronize.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandNavigateBack">
            <summary>
              Looks up a localized string similar to Back.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandNavigateFirst">
            <summary>
              Looks up a localized string similar to Navigate to first item.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandNavigateForward">
            <summary>
              Looks up a localized string similar to Next.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandNavigateGo">
            <summary>
              Looks up a localized string similar to Go to address.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandNavigateHome">
            <summary>
              Looks up a localized string similar to Home.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandNavigateLast">
            <summary>
              Looks up a localized string similar to Navigate to last item.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandNavigateNext">
            <summary>
              Looks up a localized string similar to Navigate to next item.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandNavigateOpenLinkUrl">
            <summary>
              Looks up a localized string similar to Open hyperlink.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandNavigatePrevious">
            <summary>
              Looks up a localized string similar to Navigate to previous item.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandTipOfTheDayLaunchTipEditor">
            <summary>
              Looks up a localized string similar to Launch tip editor.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandTipOfTheDayPreview">
            <summary>
              Looks up a localized string similar to Preview.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandTipOfTheDayShowNextTip">
            <summary>
              Looks up a localized string similar to Show next tip.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandWindowApply">
            <summary>
              Looks up a localized string similar to Apply.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandWindowCancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandWindowClear">
            <summary>
              Looks up a localized string similar to Clear.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandWindowClose">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandWindowCopyToClipboard">
            <summary>
              Looks up a localized string similar to Copy to clipboard.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandWindowOK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandWindowRefresh">
            <summary>
              Looks up a localized string similar to Refresh.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CommandWindowResetLayout">
            <summary>
              Looks up a localized string similar to Reset layout.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Comments">
            <summary>
              Looks up a localized string similar to Comments.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.ConfirmationTitle">
            <summary>
              Looks up a localized string similar to Are you sure?.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.ConfirmCloseTipOfTheDayEditor">
             <summary>
               Looks up a localized string similar to Are you sure you want to close the editor?
            
            All data that has not yet been saved will be lost. Make sure to save you data first if you want to keep your changes..
             </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CrashWindowExplanation">
             <summary>
               Looks up a localized string similar to The application has encountered a problem and needs to close. We are sorry for the inconvenience.
            
            If you were in the middle of something, the information you were working on might be lost.
            
            Please tell us about the problem. We have gathered information about the problem. With this information, we will try to solve the problem in future releases..
             </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.CrashWindowTitle">
            <summary>
              Looks up a localized string similar to Application crash.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Empty">
            <summary>
              Looks up a localized string similar to Empty.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.ErrorTitle">
            <summary>
              Looks up a localized string similar to Error.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Failed">
            <summary>
              Looks up a localized string similar to Failed.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.InfoBarMessageControlErrorTitle">
            <summary>
              Looks up a localized string similar to The following warnings and/or errors were found (hover to view):.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.InfoTitle">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Modify">
            <summary>
              Looks up a localized string similar to Modify.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.MultiLineInputWindowExplanation">
            <summary>
              Looks up a localized string similar to Change the text below.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.MultipleChoiceWindowTitle">
            <summary>
              Looks up a localized string similar to Make a choice.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.PleaseWait">
            <summary>
              Looks up a localized string similar to Please wait.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.SaveHelpMappingFailed">
            <summary>
              Looks up a localized string similar to An error occurred while saving the help mapping file.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.WarningTitle">
            <summary>
              Looks up a localized string similar to Warning.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Resources.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.Test.OpenFileService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IOpenFileService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.OpenFileService service = (Test.OpenFileService)GetService<IOpenFileService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(() =>
                         {
                           service.FileName = @"c:\test.txt";
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.OpenFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.OpenFileService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.OpenFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>
            	<c>true</c> if a file is selected; otherwise <c>false</c>.
            </returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.Test.OpenFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.OpenFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="T:Catel.Collections.ObjectModel.ObservableCollectionExtensions">
            <summary>
            Extension methods for <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:Catel.Collections.ObjectModel.ObservableCollectionExtensions.AddRange``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add an range of items to the specified <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <typeparam name="T">Type of items within the observable collection.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
            <param name="range">An range of items.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="collection"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="range"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Catel.Windows.PleaseWaitWindow">
            <summary>
            Please wait window to show a please wait window with the option to customize the text.
            </summary>
            <remarks>
            Parts of this code comes from this blog: http://blogs.msdn.com/b/dwayneneed/archive/2007/04/26/multithreaded-ui-hostvisual.aspx
            </remarks>
            <summary>
            PleaseWaitWindow
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.PleaseWaitWindow"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.#ctor(System.String)">
            <summary>
            Initializes a please wait window with default text.
            </summary>
            <param name="text">Text to display in the window.</param>
        </member>
        <member name="F:Catel.Windows.PleaseWaitWindow.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.ChangeOwnerDimming(System.Boolean)">
            <summary>
            Changes the owner dimming.
            </summary>
            <param name="dimm">if set to <c>true</c>, the owner should be dimmed.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the window is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when the layout of the window is updated.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.CreateMediaElementOnWorkerThread">
            <summary>
            Creates the media element on worker thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.MediaWorkerThread(System.Object)">
            <summary>
            Medias the worker thread.
            </summary>
            <param name="arg">The arg.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.CreateMediaElement">
            <summary>
            Creates the media element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.PleaseWaitWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.Text">
            <summary>
            Gets or sets Text.
            </summary>
            <remarks>
            Wrapper for the Text dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.PleaseWaitWindow.IsOwnerDimmed">
            <summary>
            Gets or sets a value indicating whether this instance is dimmed.
            </summary>
            <value><c>true</c> if this instance is dimmed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.Windows.PleaseWaitHelper">
            <summary>
            PleaseWait window Helper class.
            </summary>
        </member>
        <member name="F:Catel.Windows.PleaseWaitHelper.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.PleaseWaitHelper"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show">
            <summary>
            Shows the please wait window with the default status text.
            </summary>
            <remarks>
            When this method is used, the <see cref="M:Catel.Windows.PleaseWaitHelper.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.Windows.PleaseWaitHelper.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.ComponentModel.RunWorkerCompletedEventHandler)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed. This method will also subscribe to the
            <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="runWorkerCompletedDelegate">The run worker completed delegate.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String,System.Double)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.ComponentModel.RunWorkerCompletedEventHandler,System.String,System.Double)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed. This method will also subscribe to the
            <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> event.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="runWorkerCompletedDelegate">The run worker completed delegate.</param>
            <param name="status">The status.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatus(System.String)">
            <summary>
            Updates the status.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatus(System.String,System.Double)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.Hide">
            <summary>
            Hides the Please Wait window.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.UpdateStatusText(System.String,System.Double)">
            <summary>
            Updates the status text.
            </summary>
            <param name="text">The text.</param>
            <param name="windowWidth">Width of the window.</param>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.ShowWindow">
            <summary>
            Shows the window delayed by using the <see cref="P:Catel.Windows.PleaseWaitHelper.MinimumDurationBeforeShow"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.PleaseWaitHelper.HideWindow">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.Instance">
            <summary>
            Gets the instance of this singleton class.
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.PleaseWaitWindow">
            <summary>
            Gets or sets the <see cref="P:Catel.Windows.PleaseWaitHelper.PleaseWaitWindow"/> instance.
            </summary>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.MinimumDurationBeforeShow">
            <summary>
            Gets or sets the minimum duration in milliseconds that an operation must take before the window is actually shown.
            </summary>
            <value>The minimum duration in milliseconds that an operation must take before the window is actually shown.</value>
        </member>
        <member name="P:Catel.Windows.PleaseWaitHelper.MinimumShowTime">
            <summary>
            Gets or sets the minimum show time in milliseconds.
            </summary>
            <value>The minimum show time in milliseconds.</value>
        </member>
        <member name="T:Catel.Windows.PleaseWaitHelper.HideWindowDelegate">
            <summary>
            Delegate that allows this class to re-invoke the HideWindow method.
            </summary>
        </member>
        <member name="T:Catel.Windows.PleaseWaitHelper.UpdateStatusTextDelegate">
            <summary>
            Delegate to update the status text of the <see cref="P:Catel.Windows.PleaseWaitHelper.PleaseWaitWindow"/>.
            </summary>
        </member>
        <member name="T:Catel.Windows.WrapOptions">
            <summary>
            Available wrap options that can be used in the <see cref="T:Catel.Windows.WrapControlHelper"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.GenerateInfoBarMessageControl">
            <summary>
            Generates an inline <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> around the element to wrap.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.GenerateInlineInfoBarMessageControl">
            <summary>
            Generates an inline <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> around the element to wrap.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.GenerateOverlayInfoBarMessageControl">
            <summary>
            Generates an overlay <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> around the element to wrap.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.GenerateWarningAndErrorValidatorForDataContext">
            <summary>
            Generates a <see cref="T:Catel.Windows.Controls.WarningAndErrorValidator"/> for the data context.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapOptions.All">
            <summary>
            All available options.
            </summary>
        </member>
        <member name="T:Catel.Windows.WrapControlHelper">
            <summary>
            An helper to wrap controls and windows with several controls, such as the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.InternalGridName">
            <summary>
            The name of the internal grid. Retrieve the grid with this name to add custom controls to the inner grid.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.ButtonsWrapPanelName">
            <summary>
            The name of the wrap panel that contains the buttons.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.MainContentHolderName">
            <summary>
            The name of the main content holder, used to prevent that an element is wrapped multiple times.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.InfoBarMessageControlName">
            <summary>
            The name of the info bar message control.
            </summary>
        </member>
        <member name="F:Catel.Windows.WrapControlHelper.WarningAndErrorValidatorName">
            <summary>
            The name of the warning and error validator control.
            </summary>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)">
            <summary>
            Determines whether the specified <see cref="T:System.Windows.FrameworkElement"/> can be safely wrapped.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Windows.FrameworkElement"/> can be safely wrapped; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions)">
            <summary>
            Wraps the specified framework element without any buttons.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <returns>
            	<see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.
            </returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,System.Windows.Controls.ContentControl)">
            <summary>
            Wraps the specified framework element without any buttons.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns>
            	<see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.
            </returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            <para/>
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,Catel.Windows.DataWindowButton[])">
            <summary>
            Wraps the specified framework element without any buttons.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="buttons">The buttons.</param>
            <returns>
            	<see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.
            </returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.Wrap(System.Windows.FrameworkElement,Catel.Windows.WrapOptions,Catel.Windows.DataWindowButton[],System.Windows.Controls.ContentControl)">
            <summary>
            Wraps the specified framework element.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <param name="wrapOptions">The wrap options.</param>
            <param name="buttons">The buttons to add.</param>
            <param name="parentContentControl">The parent content control.</param>
            <returns><see cref="T:System.Windows.Controls.Grid"/> that contains the wrapped content.</returns>
            <remarks>
            The framework element that is passed must be disconnected from the parent first. It is recommended to first check whether a
            framework element can be wrapped by using the <see cref="M:Catel.Windows.WrapControlHelper.CanBeWrapped(System.Windows.FrameworkElement)"/> method.
            This method will automatically handle the disconnecting of the framework element from the parent is the <paramref name="parentContentControl"/>
            is passed.
            </remarks>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement``1(System.Windows.Controls.Grid,Catel.Windows.WrapOptions)">
            <summary>
            Gets a wrapped element mapped by the <paramref name="wrapOption"/>.
            </summary>
            <typeparam name="T">Type of the control to return.</typeparam>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="wrapOption">The wrap option that is used, which will be mapped to the control. The value <see cref="F:Catel.Windows.WrapOptions.All"/> is not allowed and will throw an exception.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when <paramref name="wrapOption"/> is <see cref="F:Catel.Windows.WrapOptions.All"/>.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement(System.Windows.Controls.Grid,Catel.Windows.WrapOptions)">
            <summary>
            Gets a wrapped element mapped by the <paramref name="wrapOption"/>.
            </summary>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="wrapOption">The wrap option that is used, which will be mapped to the control. The value <see cref="F:Catel.Windows.WrapOptions.All"/> is not allowed and will throw an exception.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when <paramref name="wrapOption"/> is <see cref="F:Catel.Windows.WrapOptions.All"/>.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement``1(System.Windows.Controls.Grid,System.String)">
            <summary>
            Gets a wrapped element by name.
            </summary>
            <typeparam name="T">Type of the control to return.</typeparam>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="controlName">Name of the control.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="controlName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when the <paramref name="controlName"/> is not a valid control name.</exception>
        </member>
        <member name="M:Catel.Windows.WrapControlHelper.GetWrappedElement(System.Windows.Controls.Grid,System.String)">
            <summary>
            Gets a wrapped element by name.
            </summary>
            <param name="wrappedGrid">The wrapped grid.</param>
            <param name="controlName">Name of the control.</param>
            <returns>
            	<see cref="T:System.Windows.FrameworkElement"/> or <c>null</c> if the element is not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="wrappedGrid"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="controlName"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when the <paramref name="controlName"/> is not a valid control name.</exception>
        </member>
        <member name="T:Catel.Windows.Controls.EmptyColumn">
            <summary>
            Control to fill up a column in the <see cref="T:Catel.Windows.Controls.StackGrid"/> control. This control is just a placeholder for a grid cell.
            </summary>
            <example>
            <code>
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
            	<ColumnDefinition Width="Auto"/>
            	<ColumnDefinition Width="*"/>
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name"/>
              <TextBox Text="{Bindng Name}"/>
            
              <!-- Empty row, will in this case use 2 columns -->
              <EmptyRow/>
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}"/>
              </WrapPanel>
            </StackGrid>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.EmptyColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.EmptyColumn"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Properties.Exceptions">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.AnimatedGifNotFound">
            <summary>
              Looks up a localized string similar to Gif source was not found.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ArgumentCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Argument cannot be null or empty.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ArgumentMustBeOfTypeWindow">
            <summary>
              Looks up a localized string similar to Argument must be of type Window.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ArgumentMustImplementIViewModelInterface">
            <summary>
              Looks up a localized string similar to The argument must implement IViewModel interface.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ControlTemplateMustContainPart">
            <summary>
              Looks up a localized string similar to Control template must contain part &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.DataWindowButtonCanOnlyBeAddedWhenWindowIsNotLoaded">
            <summary>
              Looks up a localized string similar to DataWindowButtons can only be added when the window is not yet loaded.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.DependencyPropertyCanOnlyBeAttachedToScrollViewer">
            <summary>
              Looks up a localized string similar to The dependency property can only be attached to a ScrollViewer.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.FailedToConfigureIoCContainer">
            <summary>
              Looks up a localized string similar to Failed to configure IoC container.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.MethodToValueConverterOnlySupportsOneWayBinding">
            <summary>
              Looks up a localized string similar to MethodToValueConverter can only be used for one way conversion..
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.NoExpectedResultsInQueueForUnitTest">
            <summary>
              Looks up a localized string similar to No expected results in the queue, set up expected result first.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ServiceDoesNotSupportOperation">
            <summary>
              Looks up a localized string similar to The service does not support this operation.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ViewModelAlreadyRegistered">
            <summary>
              Looks up a localized string similar to View model already registered.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.ViewModelContainerMustBeOfTypeDependencyObject">
            <summary>
              Looks up a localized string similar to viewModelContainer must be of type DependencyObject.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.Exceptions.VisibilityIsNotAllowedForConverter">
            <summary>
              Looks up a localized string similar to Visibility.Visible is not possible as not-visible option.
            </summary>
        </member>
        <member name="T:Catel.Windows.ModalWindowHelper">
            <summary>
            Modal window helper class
            </summary>
        </member>
        <member name="M:Catel.Windows.ModalWindowHelper.#ctor(System.IntPtr,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.ModalWindowHelper"/> class.
            </summary>
            <param name="parentWindow">Handle of the window to set as parent.</param>
            <param name="className">Class name of the window to make modal.</param>
            <param name="windowTitle">Title of the window to make modal.</param>
        </member>
        <member name="M:Catel.Windows.ModalWindowHelper.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Catel.Windows.ModalWindowHelper"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.ModalWindowHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Catel.Windows.ModalWindowHelper.StartSearch">
            <summary>
            Starts the search for the window
            </summary>
        </member>
        <member name="M:Catel.Windows.ModalWindowHelper.FindWindowAndSetModal">
            <summary>
            Tries to find the window and set its state to modal.
            </summary>
        </member>
        <member name="P:Catel.Windows.ModalWindowHelper.IsSucceeded">
            <summary>
            Gets whether the window was found and its state is set to model.
            </summary>
        </member>
        <member name="T:Catel.Windows.ModalWindowHelper.RECT">
            <summary>
            Win32 RECT structure.
            </summary>
        </member>
        <member name="F:Catel.Windows.ModalWindowHelper.RECT.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:Catel.Windows.ModalWindowHelper.RECT.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:Catel.Windows.ModalWindowHelper.RECT.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:Catel.Windows.ModalWindowHelper.RECT.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter">
            <summary>
            Convert from reference to <see cref="T:System.Windows.Visibility"/>. 
            If the reference contains a value, Visibility.Visible will be returned. 
            If the reference is null, Visibility.Collapsed will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ReferenceToHidingVisibilityConverter">
            <summary>
            Convert from reference to <see cref="T:System.Windows.Visibility"/>. 
            If the reference contains a value, Visibility.Visible will be returned. 
            If the reference is null, Visibility.Hidden will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToHidingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ReferenceToHidingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ColorToBrushConverter">
            <summary>
            ColorToBrushConverter
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.LinkLabel">
            <summary>
            A label looking like the known hyperlink.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.Windows.Controls.LinkLabel"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.LinkLabel"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.UrlProperty">
            <summary>
            DependencyProperty definition as the backing store for Url
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.HasUrlProperty">
            <summary>
            DependencyProperty definition as the backing store for HasUrl
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.HyperlinkStyleProperty">
            <summary>
            DependencyProperty definition as the backing store for HyperlinkStyle
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.HoverForegroundProperty">
            <summary>
            DependencyProperty definition as the backing store for HoverForeground
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.LinkLabelBehaviorProperty">
            <summary>
            DependencyProperty definition as the backing store for LinkLabelBehavior
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.ClickBehaviorProperty">
            <summary>
            DependencyProperty definition as the backing store for ClickBehavior
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.CommandParameterProperty">
            <summary>
            DependencyProperty definition as the backing store for CommandParameter
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.CommandProperty">
            <summary>
            DependencyProperty definition as the backing store for Command
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.CommandTargetProperty">
            <summary>
            DependencyProperty definition as the backing store for CommandTarget
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.ClickEvent">
            <summary>
            ClickEvent
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.LinkLabel.RequestNavigateEvent">
            <summary>
            RequestNavigateEvent
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.LinkLabel_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Unloaded event of the LinkLabel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.Url_PropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles change of property Url.
            </summary>
            <param name="sender">A sender.</param>
            <param name="args">Event args.</param>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.ClickBehavior_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles a change of the ClickBehavior property.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.InnerHyperlink_RequestNavigate(System.Object,System.Windows.Navigation.RequestNavigateEventArgs)">
            <summary>
            Handles the RequestNavigate event of the InnerHyperlink control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Navigation.RequestNavigateEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.InnerHyperlink_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the InnerHyperlink control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.LinkLabel.OpenBrowserBehaviorImpl(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click event of the default linklabel.
            </summary>
            <param name="sender">Event sender</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.HasUrl">
            <summary>
            Indicates whether url has a value.
            </summary>
            <value><c>true</c> if this instance has URL; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.HyperlinkStyle">
            <summary>
            Gets or sets the hyperlink style.
            </summary>
            <value>The hyperlink style.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.HoverForeground">
            <summary>
            Gets or sets the hover foreground.
            </summary>
            <value>The hover foreground.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.LinkLabelBehavior">
            <summary>
            Gets or sets the link label behavior.
            </summary>
            <value>The link label behavior.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.ClickBehavior">
            <summary>
            Wrapper for the ClickBehavior dependency property.
            </summary>
            <value>The click behavior.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.CommandParameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
            <value>The command parameter.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.Windows.Controls.LinkLabel.CommandTarget">
            <summary>
            Gets or sets the command target.
            </summary>
            <value>The command target.</value>
        </member>
        <member name="E:Catel.Windows.Controls.LinkLabel.Click">
            <summary>
            Occurs when [click].
            </summary>
        </member>
        <member name="E:Catel.Windows.Controls.LinkLabel.RequestNavigate">
            <summary>
            Occurs when [request navigate].
            </summary>
        </member>
        <member name="T:Catel.MVVM.Services.Test.UIVisualizerService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IUIVisualizerService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.UIVisualizerService service = (Test.UIVisualizerService)GetService<IUIVisualizerService>();
            
            // Queue the next expected result
            service.ExpectedShowResults.Add(() =>
                         {
                           // If required, handle custom data manipulation here
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.UIVisualizerService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.Type,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="viewModelType">Type of the view model.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="viewModelType"/> does not implement <see cref="T:Catel.MVVM.IViewModel"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)">
            <summary>
            Registers the specified view model and the window type. This way, Catel knowns what
            window to show when a specific view model window is requested.
            </summary>
            <param name="name">Name of the registered window.</param>
            <param name="windowType">Type of the window.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="windowType"/> is not of type <see cref="T:System.Windows.Window"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Unregister(System.Type)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="viewModelType">Type of the view model to unregister.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Unregister(System.String)">
            <summary>
            This unregisters the specified view model.
            </summary>
            <param name="name">Name of the registered window.</param>
            <returns>
            	<c>true</c> if the view model is unregistered; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(Catel.MVVM.IViewModel)">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(System.String,System.Object)">
            <summary>
            Shows a window that is registered with the specified name in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a non-modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            	<c>true</c> if the popup window is successfully opened; otherwise <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel)">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(System.String,System.Object)">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(Catel.MVVM.IViewModel,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModel"/> is <c>null</c>.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="viewModel"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})">
            <summary>
            Shows a window that is registered with the specified view model in a modal state.
            </summary>
            <param name="name">The name that the window is registered with.</param>
            <param name="data">The data to set as data context. If <c>null</c>, the data context will be untouched.</param>
            <param name="completedProc">The callback procedure that will be invoked as soon as the window is closed. This value can be <c>null</c>.</param>
            <returns>
            Nullable boolean representing the dialog result.
            </returns>
            <exception cref="T:System.ArgumentException">when <paramref name="name"/> is <c>null</c> or empty.</exception>
            <exception cref="T:Catel.MVVM.Services.WindowNotRegisteredException">when <paramref name="name"/> is not registered by the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Register(System.String,System.Type)"/> method first.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.Test.UIVisualizerService.ExpectedShowResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.Show(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})"/>
            method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.UIVisualizerService.ExpectedShowDialogResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.MVVM.Services.Test.UIVisualizerService.ShowDialog(System.String,System.Object,System.EventHandler{Catel.MVVM.Services.UICompletedEventArgs})"/>
            method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.ProcessServiceTestResult">
            <summary>
            Class representing the process result.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessServiceTestResult.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.ProcessServiceTestResult"/> class, with <c>0</c> as default process result code.
            </summary>
            <param name="result">if set to <c>true</c>, the process will succeed during the test.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessServiceTestResult.#ctor(System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.ProcessServiceTestResult"/> class.
            </summary>
            <param name="result">if set to <c>true</c>, the process will succeed during the test.</param>
            <param name="processResultCode">The process result code to return in case of a callback.</param>
        </member>
        <member name="P:Catel.MVVM.Services.Test.ProcessServiceTestResult.Result">
            <summary>
            Gets or sets a value indicating whether the process should be returned as successfull when running the process.
            </summary>
            <value><c>true</c> if the process should be returned as successfull; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.ProcessServiceTestResult.ProcessResultCode">
            <summary>
            Gets or sets the process result code.
            </summary>
            <value>The process result code.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.ProcessService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IProcessService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.ProcessService service = (Test.ProcessService)GetService<IProcessService>();
            
            // Queue the next expected result (next StartProcess will succeed to run app, 5 will be returned as exit code)
            service.ExpectedResults.Add(new ProcessServiceTestResult(true, 5));
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessService.StartProcess(System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessService.StartProcess(System.String,System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="M:Catel.MVVM.Services.Test.ProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments.
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="arguments">Command-line arguments to pass when starting the process.</param>
            <param name="processCompletedCallback">The process completed callback, invoked only when the process is started successfully and completed.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="fileName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">An error occurred when opening the associated file.</exception>
        </member>
        <member name="P:Catel.MVVM.Services.Test.ProcessService.ExpectedResults">
            <summary>
            Gets the queue of expected results for the <see cref="M:Catel.MVVM.Services.Test.ProcessService.StartProcess(System.String,System.String,Catel.MVVM.Services.ProcessCompletedDelegate)"/> method.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="T:Catel.Windows.DispatcherHelper">
            <summary>
            Helper to force a refresh for the WPF form/control
            </summary>
            <remarks>
            Refrence:
            http://social.msdn.microsoft.com/forums/en-US/wpf/thread/a2988ae8-e7b8-4a62-a34f-b851aaf13886#app_doevents
            </remarks>
        </member>
        <member name="M:Catel.Windows.DispatcherHelper.DoEvents">
            <summary>
            Processes all UI messages currently in the message queue.
            </summary>
        </member>
        <member name="T:Catel.Windows.AutoDisposeAttribute">
            <summary>
            Auto diposes the properties that have this attribute when the property is declared.
            </summary>
            <remarks>
            The attribute itself only defines itself, but has no real implementation. The supported object that allows
            to use this object should implement the actual disposing.
            </remarks>
        </member>
        <member name="T:Catel.Windows.AutoDisposeHelper">
            <summary>
            Auto dispose helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.EnableAutoDisposeProperties(System.Windows.FrameworkElement)">
            <summary>
            Registers the AutoDisposeProperties call to the Unloaded event of the given element.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.UnloadedWrapper(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the AutoDisposeProperties call.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.AutoDisposeProperties(System.Object)">
            <summary>
            Automatically disposes all properties of the object decorated with the <see cref="T:Catel.Windows.AutoDisposeAttribute"/>.
            </summary>
            <param name="obj">The object to dispose the properties of.</param>
        </member>
        <member name="M:Catel.Windows.AutoDisposeHelper.AutoDisposeObject(System.Object)">
            <summary>
            Automatically disposes an object. If the object is an enumerable, all childs are disposed.
            </summary>
            <param name="obj">The object to dispose.</param>
        </member>
        <member name="T:Catel.Windows.Documents.Sizes">
            <summary>
            Extension methods to calculate sizes.
            </summary>
        </member>
        <member name="M:Catel.Windows.Documents.Sizes.PointsToPixels(System.Double)">
            <summary>
            Convert number of points to number of pixels.
            </summary>
            <param name="value">Number of points.</param>
            <returns>Number of pixels.</returns>
        </member>
        <member name="M:Catel.Windows.Documents.Sizes.PixelsToPoints(System.Double)">
            <summary>
            Convert number of pixels to number of points.
            </summary>
            <param name="value">Number of pixels.</param>
            <returns>Number of points.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.IsSelectedValueConverter">
            <summary>
            Converts a selected value to either true of false.
            </summary>
            <remarks>
            This converter is very usefull when a mutual exclusive selection must be made
            Original code found at http://geekswithblogs.net/claraoscura/archive/2008/10/17/125901.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.IsSelectedValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter">
            <summary>
            Convert from string to <see cref="T:System.Windows.Visibility"/>. 
            If the string is not null or empty, Visibility.Visible will be returned. 
            If the string is null or empty, Visibility.Collapsed will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.EmptyStringToHidingVisibilityConverter">
            <summary>
            Convert from string to <see cref="T:System.Windows.Visibility"/>. 
            If the string is not null or empty, Visibility.Visible will be returned. 
            If the string is null or empty, Visibility.Hidden will be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.EmptyStringToHidingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.EmptyStringToHidingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.InfoBarMessageControlMode">
            <summary>
            The display mode for the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControlMode.Inline">
            <summary>
            Displays the control inline, which means all controls below are moved down a bit when the
            control becomes visible.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControlMode.Overlay">
            <summary>
            Displays the control as an overlay, which might lead to overlapping of existing controls.
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.InfoBarMessageControl">
            <summary>
            Control for displaying messages to the user.
            </summary>
            <remarks>
            A long, long, long time ago, the messages were hold in a dependency property (DP). However, even though DP values are
            not static, several instances that were open at the same time were still clearing eachother values (thus it seemed the
            DP behaves like it's a static member). Therefore, the messages are now hold in a field, and all problems are now gone.
            <para />
            And the control lived happily ever after.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.ElementMessageBar">
            <summary>
            The bar that will show the initial message bar.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.ModeProperty">
            <summary>
            DependencyProperty definition as the backing store for Mode.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.InfoMessageProperty">
            <summary>
            DependencyProperty definition as the backing store for InfoMessage.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.InfoBarMessageControl.MessageCountProperty">
            <summary>
            Definition of the dependency property is private.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is unloaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnModeChanged">
            <summary>
            Called when the <see cref="P:Catel.Windows.Controls.InfoBarMessageControl.Mode"/> property has changed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.SubscribeToEvents">
            <summary>
            Subscribes to events.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.UnsubscribeFromEvents">
            <summary>
            Unsubscribes from events.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.ClearObjectMessages(System.Object)">
            <summary>
            Clears the object messages for the specified binding object.
            </summary>
            <param name="bindingObject">The binding object.</param>
            <remarks>
            This method is implemented because of the DataContext issue (DataContext cannot be changed before a
            user control is loaded, and therefore might be binding to the wrong object).
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.IgnoreObject(System.Object)">
            <summary>
            Adds an object to the ignore list so this control does not show messages for the specified object any longer.
            </summary>
            <param name="bindingObject">The binding object.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnInfoBarMessageErrorValidation(System.Object,System.Windows.Controls.ValidationErrorEventArgs)">
            <summary>
            Handling data errors.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.OnInfoBarMessageValidation(System.Object,Catel.Windows.Controls.ValidationEventArgs)">
            <summary>
            Handling business data errors.
            </summary>
            <param name="sender">A sender.</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.GetBindingObject(System.Object)">
            <summary>
            Gets the binding object.
            </summary>
            <param name="bindingObject">The binding object.</param>
            <returns>object from the binding.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.ProcessValidationMessage(System.Object,System.String,Catel.Windows.Controls.ValidationEventAction,Catel.Windows.Controls.ValidationType)">
            <summary>
            Process an validation message.
            </summary>
            <param name="bindingObject">The binding object which will be used as key in dictionary with error messages. Allowed to be <c>null</c> if <see cref="F:Catel.Windows.Controls.ValidationEventAction.ClearAll"/>.</param>
            <param name="message">The actual warning or error message.</param>
            <param name="action">An error event action. See <see cref="T:System.Windows.Controls.ValidationErrorEventAction"/>.</param>
            <param name="type">The validation type.</param>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.UpdateMessages">
            <summary>
            Update the content of the control with the found warnings and errors.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.InfoBarMessageControl.UpdatesMessageCollection(System.Collections.ObjectModel.ObservableCollection{System.String},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{System.String}})">
            <summary>
            Updates a message collection by adding new messages and removing old ones that no longer exist.
            </summary>
            <param name="messageCollection">The message collection.</param>
            <param name="messageSource">The message source.</param>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.Mode">
            <summary>
            Gets or sets the mode in which the control is displayed.
            </summary>
            <value>The mode in which the control is displayed.</value>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.Text">
            <summary>
            Gets or sets the text to display when there are warnings and/or messages.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.InfoMessage">
            <summary>
            Info message for the info bar.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.MessageCount">
            <summary>
            Gets or sets MessageCount.
            </summary>
            <remarks>
            Wrapper for the MessageCount dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.WarningMessageCollection">
            <summary>
            Gets the warning message collection.
            </summary>
            <value>The warning message collection.</value>
            <remarks>
            This property is not defined as dependency property, since it seems to cause some issues when several windows/controls with
            this control are open at the same time (dependency properties seem to behave static, but they shouldn't).
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.InfoBarMessageControl.ErrorMessageCollection">
            <summary>
            Gets the error message collection.
            </summary>
            <value>The error message collection.</value>
            <remarks>
            This property is not defined as dependency property, since it seems to cause some issues when several windows/controls with
            this control are open at the same time (dependency properties seem to behave static, but they shouldn't).
            </remarks>
        </member>
        <member name="T:Catel.Windows.Controls.RichTextBoxExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Controls.RichTextBox"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichTextBoxExtensions.SetText(System.Windows.Controls.RichTextBox,System.String)">
            <summary>
            Sets the text of a <see cref="T:System.Windows.Controls.RichTextBox"/>. This method will replace
            any existing content.
            </summary>
            <param name="rtb"><see cref="T:System.Windows.Controls.RichTextBox"/> that should contain the text.</param>
            <param name="text">Text to set.</param>
        </member>
        <member name="M:Catel.Windows.Controls.RichTextBoxExtensions.GetText(System.Windows.Controls.RichTextBox)">
            <summary>
            Returns the text that a <see cref="T:System.Windows.Controls.RichTextBox"/> contains.
            </summary>
            <param name="rtb"><see cref="T:System.Windows.Controls.RichTextBox"/> that contains the text.</param>
            <returns>String containing the text of the <see cref="T:System.Windows.Controls.RichTextBox"/> control.</returns>
        </member>
        <member name="T:Catel.MVVM.Services.Test.SaveFileService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.ISaveFileService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.SaveFileService service = (Test.SaveFileService)GetService<ISaveFileService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(() =>
                         {
                           service.FileName = @"c:\test.txt";
                           return true;
                         });
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.SaveFileService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.OpenFileService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.SaveFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns>
            	<c>true</c> if a file is selected; otherwise <c>false</c>.
            </returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.Test.SaveFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Catel.MVVM.Services.Test.SaveFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="T:Catel.MVVM.EventToCommand">
            <summary>
            Class to convert a routed event to a command.
            </summary>
            <remarks>
            This class is based on the implementation of the <c>EventToCommand</c> class that can be found
            in the MVVM Light Toolkit (see http://mvvmlight.codeplex.com/).
            <para />
            Since Windows Phone 7 does not support binding to objects, the properties implemented are of type Binding
            and will be set in the variables holding the actual values. The WPF and Silverlight version will directly
            update the variables.
            <para />
            Because of the Windows Phone 7 code, this class might look very complex, but in the end it is not. For Windows
            Phone 7, a special BindingListener class is used to listen to binding changes. So, instead of directly using the
            values of this class, the binding is setto the BindingListener which will give this class an update (this in fact
            only an intermediate class (the BindingListener) is required for Windows Phone 7.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.EventToCommand"/> class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.EventToCommand.DisableAssociatedObjectOnCannotExecuteProperty">
            <summary>
            DependencyProperty definition as the backing store for DisableAssociatedObjectOnCannotExecute.
            </summary>
        </member>
        <member name="F:Catel.MVVM.EventToCommand.CommandProperty">
            <summary>
            DependencyProperty definition as the backing store for Command.
            </summary>
        </member>
        <member name="F:Catel.MVVM.EventToCommand.CommandParameterProperty">
            <summary>
            DependencyProperty definition as the backing store for CommandParameter.
            </summary>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.OnDisableAssociatedObjectOnCannotExecuteChanged(System.Boolean)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.EventToCommand.DisableAssociatedObjectOnCannotExecute"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.OnCommandChanged(System.Windows.Input.ICommand)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.EventToCommand.Command"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.OnCommandParameterChanged(System.Object)">
            <summary>
            Called when the <see cref="P:Catel.MVVM.EventToCommand.CommandParameter"/> property has changed.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.OnCommandCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the <c>CanExecute</c> state of a command has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.Invoke">
            <summary>
            Invokes the action without any parameter.
            </summary>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.IsAssociatedObjectDisabled">
            <summary>
            Checks whether the associated object is disabled or not.
            </summary>
            <returns><c>true</c> if the associated object is disabled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.UpdateElementState">
            <summary>
            Updates the state of the associated element.
            </summary>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.OnAttached">
            <summary>
            Called when this trigger is attached to a <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.EventToCommand.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="P:Catel.MVVM.EventToCommand.PassEventArgsToCommand">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.EventArgs"/> passed to the event handler
            should be passed to the command as well.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.EventArgs"/> passed to the event handler should be passed to the command; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.MVVM.EventToCommand.DisableAssociatedObjectOnCannotExecute">
            <summary>
            Gets or sets a value indicating whether the associated object should be disabled when the command
            cannot be executed.
            </summary>
            <remarks>
            Wrapper for the DisableAssociatedObjectOnCannotExecute dependency property.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.EventToCommand.Command">
            <summary>
            Gets or sets the associated Command.
            </summary>
            <remarks>
            Wrapper for the Command dependency property.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.EventToCommand.CommandParameter">
            <summary>
            Gets or sets the command parameter.
            </summary>
            <remarks>
            Wrapper for the CommandParameter dependency property.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Media.Effects.EmptyEffect.EmptyEffect">
            <summary>
            Empty effect that simply copies the pixel color (so it doesn't make ANY changes to pixels).
            </summary>
            <remarks>
            Implemented to be able to disable pixel shaders in Catel.
            <para />
            During the build of Catel, this pixel shader effect will not be recompiled to prevent all users to install the
            DirectX SDK. If you want to make changes, take a look at the readme of Catel.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Media.Effects.EmptyEffect.EmptyEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Media.Effects.EmptyEffect.EmptyEffect"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.EmptyEffect.EmptyEffect.CreatePixelShader">
            <summary>
            Creates the pixel shader.
            </summary>
            <returns><see cref="T:System.Windows.Media.Effects.PixelShader"/>.</returns>
        </member>
        <member name="T:Ricciolo.StylesExplorer.MarkupReflection.BamlFile">
            <summary>
            Rappresenta un singole file Baml all'interno di un assembly
            </summary>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.BamlFile.LoadContent">
            <summary>
            Carica il Baml attraverso il motore di WPF con Application.LoadComponent
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.BamlFile.Stream">
            <summary>
            Restituisce lo stream originale contenente il Baml
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.BamlFile.Uri">
            <summary>
            Restituisce l'indirizzo secondo lo schema pack://
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.TipOfTheDayData">
            <summary>
            Class that shows a tip of the day.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.TipOfTheDayData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.TipOfTheDayData"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.TipOfTheDayData.Load">
            <summary>
            Loads a TipOfTheDay from a file.
            </summary>
            <returns>TipOfTheDay object.</returns>
        </member>
        <member name="M:Catel.Windows.Data.TipOfTheDayData.Save">
            <summary>
            Saves the current instance of this data object.
            </summary>
            <returns>True if save was successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.Data.TipOfTheDayData.UpdateToShowList">
            <summary>
            Updates the list that contains the to show tips.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.TipOfTheDayData.GetNextTip">
            <summary>
            Gets the next tip index when the tips should occur randomly.
            </summary>
            <returns>Index of the next tip or -1 if there are no tips.</returns>
        </member>
        <member name="P:Catel.Windows.Data.TipOfTheDayData.Tips">
            <summary>
            Gets the list of tips.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.TipOfTheDayItem">
            <summary>
            Class that represents a single TipOfTheDay element.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.TipOfTheDayItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.TipOfTheDayItem"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.TipOfTheDayItem.Clone">
            <summary>
            Clones the object
            </summary>
            <returns>New object</returns>
        </member>
        <member name="M:Catel.Windows.Data.TipOfTheDayItem.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Catel.Windows.Data.TipOfTheDayItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Catel.Windows.Data.TipOfTheDayItem.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="E:Catel.Windows.Data.TipOfTheDayItem.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.BindingHelper">
            <summary>
            Binding helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.BindingHelper.GetBindingValue(System.Windows.FrameworkElement,System.Windows.Data.BindingBase)">
            <summary>
            Gets the binding value.
            </summary>
            <param name="frameworkElement">The dependency object.</param>
            <param name="binding">The binding.</param>
            <returns>The actual binding value.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="frameworkElement"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="binding"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.BindingHelper.ClearBinding(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears a binding. This method implements the ClearBinding for both WPF and Silverlight.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dependencyProperty">The dependency property.</param>
        </member>
        <member name="T:Catel.Windows.Data.Converters.CollapsingVisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            <para/>
            This converter returns <see cref="F:System.Windows.Visibility.Collapsed"/> when a non-visible state should be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.CollapsingVisibilityConverterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.CollapsingVisibilityConverterBase"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.HidingVisibilityConverterBase">
            <summary>
            A base class that makes it easier to create values to visibility converters.
            <para/>
            This converter returns <see cref="F:System.Windows.Visibility.Hidden"/> when a non-visible state should be returned.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.HidingVisibilityConverterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.HidingVisibilityConverterBase"/> class.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToGrayscaleConverter">
            <summary>
            Converts a boolean to a grayscale saturation value. If the input is <c>false</c>, this converter will
            return <c>0</c>, otherwise <c>1</c>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToGrayscaleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToGrayscaleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.TipOfTheDayItemEditorWindow">
            <summary>
            Interaction logic for TipOfTheDayItemEditorWindow.xaml
            </summary>
            <summary>
            TipOfTheDayItemEditorWindow
            </summary>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayItemEditorWindow.#ctor(Catel.Windows.Data.TipOfTheDayItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.TipOfTheDayItemEditorWindow"/> class.
            </summary>
            <param name="tipOfTheDay">The tip of the day.</param>
        </member>
        <member name="F:Catel.Windows.TipOfTheDayItemEditorWindow.TipOfTheDayPropertyKey">
            <summary>
            Definition of the dependency property is private.
            </summary>
        </member>
        <member name="F:Catel.Windows.TipOfTheDayItemEditorWindow.TipOfTheDayProperty">
            <summary>
            Read-only dependencyProperty definition as the backing store for TipOfTheDay.
            </summary>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayItemEditorWindow.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayItemEditorWindow.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayItemEditorWindow.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayItemEditorWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.TipOfTheDayItemEditorWindow.TipOfTheDay">
            <summary>
            Gets or sets TipOfTheDay.
            </summary>
            <remarks>
            Wrapper for the TipOfTheDay dependency property.
            </remarks>
        </member>
        <member name="T:Catel.Windows.TipOfTheDayEditorWindow">
            <summary>
            Interaction logic for TipOfTheDayEditorWindow.xaml
            </summary>
            <summary>
            TipOfTheDayEditorWindow
            </summary>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.TipOfTheDayEditorWindow"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.TipOfTheDayEditorWindow.TipOfTheDayPropertyKey">
            <summary>
            Definition of the dependency property is private.
            </summary>
        </member>
        <member name="F:Catel.Windows.TipOfTheDayEditorWindow.TipOfTheDayProperty">
            <summary>
            Read-only dependencyProperty definition as the backing store for TipOfTheDay.
            </summary>
        </member>
        <member name="F:Catel.Windows.TipOfTheDayEditorWindow.SelectedTipOfTheDayProperty">
            <summary>
            DependencyProperty definition as the backing store for SelectedTipOfTheDay.
            </summary>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Add_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the Add command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Add_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the Add command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Edit_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the Edit command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Edit_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the Edit command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Remove_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the Remove command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Remove_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the Remove command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Preview_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the Preview command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Preview_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the Preview command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Save_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the Save command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Save_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the Save command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Close_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the Close command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.Close_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the Close command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayEditorWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.TipOfTheDayEditorWindow.TipOfTheDay">
            <summary>
            Gets or sets TipOfTheDay.
            </summary>
            <remarks>
            Wrapper for the TipOfTheDay dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.TipOfTheDayEditorWindow.SelectedTipOfTheDay">
            <summary>
            Gets or sets SelectedTipOfTheDay.
            </summary>
            <remarks>
            Wrapper for the SelectedTipOfTheDay dependency property.
            </remarks>
        </member>
        <member name="T:Catel.Windows.MultiLineInputWindow">
            <summary>
            Window that contains a <see cref="T:Catel.Windows.Controls.MultiLineInput"/> control so the user is able
            to edit a multiline text value.
            </summary>
            <summary>
            MultiLineInputWindow
            </summary>
        </member>
        <member name="M:Catel.Windows.MultiLineInputWindow.#ctor">
            <summary>
            Initializes a new instance of this window.
            </summary>
        </member>
        <member name="F:Catel.Windows.MultiLineInputWindow.ExplanationProperty">
            <summary>
            DependencyProperty definition as the backing store for Explanation.
            </summary>
        </member>
        <member name="F:Catel.Windows.MultiLineInputWindow.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="F:Catel.Windows.MultiLineInputWindow.IsTextMandatoryProperty">
            <summary>
            DependencyProperty definition as the backing store for IsTextMandatory.
            </summary>
        </member>
        <member name="M:Catel.Windows.MultiLineInputWindow.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.MultiLineInputWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.MultiLineInputWindow.Explanation">
            <summary>
            Gets or sets Explanation (textbox caption).
            </summary>
            <remarks>
            Wrapper for the Explanation dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.MultiLineInputWindow.Text">
            <summary>
            Gets or sets Text.
            </summary>
            <remarks>
            Wrapper for the Text dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.MultiLineInputWindow.IsTextMandatory">
            <summary>
            Gets or sets IsTextMandatory.
            </summary>
            <remarks>
            Wrapper for the IsTextMandatory dependency property.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Documents.DataFormats">
            <summary>
            DataFormats helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Documents.DataFormats.GetDataFormat(System.String)">
            <summary>
            Returns the DataFormat string of the text.
            </summary>
            <param name="text">Text to check.</param>
            <returns>Value from the <see cref="T:Catel.Windows.Documents.DataFormats"/> enumeration.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.StringToIntConverter">
            <summary>
            Convert string value to int.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.StringToIntConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert a string to int value. 
            </summary>
            <param name="value">string are supported.</param>
            <param name="targetType">Only int? is supported.</param>
            <param name="parameter">Not supported.</param>
            <param name="culture">Not supported.</param>
            <returns>When value is not an int the targetValue will be null on construction.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.StringToIntConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method isn't supported.
            </summary>
            <param name="value">Not used.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>Always null.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.OutputTypeConverter">
            <summary>
            Converts an output type to a status that is displayable to the user.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.OutputTypeConverter.AssemblyName">
            <summary>
            Assembly name of the assembly containing the images.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.OutputTypeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts an output type to a user control object that can be shown to the user.
            </summary>
            <param name="value"><see cref="T:System.Diagnostics.TraceLevel"/>.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
            <returns>UI presentation of the trace level.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.OutputTypeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not supported.
            </summary>
            <param name="value">Not used.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter">Not used.</param>
            <param name="culture">Not used.</param>
        </member>
        <member name="T:Catel.Windows.Controls.ToggleRadioButton">
            <summary>
            Interaction logic for ToggleRadioButton.xaml
            </summary>
            <summary>
            ToggleRadioButton
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ToggleRadioButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.ToggleRadioButton"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ToggleRadioButton.GivenAnswerProperty">
            <summary>
            DependencyProperty definition as the backing store for GivenAnswer
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ToggleRadioButton.TextCaptionProperty">
            <summary>
            DependencyProperty definition as the backing store for TextCaption
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ToggleRadioButton.TextCaptionYesProperty">
            <summary>
            DependencyProperty definition as the backing store for TextCaptionYes
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.ToggleRadioButton.TextCaptionNoProperty">
            <summary>
            DependencyProperty definition as the backing store for TextCaptionNo
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ToggleRadioButton.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.ToggleRadioButton.GivenAnswer">
            <summary>
            Wrapper for the GivenAnswer dependency property
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.ToggleRadioButton.TextCaption">
            <summary>
            Wrapper for the TextCaption dependency wrapper
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.ToggleRadioButton.TextCaptionYes">
            <summary>
            Wrapper for the TextCaptionYes dependency wrapper
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.ToggleRadioButton.TextCaptionNo">
            <summary>
            Wrapper for the TextCaptionNo dependency wrapper
            </summary>
        </member>
        <member name="T:Catel.Windows.Controls.AnimatedGif">
            <summary>
            User control supporting animated gif.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.AnimatedGif.GifSourceProperty">
            <summary>
            DependencyProperty definition as the backing store for GifSource.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.GifSource_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the GifSource dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.SetImageGifSource">
            <summary>
            Sets the image gif source.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.GetBitmapResourceFromAssembly(System.Reflection.Assembly)">
            <summary>
            Gets the bitmap resource from a specific assembly.
            </summary>
            <param name="assemblyToSearch">The assembly to search.</param>
            <returns><see cref="T:System.Drawing.Bitmap"/> or null if resource is not found.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.OnFrameChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a frame has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.OnFrameChangedInMainThread">
            <summary>
            Called when a frame changed in the main thread.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.AnimatedGif.GetBitmapSource(System.Drawing.Bitmap)">
            <summary>
            Gets the bitmap source.
            </summary>
            <param name="gdiBitmap">The GDI bitmap.</param>
            <returns></returns>
        </member>
        <member name="P:Catel.Windows.Controls.AnimatedGif.IsAnimating">
            <summary>
            Gets or sets a value indicating whether this instance is animating.
            </summary>
            <value>
            	<c>true</c> if this instance is animating; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.Controls.AnimatedGif.CurrentFrame">
            <summary>
            Gets or sets the current frame.
            </summary>
            <value>The current frame.</value>
        </member>
        <member name="P:Catel.Windows.Controls.AnimatedGif.GifSource">
            <summary>
            Gets or sets GifSource.
            </summary>
            <remarks>
            Wrapper for the GifSource dependency property.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Controls.AnimatedGif.OnFrameChangedDelegate">
            <summary>
            OnFrameChanged delegate.
            </summary>
        </member>
        <member name="T:Catel.MVVM.ViewModelBase">
            <summary>
            View model base for MVVM implementations. This class is based on the <see cref="T:Catel.Data.DataObjectBase"/>, and supports all
            common interfaces.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class with support for <see cref="T:System.ComponentModel.IEditableObject"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            </summary>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">when a mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">when a mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows services to be injected. When <param name="services"/> contains any elements, the
            <see cref="M:Catel.MVVM.ViewModelBase.RegisterViewModelServices(Catel.IoC.IIoCProvider)"/> method is not invoked.
            </summary>
            <param name="services">Dictionary of services to register.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">when a mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">when a mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Object},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows services to be injected. When <param name="services"/> contains any elements, the
            <see cref="M:Catel.MVVM.ViewModelBase.RegisterViewModelServices(Catel.IoC.IIoCProvider)"/> method is not invoked.
            </summary>
            <param name="services">Dictionary of services to register.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">when a mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">when a mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.#ctor(System.Collections.Generic.Dictionary{System.Type,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.ViewModelBase"/> class.
            <para/>
            This constructor allows services to be injected. When <param name="services"/> contains any elements, the
            <see cref="M:Catel.MVVM.ViewModelBase.RegisterViewModelServices(Catel.IoC.IIoCProvider)"/> method is not invoked.
            </summary>
            <param name="services">Dictionary of services to register.</param>
            <param name="supportIEditableObject">if set to <c>true</c>, the view model will natively support models that
            implement the <see cref="T:System.ComponentModel.IEditableObject"/> interface.</param>
            <param name="ignoreMultipleModelsWarning">if set to <c>true</c>, the warning when using multiple models is ignored.</param>
            <exception cref="T:Catel.MVVM.ModelNotRegisteredException">when a mapped model is not registered.</exception>
            <exception cref="T:Catel.MVVM.PropertyNotFoundInModelException">when a mapped model property is not found.</exception>
        </member>
        <member name="M:Catel.MVVM.ViewModelBase.RegisterViewModelServices(Catel.IoC.IIoCProvider)">
            <summary>
            Registers the known view model services.
            </summary>
            <param name="iocProvider">The IoC provider.</param>
        </member>
        <member name="T:Catel.Windows.LoaderAnimation">
            <summary>
            Contains a loader animation for the WaitWindow
            </summary>
            <summary>
            LoaderAnimation
            </summary>
        </member>
        <member name="M:Catel.Windows.LoaderAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.LoaderAnimation"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.LoaderAnimation.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Catel.Windows.ApplicationExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Windows.Application"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.ApplicationExtensions.GetActiveWindow(System.Windows.Application)">
            <summary>
            Gets the currently active window of the application.
            </summary>
            <param name="application">The application.</param>
            <returns>
            The active window of the application or null in case of none window is opened.
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.DropDownButton">
            <summary>
            DropDownButton, which is unfortunately missing in the controls library of WPF.
            </summary>
            <remarks>
            The code for this control is based on the code found at http://andyonwpf.blogspot.com/2006/10/dropdownbuttons-in-wpf.html.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.DropDownButton"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.DropDownButton.DropDownContentProperty">
            <summary>
            DependencyProperty definition as the backing store for DropDownContent.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.OnDropDownContentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when the DropDownContent dependency property has changed.
            </summary>
            <param name="sender">The object that contains the dependency property.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.OnPopupLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the popup has lost its focus.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.OnDispatcherTimerTick(System.Object,System.EventArgs)">
            <summary>
            Called when the dispatcher timer has invoked the tick event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.OnClick">
            <summary>
            Called when a control is clicked by the mouse or the keyboard.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.DropDownButton.ResetTimer">
            <summary>
            Resets the timer.
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.DropDownButton.DropDownContent">
            <summary>
            Gets or sets DropDownContent.
            </summary>
            <remarks>
            Wrapper for the DropDownContent dependency property.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Properties.TraceMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.AttachThreadInputFailed">
            <summary>
              Looks up a localized string similar to Failed to attach to input thread (Win32 code &apos;{0}&apos;).
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.AutomaticallyRegisteredViewModel">
            <summary>
              Looks up a localized string similar to Registered view model &apos;{0}&apos; with &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CannotFindStyleDefinitionCreatingForwarder">
            <summary>
              Looks up a localized string similar to Couln&apos;t find style definition for &apos;{0}&apos;, creating style forwarder.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CannotSetOwnerWindowToItself">
            <summary>
              Looks up a localized string similar to Cannot set owner window to itself, no owner window set.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CannotTransferValueFromControlToViewModelBecauseViewModelIsNull">
            <summary>
              Looks up a localized string similar to Cannot transfer value from Control to ViewModel because ViewModel is null.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CannotTransferValueFromViewModelToControlBecauseViewModelIsNull">
            <summary>
              Looks up a localized string similar to Cannot transfer value from ViewModel to Control because ViewModel is null.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CastFailed">
            <summary>
              Looks up a localized string similar to Failed to cast &apos;{0}&apos; to an object of type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ClearedAllWarningsAndErrorsOfObject">
            <summary>
              Looks up a localized string similar to Cleared all warnings and errors caused by &apos;{0}&apos; since this is caused by a DataContext issue in the .NET Framework.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ClosableParentFoundThusUsingClosedEvent">
            <summary>
              Looks up a localized string similar to Found closable parent ({0}), using the Closed event instead of the Unloaded event of the control itself to clean up.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CloseApplicationFailed">
            <summary>
              Looks up a localized string similar to Failed to close application &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CompletingStyleInfo">
            <summary>
              Looks up a localized string similar to Completing the style info for &apos;{0}&apos; with the additional info from the default style definition.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ConfiguredIoCContainerViaConfigurationFile">
            <summary>
              Looks up a localized string similar to Configured IoC container via configuration file.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ConfiguringIoCContainerViaConfigurationFile">
            <summary>
              Looks up a localized string similar to Configuring IoC container via configuration file.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ConstructedUserControl">
            <summary>
              Looks up a localized string similar to Constructed user control &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ConstructingUserControl">
            <summary>
              Looks up a localized string similar to Constructing user control &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ConverterParameterIsNullSoDefaultIsUsed">
            <summary>
              Looks up a localized string similar to Converter parameter cannot be null, default value &apos;{0}&apos; will be used.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CouldNotFindGenericDefinition">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find the generic definition for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CouldNotResolveType">
            <summary>
              Looks up a localized string similar to Could not resolve type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CouldNotSplitStyleToDetermineTypeOfBasedOnAttribute">
            <summary>
              Looks up a localized string similar to Could not split &apos;{0}&apos; for style &apos;{1}&apos; to determine the type of the &apos;BasedOn&apos; attribute.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.CreatedControlToViewModelMapping">
            <summary>
              Looks up a localized string similar to Created a &apos;{0}&apos; control to viewmodel mapping from &apos;{1}&apos; to &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.DefaultHandlerForHttpNotRegistered">
            <summary>
              Looks up a localized string similar to Default handler for http-scheme not valid in Windows.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.DependencyPropertyFieldNotFound">
            <summary>
              Looks up a localized string similar to DependencyProperty field &apos;{0}&apos; not found on &apos;{1}&apos;, not using the right naming convention?.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.DeserializationFailed">
            <summary>
              Looks up a localized string similar to Failed to deserialize object &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.DetachThreadInputFailed">
            <summary>
              Looks up a localized string similar to Failed to detach from input thread.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.DisabledHardwareAcceleration">
            <summary>
              Looks up a localized string similar to Disabled hardware acceleration for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.DisconnectEnumerableFailed">
            <summary>
              Looks up a localized string similar to Failed to disconnect all items inside an IEnumerable.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.EnableValidationOnBindingFailed">
            <summary>
              Looks up a localized string similar to Failed to enable the validation for the binding on &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.EnsureApplicationResourcesFailed">
            <summary>
              Looks up a localized string similar to Failed to ensure application resources.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToAddDefaultStyleToDefaultStylesList">
            <summary>
              Looks up a localized string similar to Failed to add a default style (&apos;{0}&apos;) definition to the list of styles.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToCompleteStyle">
            <summary>
              Looks up a localized string similar to Failed to complete the style for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToConfigureIoCContainer">
            <summary>
              Looks up a localized string similar to Failed to configure IoC container.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToCreateStyleForwarder">
            <summary>
              Looks up a localized string similar to Failed to create style forwarder for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToDetectViewModelServicesAutomatically">
            <summary>
              Looks up a localized string similar to Failed to detect the view model services automatically.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToDisableHardwareAcceleration">
            <summary>
              Looks up a localized string similar to Failed to disabled hardware acceleration because visual &apos;{0}&apos; does not yet have a handle.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToFindFrameworkElementWhereStyleIsBasedOn">
            <summary>
              Looks up a localized string similar to Failed to find the framework element where style &apos;{0}&apos; is based on.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToGetTypesOfAssembly">
            <summary>
              Looks up a localized string similar to Failed to get the types of assembly &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToGetValueAsDependencyProperty">
            <summary>
              Looks up a localized string similar to Failed to get the field value of &apos;{0}&apos; on &apos;{1}&apos; as DependencyProperty object, probably the wrong type (not DependencyProperty) or value is actually null.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToInvokeOnPropertyChanged">
            <summary>
              Looks up a localized string similar to Failed to invoke OnPropertyChanged.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToRegisterType">
            <summary>
              Looks up a localized string similar to Failed to register type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToStartProcess">
            <summary>
              Looks up a localized string similar to Failed to start process to open &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FailedToTransferValueForControlToViewModelMapping">
            <summary>
              Looks up a localized string similar to Failed to transfer value from control property &apos;{0}&apos; to the view model property &apos;{1}&apos; for the ControlToViewModelMapping.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FocusElementFailed">
            <summary>
              Looks up a localized string similar to Failed to focus element &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FocusNextElementFailed">
            <summary>
              Looks up a localized string similar to Failed to focus next focusable element.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FocusParentFailed">
            <summary>
              Looks up a localized string similar to Failed to focus parent &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ForcingHardwareRenderingForPixelShader">
            <summary>
              Looks up a localized string similar to Forcing hardware rendering for pixel shader &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ForcingSoftwareRenderingForPixelShader">
            <summary>
              Looks up a localized string similar to Forcing software rendering for pixel shader &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.FoundParentViewModelContainer">
            <summary>
              Looks up a localized string similar to Found the parent view model container &apos;{0}&apos; for &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.HardwareAccelerationCannotBeDisabledYet">
            <summary>
              Looks up a localized string similar to Hardware acceleration cannot yet be turned off for visual &apos;{0}&apos;, but will be as soon as the visual is loaded.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.HidingPleaseWaitWindow">
            <summary>
              Looks up a localized string similar to Hiding please wait window.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.IgnoredPropertyChangedEventForControl">
            <summary>
              Looks up a localized string similar to Ignored property changed event for Control.&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.IgnoredPropertyChangedEventForViewModel">
            <summary>
              Looks up a localized string similar to Ignored property changed event for ViewModel.&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.IgnoringNextPropertyChangedEventForControlProperty">
            <summary>
              Looks up a localized string similar to Ignore next property changed event for Control.&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.IgnoringNextPropertyChangedEventForViewModelProperty">
            <summary>
              Looks up a localized string similar to Ignore next property changed event for ViewModel.&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.InitializedViewModel">
            <summary>
              Looks up a localized string similar to Initialized view model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.InitializedViewModelContainer">
            <summary>
              Looks up a localized string similar to Initialized view model container to manage ControlToViewModel mappings.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.InitializingViewModel">
            <summary>
              Looks up a localized string similar to Initializing view model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.InitializingViewModelContainer">
            <summary>
              Looks up a localized string similar to Initializing view model container to manage ControlToViewModel mappings.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.InvalidPixelShaderEncountered">
            <summary>
              Looks up a localized string similar to Invalid PixelShader Encountered. Occurs when the render thread cannot process the pixel shader..
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.LoadTextFailed">
            <summary>
              Looks up a localized string similar to Failed to load text.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.MethodInvokeFailed">
            <summary>
              Looks up a localized string similar to Failed to invoke method &apos;{0}&apos; on object &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.NoClosableParentFoundThusUsingUnloadedEvent">
            <summary>
              Looks up a localized string similar to No closable parent found, using the Unloaded event of the control itself to clean up, which is buggy.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.NoConstructorWithViewModelInjectionFound">
            <summary>
              Looks up a localized string similar to No constructor with view model (of type &apos;{0}&apos;) injection found, trying default constructor.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.NoInfoBarMessageControlIsFoundConsiderUsingSkipSearchingForInfoBarMessageControlProperty">
            <summary>
              Looks up a localized string similar to No InfoBarMessageControl is found in the visual tree of &apos;{0}&apos;, consider using the SkipSearchingForInfoBarMessageControl property to improve performance.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.NoInjectionOrDefaultConstructorFoundForWindow">
            <summary>
              Looks up a localized string similar to Window &apos;{0}&apos; does not have an injection or default constructor, does cannot be constructed.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.NotFoundParentViewModelContainer">
            <summary>
              Looks up a localized string similar to Couldn&apos;t find parent view model container.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ObjectIsInIgnoreListThusMessagesWillNotBeHandled">
            <summary>
              Looks up a localized string similar to object &apos;{0}&apos; is in the ignore list, thus messages will not be handled.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.OnLoadedInObject">
            <summary>
              Looks up a localized string similar to OnLoaded in &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.OnUnloadedInObject">
            <summary>
              Looks up a localized string similar to OnUnloaded in &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ParentViewModelIsCanceledThusCancelingViewModelToo">
            <summary>
              Looks up a localized string similar to Parent view model &apos;{0}&apos; is canceled, cancelling view model &apos;{1}&apos; as well.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ParentViewModelIsSavedThusSavingViewModel">
            <summary>
              Looks up a localized string similar to Parent view model &apos;{0}&apos; is saved, saving view model &apos;{1}&apos; as well.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ParseFailed">
            <summary>
              Looks up a localized string similar to Failed to parse &apos;{0}&apos; as &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.PathConversionFailed">
            <summary>
              Looks up a localized string similar to Failed to convert path &apos;{0}&apos; to a folder name.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.PixelShadersAreDisabled">
            <summary>
              Looks up a localized string similar to Pixel shaders are disabled, using default one that is safe.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ProcessValidationCannotHandleNullValues">
            <summary>
              Looks up a localized string similar to Null-values are not allowed when not using ValidationEventAction.ClearAll.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.PropertyDecoratedWithControlToViewModelAttribute">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; is decorated with the ControlToViewModelAttribute, creating a mapping.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.RegisteredAllDataWindowImplementationsAutomatically">
            <summary>
              Looks up a localized string similar to Registered all DataWindow&lt;TViewModel&gt; implementations automatically.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.RegisteredDefaultServiceImplementationsForIoCContainer">
            <summary>
              Looks up a localized string similar to Registered default service implementations for IoC container.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.RegisteredViewModelInUIVisualizerService">
            <summary>
              Looks up a localized string similar to Registered view model &apos;{0}&apos; in combination with &apos;{1}&apos; in the UIVisualizerService.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.RegisteringAllDataWindowImplementationsAutomatically">
            <summary>
              Looks up a localized string similar to Registering all DataWindow&lt;TViewModel&gt; implementations automatically.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.RegisteringDefaultServiceImplementationsForIoCContainer">
            <summary>
              Looks up a localized string similar to Registering default service implementations for IoC container.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.RestoringDataContext">
            <summary>
              Looks up a localized string similar to Restoring data context binding to &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.RetrieveGrabberInformationFailed">
            <summary>
              Looks up a localized string similar to Failed to retrieve the grabber information. Tried {0} times.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.SearchingForInfoBarMessageControl">
            <summary>
              Looks up a localized string similar to Searching for an instance of the InfoBarMessageControl.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ShowingPleaseWaitWindow">
            <summary>
              Looks up a localized string similar to Showing please wait window.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.SkippingSearchForInfoBarMessageControl">
            <summary>
              Looks up a localized string similar to Skipping the search for an instance of the InfoBarMessageControl.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.StoppedIgnoringNextPropertyChangedEventForControlProperty">
            <summary>
              Looks up a localized string similar to No longer ignoring next property changed event for Control.&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.StoppedIgnoringNextPropertyChangedEventForViewModelProperty">
            <summary>
              Looks up a localized string similar to No longer ignoring next property changed event for ViewModel.&apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.StyleDoesNotHaveBasedOnAttributeDefined">
            <summary>
              Looks up a localized string similar to Style &apos;{0}&apos; does not have the &apos;BasedOn&apos; attribute defined.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.StyleIsBasedOnType">
            <summary>
              Looks up a localized string similar to Style &apos;{0}&apos; is based on type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.SubscribedToParentViewModel">
            <summary>
              Looks up a localized string similar to Subscribed to parent view model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.SubscribedToRealDataContextViaDependencyProperty">
            <summary>
              Looks up a localized string similar to Subscribed to real DataContext via dependency property &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.SubscribedToRealDataContextViaINotifyPropertyChanged">
            <summary>
              Looks up a localized string similar to Subscribed to real DataContext via INotifyPropertyChanged.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.SubscribeEventFailed">
            <summary>
              Looks up a localized string similar to Failed to subscribe to event &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.SuccessfullyResolvedType">
            <summary>
              Looks up a localized string similar to Successfully resolved type &apos;{0}&apos; as &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.TransferredValue">
            <summary>
              Looks up a localized string similar to Transferred value successfully.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.TransferringValue">
            <summary>
              Looks up a localized string similar to Transferring value of {0}.{1} to {2}.{3}.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.TypeIsNotAFrameworkElementType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not a FrameworkElement type, thus cannot be used.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.UninitializedViewModel">
            <summary>
              Looks up a localized string similar to Uninitialized view model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.UninitializedViewModelContainer">
            <summary>
              Looks up a localized string similar to Uninitialized view model container to manage ControlToViewModel mappings.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.UninitializingViewModel">
            <summary>
              Looks up a localized string similar to Uninitializing view model &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.UninitializingViewModelContainer">
            <summary>
              Looks up a localized string similar to Uninitializing view model container to manage ControlToViewModel mappings.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.UnregisteredViewModelInUIVisualizerService">
            <summary>
              Looks up a localized string similar to Unregistered view model &apos;{0}&apos; in UIVisualizerService.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.UnsubscribedFromParentViewModel">
            <summary>
              Looks up a localized string similar to Unsubscribed from parent view model.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.UnsubscribedFromRealDataContextViaDependencyProperty">
            <summary>
              Looks up a localized string similar to Unsubscribed from real DataContext via dependency property &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.UnsubscribedFromRealDataContextViaINotifyPropertyChanged">
            <summary>
              Looks up a localized string similar to Unsubscribed from real DataContext via INotifyPropertyChanged.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.UpdatedDataContextViaDispatcher">
            <summary>
              Looks up a localized string similar to Updated DataContext to use the view model via dispatcher.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.UpdatingDataContextViaDispatcher">
            <summary>
              Looks up a localized string similar to Updating DataContext via dispatcher because control is already loaded, but no DataContext was provided initially.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ViewModelAutomaticallyConstructedByDataContextChange">
            <summary>
              Looks up a localized string similar to View model &apos;{0}&apos; is automatically constructed by DataContext change.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ViewModelNotAutomaticallyConstructedByDataContextChange">
            <summary>
              Looks up a localized string similar to Cannot create view model &apos;{0}&apos; automatically by the DataContext change.
            </summary>
        </member>
        <member name="P:Catel.Windows.Properties.TraceMessages.ViewModelNotAutomaticallyConstructedByDataContextChangeBecauseThereIsNoConstructor">
            <summary>
              Looks up a localized string similar to Cannot create view model &apos;{0}&apos; automatically by the DataContext change because there is no constructor with type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="T:Catel.Windows.DataWindowButton">
            <summary>
            Information for a button that should be generated.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="execute">The execute delegate.</param>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="execute">The execute delegate.</param>
            <param name="canExecute">The can execute delegate.</param>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.Windows.Input.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="command">The command.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="command"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.DataWindowButton.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindowButton"/> class.
            </summary>
            <param name="text">The text.</param>
            <param name="bindingPath">The binding path expression of the command to bind to.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="bindingPath"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.Text">
            <summary>
            Gets the text as it is displayed on the button.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.Command">
            <summary>
            Gets the command associated with this button.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.CommandBindingPath">
            <summary>
            Gets the command binding path.
            </summary>
            <value>The command binding path.</value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.IsDefault">
            <summary>
            Gets or sets a value indicating whether this button is the default button.
            </summary>
            <value>
            	<c>true</c> if this button is the default button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Catel.Windows.DataWindowButton.IsCancel">
            <summary>
            Gets or sets a value indicating whether this button is the cancel button.
            </summary>
            <value>
            	<c>true</c> if this button is the cancel button; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Catel.Windows.VisualExtensions">
            <summary>
            Extensions for the <see cref="T:System.Windows.Media.Visual"/>
            </summary>
        </member>
        <member name="F:Catel.Windows.VisualExtensions.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.VisualExtensions.DisableHardwareAcceleration(System.Windows.Media.Visual)">
            <summary>
            Disables the hardware acceleration for the specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <remarks>
            When the visual is not yet loaded, this method tries to subscribe to the <c>Control.Loaded</c> event so disabled the 
            hardware acceleration as soon as the control is loaded.
            </remarks>
            <exception cref="T:System.ArgumentNullException">when <paramref name="visual"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.VisualExtensions.OnVisualLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [visual loaded].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.MVVM.Services.MessageService">
            <summary>
            Message service that implements the <see cref="T:Catel.MVVM.Services.IMessageService"/> by using the <see cref="T:System.Windows.MessageBox"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.TranslateMessageBoxResult(System.Windows.MessageBoxResult)">
            <summary>
            Translates the message box result.
            </summary>
            <param name="result">The result.</param>
            <returns>
            Corresponding <see cref="T:Catel.MVVM.Services.MessageResult"/>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.TranslateMessageImage(Catel.MVVM.Services.MessageImage)">
            <summary>
            Translates the message image.
            </summary>
            <param name="image">The image.</param>
            <returns>
            Corresponding <see cref="T:System.Windows.MessageBoxImage"/>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.TranslateMessageButton(Catel.MVVM.Services.MessageButton)">
            <summary>
            Translates the message button.
            </summary>
            <param name="button">The button.</param>
            <returns>
            Corresponding <see cref="T:System.Windows.MessageBoxButton"/>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.Exception)">
            <summary>
            Shows the error.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.String)">
            <summary>
            Shows the error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowError(System.String,System.String)">
            <summary>
            Shows the error.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowWarning(System.String)">
            <summary>
            Shows the warning.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowWarning(System.String,System.String)">
            <summary>
            Shows the warning.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowInformation(System.String)">
            <summary>
            Shows the information.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.ShowInformation(System.String,System.String)">
            <summary>
            Shows the information.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.String)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon to show.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="T:Catel.Windows.DataWindowMode">
            <summary>
            Mode of the <see cref="T:Catel.Windows.DataWindow"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.OkCancel">
            <summary>
            Window contains OK and Cancel buttons.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.OkCancelApply">
            <summary>
            Window contains OK, Cancel and Apply buttons.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.Close">
            <summary>
            Window contains Close button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowMode.Custom">
            <summary>
            Window contains custom buttons.
            </summary>
        </member>
        <member name="T:Catel.Windows.DataWindowDefaultButton">
            <summary>
            Available default buttons on the data window mode.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.OK">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.Apply">
            <summary>
            Apply button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.Close">
            <summary>
            Close button.
            </summary>
        </member>
        <member name="F:Catel.Windows.DataWindowDefaultButton.None">
            <summary>
            No button.
            </summary>
        </member>
        <member name="T:Catel.Windows.InfoBarMessageControlGenerationMode">
            <summary>
            Defines the way the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> is included in the <see cref="T:Catel.Windows.DataWindow"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.InfoBarMessageControlGenerationMode.None">
            <summary>
            No <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> is generated.
            </summary>
        </member>
        <member name="F:Catel.Windows.InfoBarMessageControlGenerationMode.Inline">
            <summary>
            Generate the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> as inline.
            </summary>
        </member>
        <member name="F:Catel.Windows.InfoBarMessageControlGenerationMode.Overlay">
            <summary>
            Generate the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> as overlay.
            </summary>
        </member>
        <member name="T:Catel.Windows.DataWindow`1">
            <summary>
            <see cref="T:System.Windows.Window"/> class that implements the <see cref="T:Catel.Windows.Controls.InfoBarMessageControl"/> and
            the default buttons, according to the <see cref="T:Catel.Windows.DataWindowMode"/>. Also supports MVVM out
            of the box by using the <see cref="T:Catel.MVVM.ViewModelBase"/>.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor">
            <summary>
            Initializes a new instance of this class with the <see cref="F:Catel.Windows.DataWindowMode.OkCancel"/> mode.
            </summary>
            <remarks>
            This constructor is public to support design mode.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButtons">The default buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButtons">The default buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel)">
            <summary>
            Initializes a new instance of this class with the <see cref="F:Catel.Windows.DataWindowMode.OkCancel"/> mode.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButton">The default button.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButtons">The default buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="defaultButtons">The default buttons.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.#ctor(Catel.MVVM.IViewModel,Catel.Windows.DataWindowMode,System.Collections.Generic.IEnumerable{Catel.Windows.DataWindowButton},Catel.Windows.DataWindowDefaultButton,System.Boolean,Catel.Windows.InfoBarMessageControlGenerationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.DataWindow"/> class.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="mode"><see cref="T:Catel.Windows.DataWindowMode"/>.</param>
            <param name="additionalButtons">The additional buttons.</param>
            <param name="defaultButton">The default button.</param>
            <param name="setOwnerAndFocus">if set to <c>true</c>, set the main window as owner window and focus the window.</param>
            <param name="infoBarMessageControlGenerationMode">The info bar message control generation mode.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnLoaded">
            <summary>
            Called when the <see cref="T:Catel.Windows.DataWindow"/> is loaded.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnUnloaded">
            <summary>
            Called when the <see cref="T:Catel.Windows.DataWindow"/> is unloaded.
            </summary>
            <remarks>
            This event happens later than <see cref="M:Catel.Windows.DataWindow`1.OnClosed(System.EventArgs)"/>, probably the last thing the window does.
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnInternalGridChanged">
            <summary>
            Called when the internal grid has changed.
            </summary>
            <remarks>
            This method is only invoked when the grid is set, not when the grid is cleared (which is something that should never happen).
            </remarks>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the current view model has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnDataWindowLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Loaded event of the DataWindow control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnViewModelClosed(System.Object,System.EventArgs)">
            <summary>
            Handles the Closed event of the ViewModel control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.ValidateData">
            <summary>
            Validates the data.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.DiscardChanges">
            <summary>
            Discards all changes made by this window.
            </summary>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.ApplyChanges">
            <summary>
            Applies all changes made by this window.
            </summary>
            <returns>True if successful, otherwise false.</returns>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Catel.Windows.DataWindow`1.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Catel.Windows.DataWindow`1.Catel#MVVM#IViewModelContainer#ViewModel">
            <summary>
            Gets the view model that is contained by the container.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="P:Catel.Windows.DataWindow`1.ViewModel">
            <summary>
            Gets the view model.
            </summary>
            <value>The view model.</value>
        </member>
        <member name="E:Catel.Windows.DataWindow`1.PropertyChanged">
            <summary>
            Occurs when a property on the container has changed.
            </summary>
            <remarks>
            This event makes it possible to externally subscribe to property changes of a <see cref="T:System.Windows.DependencyObject"/>
            (mostly the container of a view model) because the .NET Framework does not allows us to.
            </remarks>
        </member>
        <member name="E:Catel.Windows.DataWindow`1.ViewModelChanged">
            <summary>
            Occurs when the <see cref="P:Catel.Windows.DataWindow`1.ViewModel"/> property has changed.
            </summary>
        </member>
        <member name="T:Catel.Windows.WindowExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.GWL_EXSTYLE">
            <summary>
            Extended windows styles.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.GWL_STYLE">
            <summary>
            Window styles.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.WS_SYSMENU">
            <summary>
            Shows or hides a system menu.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window)">
            <summary>
            Sets the owner window to the main window of the current process.
            </summary>
            <param name="window">Reference to the current window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window)">
            <summary>
            Sets the owner window to the main window of the current process, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window to the main window of the current process.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window to the main window of the current process, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window)">
            <summary>
            Sets the owner window of a specific window via the Window class.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Windows.Window)">
            <summary>
            Sets the owner window of a specific window via the Window class, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the Window class.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.Windows.Window,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the Window class, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowByWindow(System.Windows.Window,System.Windows.Window,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.IntPtr)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.IntPtr)">
            <summary>
            Sets the owner window of a specific window via the window handle, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.IntPtr,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowAndFocus(System.Windows.Window,System.IntPtr,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle, but
            also sets the focus on the first control.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindowByHandle(System.Windows.Window,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window via the window handle.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="owner">New owner window.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.BringWindowToTop(System.Windows.Window)">
            <summary>
            Brings to specified window to top.
            </summary>
            <param name="window">The window to bring to top.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="window"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.SetOwnerWindow(System.Windows.Window,System.Windows.Window,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Sets the owner window of a specific window. It will first try to set the owner via
            the <paramref name="ownerWindow"/>. If the <paramref name="ownerWindow"/> is not available,
            this method will use the <paramref name="ownerHandle"/> to set the parent.
            </summary>
            <param name="window">Reference to the current window.</param>
            <param name="ownerWindow">New owner window.</param>
            <param name="ownerHandle">The owner handle.</param>
            <param name="forceNewOwner">If true, the new owner will be forced. Otherwise, if the
            window currently has an owner, that owner will be respected (and thus not changed).</param>
            <param name="focusFirstControl">If true, the first control will automatically be focused.</param>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.GetProcessMainWindowHandle">
            <summary>
            Returns the main window handle of the current process.
            </summary>
            <returns>Handle of the main window of the current process.</returns>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.HasOwner(System.Windows.Window)">
            <summary>
            Returns whether the window currently has an owner.
            </summary>
            <param name="window">Window to check.</param>
            <returns>
            True if the window has an owner, otherwise false.
            </returns>
        </member>
        <member name="M:Catel.Windows.WindowExtensions.RemoveIcon(System.Windows.Window)">
            <summary>
            Removes the icon from the window.
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="T:Catel.Windows.WindowExtensions.RECT">
            <summary>
            RECT struct for platform invokation.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:Catel.Windows.WindowExtensions.RECT.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="T:Catel.Windows.Documents.Rtf">
            <summary>
            Class defining all the Rtf constants and methods.
            </summary>
        </member>
        <member name="F:Catel.Windows.Documents.Rtf.RtfFontStyleMarker">
            <summary>
            Rtf marker for font style.
            </summary>
        </member>
        <member name="F:Catel.Windows.Documents.Rtf.RtfFontSizeMarker">
            <summary>
            Rtf marker for font size.
            </summary>
        </member>
        <member name="M:Catel.Windows.Documents.Rtf.ConvertPlainTextToRtf(System.String,System.Double,System.Windows.Media.FontFamily)">
            <summary>
            Converts plain text to Rtf with the newline bug fix.
            </summary>
            <param name="text">Text to convert.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontFamily">The font family.</param>
            <returns>Rtf version of the text.</returns>
        </member>
        <member name="M:Catel.Windows.Documents.Rtf.ConvertRtfToPlainText(System.String)">
            <summary>
            Converts the RTF to plain text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="T:Catel.Windows.Documents.TextRangeExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Documents.TextRange"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Documents.TextRangeExtensions.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Documents.TextRangeExtensions.IsEmpty(System.Windows.Documents.TextRange)">
            <summary>
            Checks whether a <see cref="T:System.Windows.Documents.TextRange"/> is empty or not.
            </summary>
            <param name="textRange">TextRange to check.</param>
            <returns>True if TextRange is empty, otherwhise false.</returns>
        </member>
        <member name="M:Catel.Windows.Documents.TextRangeExtensions.SetText(System.Windows.Documents.TextRange,System.String)">
            <summary>
            Sets text into a text range.
            </summary>
            <param name="range"><see cref="T:System.Windows.Documents.TextRange"/> to set the text into.</param>
            <param name="text">Text to set into the text range.</param>
        </member>
        <member name="M:Catel.Windows.Documents.TextRangeExtensions.GetText(System.Windows.Documents.TextRange)">
            <summary>
            Gets the text from a text range.
            </summary>
            <param name="range"><see cref="T:System.Windows.Documents.TextRange"/> to extract the text from.</param>
            <returns>Text in the text range.</returns>
        </member>
        <member name="M:Catel.Windows.Documents.TextRangeExtensions.ClearTextMargins(System.Windows.Documents.TextRange)">
            <summary>
            Clears the margins of a <see cref="T:System.Windows.Documents.TextRange"/>.
            </summary>
            <param name="range"><see cref="T:System.Windows.Documents.TextRange"/> to clear the margins of.</param>
        </member>
        <member name="M:Catel.Windows.Documents.TextRangeExtensions.ClearFormatting(System.Windows.Documents.TextRange)">
            <summary>
            Clears the formatting of a <see cref="T:System.Windows.Documents.TextRange"/>.
            </summary>
            <param name="range"><see cref="T:System.Windows.Documents.TextRange"/> to clear the formatting of.</param>
        </member>
        <member name="T:Catel.Windows.Documents.FlowDocumentExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Documents.FlowDocument"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Documents.FlowDocumentExtensions.CloneFlowDocument(System.Windows.Documents.FlowDocument)">
            <summary>
            Clones a <see cref="T:System.Windows.Documents.FlowDocument"/> object.
            </summary>
            <param name="flowDocument">FlowDocument to copy.</param>
            <returns>A copy of the FlowDocument.</returns>
        </member>
        <member name="M:Catel.Windows.Documents.FlowDocumentExtensions.SaveFlowDocument(System.Windows.Documents.FlowDocument)">
            <summary>
            Saves a <see cref="T:System.Windows.Documents.FlowDocument"/> to a file.
            </summary>
            <param name="flowDocument"><see cref="T:System.Windows.Documents.FlowDocument"/> to save.</param>
        </member>
        <member name="T:Catel.Windows.Designer">
            <summary>
            Designer class to add design-time support for view-model supporting UI elements such as the 
            <see cref="T:Catel.Windows.DataWindow`1"/> and <see cref="T:Catel.Windows.Controls.UserControl`1"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Designer.GetViewModel(System.Windows.DependencyObject)">
            <summary>
            Gets the type of the view model that is used during design time.
            <para/>
            The type of the view model must implement a public empty constructor for the
            designer to be able to construct the view model.
            <para/>
            The type must implement the <see cref="T:Catel.MVVM.IViewModel"/> interface.
            </summary>
            <param name="obj">The object.</param>
            <returns>The type of the view model to use during design time.</returns>
        </member>
        <member name="M:Catel.Windows.Designer.SetViewModel(System.Windows.DependencyObject,System.Type)">
            <summary>
            Sets the type of the view model that is used during design time.
            <para/>
            The type of the view model must implement a public empty constructor for the
            designer to be able to construct the view model.
            <para/>
            The type must implement the <see cref="T:Catel.MVVM.IViewModel"/> interface.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The type of the view model to use during design time.</param>
        </member>
        <member name="F:Catel.Windows.Designer.ViewModelProperty">
            <summary>
            Using a DependencyProperty as the backing store for ViewModel. This enables animation, styling, binding, etc... 
            </summary>
        </member>
        <member name="M:Catel.Windows.Designer.OnViewModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Catel.Windows.Designer.ViewModelProperty"/> attached property has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.Windows.DesignerHelper">
            <summary>
            Internal designer helper class.
            </summary>
        </member>
        <member name="M:Catel.Windows.DesignerHelper.CreateDesignTimeViewModel(System.Windows.FrameworkElement)">
            <summary>
            Creates the design time view model. This method automatically constructs and initializes the
            view model and finally sets the view model as datacontext.
            </summary>
            <param name="target">The target.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.Windows.DesignerHelper.IsCatelUserControl(System.Windows.FrameworkElement)">
            <summary>
            Determines whether the specified <paramref name="frameworkElement"/> is an instance of the Catel <see cref="T:Catel.Windows.Controls.UserControl`1"/>.
            </summary>
            <param name="frameworkElement">The framework element.</param>
            <returns>
            	<c>true</c> if the specified <paramref name="frameworkElement"/> is an instance of the Catel <see cref="T:Catel.Windows.Controls.UserControl`1"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Catel.Windows.Controls.RichToolTip">
            <summary>
            A kind-of Tooltip implementation that stays open once element is hovered and the content inside is responsive
            <para />
            It corresponds to most of the TooltipService attached properties so use them as you wish
            <para />
            Usage: (Like Tooltip)
            <![CDATA[
            <Control ToolTipService.Placement="Right">
                <xmlns-pfx:RichToolTip.PopupContent>
                    <TextBlock Text="This will be displayed in the popup" />
                </xmlns-pfx:RichToolTip.PopupContent>
            </Control>
            
            <Control ToolTipService.Placement="Right">
                <xmlns-pfx:RichToolTip.PopupContent>
                    <RichToolTip Placement="..." PlacementTarget="..." HorizontalOffset=".." and so on>
                        <TextBlock Text="This will be displayed in the popup" />
                    </RichToolTip>
                </xmlns-pfx:RichToolTip.PopupContent>
            </Control>
            ]]>
            <para />
            Known Issues:
            1 - I didn't have the time nor the strength to care about repositioning. I simply hide the popup whenever it would need repositioning. (Window movement, etc..) But it's ok since it's the default behavior of popup overall.
            2 - XBap mode sets transparency through a hack! supported only in full trust.
            3 - In XBap mode, moving the mouse slowly towards the popup will cause it to hide
            4 - In XBap mode, moving the mouse over the element shows the tooltip even when the browser isn't the active window
            </summary>
            <remarks>
            Originally found at http://blogs.microsoft.co.il/blogs/zuker/archive/2009/01/18/wpf-popups-and-tooltip-behavior-solution.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.Windows.Controls.RichToolTip"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.RichToolTip"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.RichToolTip"/> class.
            </summary>
            <param name="relatedObject">The related object.</param>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.Load(System.Windows.UIElement)">
            <summary>
            Loads the specified related object.
            </summary>
            <param name="relatedObject">The related object.</param>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.CloseCommand">
            <summary>
            Close command.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PlacementProperty">
            <summary>
            Placement property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PlacementTargetProperty">
            <summary>
            Placement target property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PlacementRectangleProperty">
            <summary>
            Placement rectangle property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.HorizontalOffsetProperty">
            <summary>
            Horizontal offset property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.VerticalOffsetProperty">
            <summary>
            Vertical offset property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.IsOpenProperty">
            <summary>
            IsOpen property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.GetHideOnClick(System.Windows.DependencyObject)">
            <summary>
            Gets the hide on click.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.SetHideOnClick(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the hide on click.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.HideOnClickProperty">
            <summary>
            Hide on click property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.GetPopupContent(System.Windows.DependencyObject)">
            <summary>
            Gets the content of the popup.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.SetPopupContent(System.Windows.DependencyObject,System.Object)">
            <summary>
            Sets the content of the popup.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Catel.Windows.Controls.RichToolTip.PopupContentProperty">
            <summary>
            Popup content property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.Show(System.Boolean)">
            <summary>
            Shows the specified animate.
            </summary>
            <param name="animate">if set to <c>true</c> [animate].</param>
        </member>
        <member name="M:Catel.Windows.Controls.RichToolTip.Hide(System.Boolean)">
            <summary>
            Hides the specified animate.
            </summary>
            <param name="animate">if set to <c>true</c> [animate].</param>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.RelatedObject">
            <summary>
            Gets the related object.
            </summary>
            <value>The related object.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.EnableAnimation">
            <summary>
            Gets or sets a value indicating whether to enable animation or not
            </summary>
            <value><c>true</c> if animation should be enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.Placement">
            <summary>
            Gets or sets the placement.
            </summary>
            <value>The placement.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.PlacementTarget">
            <summary>
            Gets or sets the placement target.
            </summary>
            <value>The placement target.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.PlacementRectangle">
            <summary>
            Gets or sets the placement rectangle.
            </summary>
            <value>The placement rectangle.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.HorizontalOffset">
            <summary>
            Gets or sets the horizontal offset.
            </summary>
            <value>The horizontal offset.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.VerticalOffset">
            <summary>
            Gets or sets the vertical offset.
            </summary>
            <value>The vertical offset.</value>
        </member>
        <member name="P:Catel.Windows.Controls.RichToolTip.IsOpen">
            <summary>
            Gets or sets a value indicating whether this instance is open.
            </summary>
            <value><c>true</c> if this instance is open; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.Windows.Controls.StackGrid">
            <summary>
            A grid-like control that allows a developer to specify the rows and columns, but gives the freedom
            not to define the actual grid and row numbers of the controls inside the <see cref="T:Catel.Windows.Controls.StackGrid"/>.
            <para/>
            The <see cref="T:Catel.Windows.Controls.StackGrid"/> automatically builds up the internal grid.
            </summary>
            <example>
            <code>
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
            	<ColumnDefinition Width="Auto"/>
            	<ColumnDefinition Width="*"/>
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name"/>
              <TextBox Text="{Bindng Name}"/>
            
              <!-- Empty row -->
              <EmptyRow/>
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}"/>
              </WrapPanel>
            </StackGrid>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.StackGrid"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.GetRowSpan(System.Windows.DependencyObject)">
            <summary>
            Gets the row span.
            </summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/> to get the row span for.</param>
            <returns>The row span value.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.SetRowSpan(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the row span.
            </summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/> to set the row span for.</param>
            <param name="value">The new row span value.</param>
        </member>
        <member name="F:Catel.Windows.Controls.StackGrid.RowSpanProperty">
            <summary>
            RowSpanProperty
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.OnRowSpanChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Catel.Windows.Controls.StackGrid.RowSpanProperty"/> has changed.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.GetColumnSpan(System.Windows.DependencyObject)">
            <summary>
            Gets the column span.
            </summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/> to get the column span for.</param>
            <returns>The column span value.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.SetColumnSpan(System.Windows.DependencyObject,System.Int32)">
            <summary>
            Sets the column span.
            </summary>
            <param name="dependencyObject">The <see cref="T:System.Windows.DependencyObject"/> to set the column span for.</param>
            <param name="value">The new column span value.</param>
        </member>
        <member name="F:Catel.Windows.Controls.StackGrid.ColumnSpanProperty">
            <summary>
            ColumnSpanProperty
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.OnColSpanChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Catel.Windows.Controls.StackGrid.ColumnSpanProperty"/> has changed.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Catel.Windows.Controls.StackGrid.RowDefinitionsProperty">
            <summary>
            RowDefinitions Property
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.StackGrid.ColumnDefinitionsProperty">
            <summary>
            ColumnDefinitions property.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.StackGrid.ShowGridLinesProperty">
            <summary>
            ShowGridLines property.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.OnShowGridLinesChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the OnShowGridLinesChanged.
            </summary>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.OnDefinitionsCollectionChanged``1(System.Collections.Specialized.NotifyCollectionChangedEventArgs,``0)">
            <summary>
            Raises the DefinitionsCollectionChanged event.
            </summary>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.FinalInitialize">
            <summary>
            Final initialize so the <see cref="T:Catel.Windows.Controls.StackGrid"/> is actually created.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.SetColumnsAndRows">
            <summary>
            Sets the columns and rows.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.MoveChildrenToGridChildren">
            <summary>
            Moves the children to grid children.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Catel.Windows.Controls.StackGrid.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.StackGrid.RowDefinitions">
            <summary>
            Gets or sets the row definitions.
            </summary>
            <value>The row definitions.</value>
        </member>
        <member name="P:Catel.Windows.Controls.StackGrid.ColumnDefinitions">
            <summary>
            Gets or sets the column definitions.
            </summary>
            <value>The column definitions.</value>
        </member>
        <member name="P:Catel.Windows.Controls.StackGrid.ShowGridLines">
            <summary>
            Gets or sets a value indicating whether to show grid lines or not.
            </summary>
            <value><c>true</c> if grid lines should be visible; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Catel.MVVM.UI.ControlToViewModelMapping">
            <summary>
            Holds the information for a control to viewmodel mapping. The information is based on the <see cref="T:Catel.MVVM.UI.ControlToViewModelAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlToViewModelMapping.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMapping.#ctor(System.String,System.String,Catel.MVVM.UI.ControlViewModelModelMappingType)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/> class.
            </summary>
            <param name="controlPropertyName">Name of the control property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <param name="mapping">The mapping type.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="controlPropertyName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="viewModelPropertyName"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="P:Catel.MVVM.UI.ControlToViewModelMapping.ControlPropertyName">
            <summary>
            Gets the name of the control property.
            </summary>
            <value>The name of the control property.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ControlToViewModelMapping.ViewModelPropertyName">
            <summary>
            Gets the name of the view model property.
            </summary>
            <value>The name of the view model property.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ControlToViewModelMapping.MappingType">
            <summary>
            Gets or sets the mapping type.
            </summary>
            <value>The mapping type.</value>
        </member>
        <member name="T:Catel.MVVM.UI.ControlToViewModelMappingHelper">
            <summary>
            Helper class to fix <see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/> for <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlToViewModelMappingHelper.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlToViewModelMappingHelper._viewModelContainers">
            <summary>
            Dictionary of <see cref="T:Catel.MVVM.IViewModelContainer"/> instances managed by this helper class.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlToViewModelMappingHelper._controlToViewModelMappingContainers">
            <summary>
            Dictionary of <see cref="T:Catel.MVVM.UI.ControlToViewModelMappingContainer"/> instances per type (which should be a <see cref="T:System.Windows.DependencyObject"/>).
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlToViewModelMappingHelper._ignoredViewModelChanges">
            <summary>
            List of properties in the view model that should be ignored.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlToViewModelMappingHelper._ignoredControlChanges">
            <summary>
            List of properties in the user control that should be ignored.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.#ctor(Catel.MVVM.IViewModelContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ControlToViewModelMappingHelper"/> class.
            </summary>
            <param name="viewModelContainer">The view model container.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="viewModelContainer"/> is not a <see cref="T:System.Windows.DependencyObject"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.InitializeControlToViewModelMappings(Catel.MVVM.IViewModelContainer)">
            <summary>
            Initializes the <see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/> for the specified <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
            <param name="viewModelContainer">The view model container to initialize the mappings for.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="viewModelContainer"/> is not a <see cref="T:System.Windows.DependencyObject"/>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.UninitializeControlToViewModelMappings(Catel.MVVM.IViewModelContainer)">
            <summary>
            Uninitializes the <see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/> for the specified <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
            <param name="viewModelContainer">The view model container the uninitialize the mappings for.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="viewModelContainer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.UninitializeControlToViewModelMappings">
            <summary>
            Uninitializes the <see cref="T:Catel.MVVM.UI.ControlToViewModelMapping"/> for the registered <see cref="T:Catel.MVVM.IViewModelContainer"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.InitializeViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Initializes the specified view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.UninitializeViewModel(Catel.MVVM.IViewModel)">
            <summary>
            Uninitializes the specified view model.
            </summary>
            <param name="viewModel">The view model.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.OnViewModelChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the view model on the view model container has changed.
            </summary>
            <param name="sender">The view model container.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.OnViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the view model has changed.
            </summary>
            <param name="sender">The view model.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.OnViewModelContainerPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property on the view model container has changed.
            </summary>
            <param name="sender">The view model container.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.TransferValueFromControlToViewModel(Catel.MVVM.IViewModel,System.String,System.String)">
            <summary>
            Transfers the value from a control property to the view model property.
            <para/>
            This method does nothing when <paramref name="viewModel"/> is <c>null</c>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="controlPropertyName">Name of the control property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="controlPropertyName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="viewModelPropertyName"/> is <c>null</c> or empty.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.TransferValueFromViewModelToControl(Catel.MVVM.IViewModel,System.String,System.String)">
            <summary>
            Transfers the value from a view model property to the control property.
            <para/>
            This method does nothing when <paramref name="viewModel"/> is <c>null</c>.
            </summary>
            <param name="viewModel">The view model.</param>
            <param name="controlPropertyName">Name of the control property.</param>
            <param name="viewModelPropertyName">Name of the view model property.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="controlPropertyName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="viewModelPropertyName"/> is <c>null</c> or empty.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelMappingHelper.TransferValue(System.Object,System.String,System.Object,System.String)">
            <summary>
            Transfers a value from the source property to the target property.
            </summary>
            <param name="source">The source.</param>
            <param name="sourcePropertyName">Name of the source property.</param>
            <param name="target">The target.</param>
            <param name="targetPropertyName">Name of the target property.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="source"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="target"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="sourcePropertyName"/> is <c>null</c> or empty.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="targetPropertyName"/> is <c>null</c> or empty.</exception>
            <remarks>
            This method does not check the type of the properties. If the types are incorrect, an exception will be thrown by
            the .NET Framework.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.UI.ControlToViewModelMappingHelper.ViewModelContainer">
            <summary>
            Gets the view model container.
            </summary>
            <value>The view model container.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ControlToViewModelMappingHelper.ViewModelContainerType">
            <summary>
            Gets the type of the view model container.
            </summary>
            <value>The type of the view model container.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ControlToViewModelMappingHelper.PreviousViewModel">
            <summary>
            Gets or sets the previous view model.
            </summary>
            <value>The previous view model.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ControlToViewModelMappingHelper.CurrentViewModel">
            <summary>
            Gets the current view model.
            </summary>
            <value>The current view model.</value>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ValueConverterGroup">
            <summary>
            A value converter which contains a list of IValueConverters and invokes their Convert or ConvertBack methods
            in the order that they exist in the list.  The output of one converter is piped into the next converter
            allowing for modular value converters to be chained together.  If the ConvertBack method is invoked, the
            value converters are executed in reverse order (highest to lowest index).  Do not leave an element in the
            Converters property collection null, every element must reference a valid IValueConverter instance. If a
            value converter's type is not decorated with the ValueConversionAttribute, an InvalidOperationException will be
            thrown when the converter is added to the Converters collection.
            
            Known limitations: the supplied parameter is used for ALL! converters.
            </summary>
            <remarks>
            Original source: http://www.codeproject.com/KB/WPF/PipingValueConverters_WPF.aspx
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.ValueConverterGroup"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.System#Windows#Data#IValueConverter#Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.System#Windows#Data#IValueConverter#ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.GetTargetType(System.Int32,System.Type,System.Boolean)">
            <summary>
            Returns the target type for a conversion operation.
            </summary>
            <param name="converterIndex">The index of the current converter about to be executed.</param>
            <param name="finalTargetType">The 'targetType' argument passed into the conversion method.</param>
            <param name="convert">Pass true if calling from the Convert method, or false if calling from ConvertBack.</param>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ValueConverterGroup.OnConvertersCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when [converters collection changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Catel.Windows.Data.Converters.ValueConverterGroup.Converters">
            <summary>
            Returns the list of IValueConverters contained in this converter.
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.MultiplyConverter">
            <summary>
            Calculate the product of given value and factor in parameter.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MultiplyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Calulate the product of given value and factor in parameter.
            </summary>
            <param name="value">Base value.</param>
            <param name="targetType">Not used, supports now int and double.</param>
            <param name="parameter">Factor used for multiply (always double).</param>
            <param name="culture">Not used.</param>
            <returns>Product of specified values.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MultiplyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Calculate value back.
            </summary>
            <param name="value">Base value.</param>
            <param name="targetType">Not used, supports now int and double.</param>
            <param name="parameter">Factor used for multiply (always double).</param>
            <param name="culture">Not used.</param>
            <returns>Original value.</returns>
        </member>
        <member name="T:Catel.Windows.Input.WindowCommands">
            <summary>
            Window commands.
            </summary>
        </member>
        <member name="M:Catel.Windows.Input.WindowCommands.#cctor">
            <summary>
            Initializes the static members of the <see cref="T:Catel.Windows.Input.WindowCommands"/> class.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.WindowCommands.ResetLayout">
            <summary>
            Reset layout
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.WindowCommands.Refresh">
            <summary>
            Refresh.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.WindowCommands.Clear">
            <summary>
            Clear.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.WindowCommands.OK">
            <summary>
            OK.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.WindowCommands.Apply">
            <summary>
            Apply.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.WindowCommands.Cancel">
            <summary>
            Cancel.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.WindowCommands.Close">
            <summary>
            Close.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.WindowCommands.CopyToClipboard">
            <summary>
            Copy to clipboard.
            </summary>
        </member>
        <member name="T:Catel.Windows.Input.BrowseForFileCommands">
            <summary>
            Browse for file commands.
            </summary>
        </member>
        <member name="M:Catel.Windows.Input.BrowseForFileCommands.#cctor">
            <summary>
            Constructor that initializes the commands.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.BrowseForFileCommands.Browse">
            <summary>
            Browse.
            </summary>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.String)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.
            </summary>
            
            <returns>
            The value of the specified attribute. If the attribute is not found, null is returned.
            </returns>
            
            <param name="name">The qualified name of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.String,System.String)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.
            </summary>
            
            <returns>
            The value of the specified attribute. If the attribute is not found, null is returned. This method does not move the reader.
            </returns>
            
            <param name="namespaceURI">The namespace URI of the attribute. </param>
            <param name="name">The local name of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.GetAttribute(System.Int32)">
            <summary>
            When overridden in a derived class, gets the value of the attribute with the specified index.
            </summary>
            
            <returns>
            The value of the specified attribute. This method does not move the reader.
            </returns>
            
            <param name="i">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToAttribute(System.String)">
            <summary>
            When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.Name"></see>.
            </summary>
            
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
            
            <param name="name">The qualified name of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            When overridden in a derived class, moves to the attribute with the specified <see cref="P:System.Xml.XmlReader.LocalName"></see> and <see cref="P:System.Xml.XmlReader.NamespaceURI"></see>.
            </summary>
            
            <returns>
            true if the attribute is found; otherwise, false. If false, the reader's position does not change.
            </returns>
            
            <param name="name">The local name of the attribute. </param>
            <param name="ns">The namespace URI of the attribute. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToFirstAttribute">
            <summary>
            When overridden in a derived class, moves to the first attribute.
            </summary>
            
            <returns>
            true if an attribute exists (the reader moves to the first attribute); otherwise, false (the position of the reader does not change).
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToNextAttribute">
            <summary>
            When overridden in a derived class, moves to the next attribute.
            </summary>
            
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.MoveToElement">
            <summary>
            When overridden in a derived class, moves to the element that contains the current attribute node.
            </summary>
            
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader does not change).
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ReadAttributeValue">
            <summary>
            When overridden in a derived class, parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            
            <returns>
            true if there are nodes to return.false if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.An empty attribute, such as, misc="", returns true with a single node with a value of String.Empty.
            </returns>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Read">
            <summary>
            When overridden in a derived class, reads the next node from the stream.
            </summary>
            
            <returns>
            true if the next node was read successfully; false if there are no more nodes to read.
            </returns>
            
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML. </exception>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Close">
            <summary>
            When overridden in a derived class, changes the <see cref="P:System.Xml.XmlReader.ReadState"></see> to Closed.
            </summary>
            
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.LookupNamespace(System.String)">
            <summary>
            When overridden in a derived class, resolves a namespace prefix in the current element's scope.
            </summary>
            
            <returns>
            The namespace URI to which the prefix maps or null if no matching prefix is found.
            </returns>
            
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ResolveEntity">
            <summary>
            When overridden in a derived class, resolves the entity reference for EntityReference nodes.
            </summary>
            
            <exception cref="T:System.InvalidOperationException">The reader is not positioned on an EntityReference node; this implementation of the reader cannot resolve entities (<see cref="P:System.Xml.XmlReader.CanResolveEntity"></see> returns false). </exception>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
            <summary>
            Gets a collection of defined prefix-namespace Mappings that are currently in scope.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IDictionary"></see> that contains the current in-scope namespaces.
            </returns>
            
            <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope"></see> value that specifies the type of namespace nodes to return.</param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
            <summary>
            Gets the namespace URI mapped to the specified prefix.
            </summary>
            
            <returns>
            The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.
            </returns>
            
            <param name="prefix">The prefix whose namespace URI you wish to find.</param>
        </member>
        <member name="M:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
            <summary>
            Gets the prefix that is mapped to the specified namespace URI.
            </summary>
            
            <returns>
            The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.
            </returns>
            
            <param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.NodeType">
            <summary>
            When overridden in a derived class, gets the type of the current node.
            </summary>
            
            <returns>
            One of the <see cref="T:System.Xml.XmlNodeType"></see> values representing the type of the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.LocalName">
            <summary>
            When overridden in a derived class, gets the local name of the current node.
            </summary>
            
            <returns>
            The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.NamespaceURI">
            <summary>
            When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.
            </summary>
            
            <returns>
            The namespace URI of the current node; otherwise an empty string.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Prefix">
            <summary>
            When overridden in a derived class, gets the namespace prefix associated with the current node.
            </summary>
            
            <returns>
            The namespace prefix associated with the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.HasValue">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlReader.Value"></see>.
            </summary>
            
            <returns>
            true if the node on which the reader is currently positioned can have a Value; otherwise, false. If false, the node has a value of String.Empty.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Resolver">
            <summary>
            Returns object used to resolve types
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Value">
            <summary>
            When overridden in a derived class, gets the text value of the current node.
            </summary>
            
            <returns>
            The value returned depends on the <see cref="P:System.Xml.XmlReader.NodeType"></see> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space between markup in a mixed content model. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. 
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.RootNamespaces">
            <summary>
            Return root namespaces
            </summary>
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.Depth">
            <summary>
            When overridden in a derived class, gets the depth of the current node in the XML document.
            </summary>
            
            <returns>
            The depth of the current node in the XML document.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.BaseURI">
            <summary>
            When overridden in a derived class, gets the base URI of the current node.
            </summary>
            
            <returns>
            The base URI of the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.IsEmptyElement">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
            </summary>
            
            <returns>
            true if the current node is an element (<see cref="P:System.Xml.XmlReader.NodeType"></see> equals XmlNodeType.Element) that ends with /&gt;; otherwise, false.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.AttributeCount">
            <summary>
            When overridden in a derived class, gets the number of attributes on the current node.
            </summary>
            
            <returns>
            The number of attributes on the current node.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.EOF">
            <summary>
            When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
            
            <returns>
            true if the reader is positioned at the end of the stream; otherwise, false.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.ReadState">
            <summary>
            When overridden in a derived class, gets the state of the reader.
            </summary>
            
            <returns>
            One of the <see cref="T:System.Xml.ReadState"></see> values.
            </returns>
            
        </member>
        <member name="P:Ricciolo.StylesExplorer.MarkupReflection.XmlBamlReader.NameTable">
            <summary>
            When overridden in a derived class, gets the <see cref="T:System.Xml.XmlNameTable"></see> associated with this implementation.
            </summary>
            
            <returns>
            The XmlNameTable enabling you to get the atomized version of a string within the node.
            </returns>
            
        </member>
        <member name="T:Catel.Windows.Data.DataResource">
            <summary>
            Class that represents a bound property value for a non-bindable property.
            </summary>
            <remarks>
            This code originally comes from: http://www.wpfmentor.com/2009/01/how-to-add-binding-to-commandparameter.html.
            </remarks>
        </member>
        <member name="F:Catel.Windows.Data.DataResource.BindingTargetProperty">
            <summary>
            Identifies the <see cref="P:Catel.Windows.Data.DataResource.BindingTarget"/> dependency property.
            </summary>
            <value>
            The identifier for the <see cref="P:Catel.Windows.Data.DataResource.BindingTarget"/> dependency property.
            </value>
        </member>
        <member name="M:Catel.Windows.Data.DataResource.CreateInstanceCore">
            <summary>
            Creates an instance of the specified type using that type's default constructor. 
            </summary>
            <returns>
            A reference to the newly created object.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.DataResource.CloneCore(System.Windows.Freezable)">
            <summary>
            Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable"/>
            using base (non-animated) property values. 
            </summary>
            <param name="sourceFreezable">
            The object to clone.
            </param>
        </member>
        <member name="P:Catel.Windows.Data.DataResource.BindingTarget">
            <summary>
            Gets or sets the binding target.
            </summary>
            <value>The binding target.</value>
        </member>
        <member name="T:Catel.Windows.Data.DataResourceBindingExtension">
            <summary>
            Data resource binding extension class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.DataResourceBindingExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">Object that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.DataResourceBindingExtension.OnDataResourceChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the data resource has changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Data.DataResourceBindingExtension.Convert(System.Object,System.Type)">
            <summary>
            Converts the specified object.
            </summary>
            <param name="obj">The object to convert.</param>
            <param name="toType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="P:Catel.Windows.Data.DataResourceBindingExtension.DataResource">
            <summary>
            Gets or sets the data resource.
            </summary>
            <value>The data resource.</value>
        </member>
        <member name="T:Catel.Windows.Data.Converters.RoutedUICommandToToolTipConverter">
            <summary>
            Converts the inputgestures of the routedUICommand to a tooltip text, when they're available.
            This increases the discoverability of the keyboard-shortcuts for the users.
            for instance: 
            with parameter: "Gereed (Ctrl + Return)"
            without parameter: "(Ctrl + Return)"
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.RoutedUICommandToToolTipConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the inputGestures into a string representation
            </summary>
            <param name="value">The routedUICommand</param>
            <param name="targetType">The type of the binding target (string)</param>
            <param name="parameter">Any string content that can be displayed before the shortcut</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The tooltip text. If there are no inputgestures, it returns an empty string
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.RoutedUICommandToToolTipConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <remarks>
            This method is currently not supported.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Controls.BrowseForFile">
            <summary>
            Interaction logic for BrowseForFile.xaml
            </summary>
            <summary>
            BrowseForFile
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.BrowseForFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.BrowseForFile"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.BrowseForFile.FileNameProperty">
            <summary>
            DependencyProperty definition as the backing store for FileName.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.BrowseForFile.Browse_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the Browse command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.BrowseForFile.Browse_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the Browse command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.Controls.BrowseForFile.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.BrowseForFile.FileName">
            <summary>
            Gets or sets FileName.
            </summary>
            <remarks>
            Wrapper for the FileName dependency property.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Services.OpenFileService">
            <summary>
            Service to open files.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.OpenFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns><c>true</c> if a file is selected; otherwise <c>false</c>.</returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.OpenFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.OpenFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.OpenFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Catel.MVVM.Services.OpenFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="T:Catel.Windows.PathHelper">
            <summary>
            Path helper class.
            </summary>
        </member>
        <member name="P:Catel.Windows.PathHelper.RelativeHelpMappingPath">
            <summary>
            Relative filename of the help mapping file.
            </summary>
        </member>
        <member name="P:Catel.Windows.PathHelper.FullHelpMappingPath">
            <summary>
            Full filename of the help mapping file.
            </summary>
        </member>
        <member name="P:Catel.Windows.PathHelper.RelativeTipOfTheDayPath">
            <summary>
            Relative filename of the tip of the day file.
            </summary>
        </member>
        <member name="P:Catel.Windows.PathHelper.FullTipOfTheDayPath">
            <summary>
            Full filename of the tip of the day file.
            </summary>
        </member>
        <member name="P:Catel.Windows.PathHelper.ApplicationDirectory">
            <summary>
            Gets the application directory.
            </summary>
            <value>The application directory.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.MessageService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IMessageService"/>.
            </summary>
            <example>
            <code>
            <![CDATA[
            
            Test.MessageService service = (Test.MessageService)GetService<IMessageService>();
            
            // Queue the next expected result
            service.ExpectedResults.Add(MessageResult.Yes);
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Services.Test.MessageService"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.Exception)">
            <summary>
            Shows the error.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.String)">
            <summary>
            Shows the error.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowError(System.String,System.String)">
            <summary>
            Shows the error.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowWarning(System.String)">
            <summary>
            Shows the warning.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowWarning(System.String,System.String)">
            <summary>
            Shows the warning.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowInformation(System.String)">
            <summary>
            Shows the information.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.ShowInformation(System.String,System.String)">
            <summary>
            Shows the information.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.String)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="M:Catel.MVVM.Services.Test.MessageService.Show(System.String,System.String,Catel.MVVM.Services.MessageButton,Catel.MVVM.Services.MessageImage)">
            <summary>
            Shows the specified message.
            </summary>
            <param name="message">The message.</param>
            <param name="caption">The caption.</param>
            <param name="button">The button.</param>
            <param name="icon">The icon to show.</param>
            <returns>The <see cref="T:Catel.MVVM.Services.MessageResult"/>.</returns>
        </member>
        <member name="P:Catel.MVVM.Services.Test.MessageService.ExpectedResults">
            <summary>
            Gets the queue of expected results.
            </summary>
            <value>The expected results.</value>
        </member>
        <member name="T:Catel.Windows.TraceOutputWindow">
            <summary>
            Interaction logic for TraceOutputWindow.xaml
            </summary>
            <summary>
            TraceOutputWindow
            </summary>
        </member>
        <member name="M:Catel.Windows.TraceOutputWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.TraceOutputWindow"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.TraceOutputWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.TraceOutputWindow.ActiveTraceLevel">
            <summary>
            Gets or sets the active trace level.
            </summary>
            <value>The active trace level.</value>
        </member>
        <member name="T:Catel.Windows.Media.ImageSourceExtensions">
            <summary>
            Extensions for the <see cref="T:System.Windows.Media.ImageSource"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.ImageSourceExtensions.ConvertByteArrayToImageSource(System.Byte[])">
            <summary>
            Converts an array of bytes to a <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="bytes">Bytes to convert.</param>
            <returns><see cref="T:System.Windows.Media.ImageSource"/>.</returns>
        </member>
        <member name="M:Catel.Windows.Media.ImageSourceExtensions.ConvertImageSourceToByteArray(System.Windows.Media.ImageSource)">
            <summary>
            Converts an <see cref="T:System.Windows.Media.ImageSource"/> to an array of bytes.
            </summary>
            <param name="image"><see creConvertImageSourceToByteArrayf="ImageSource"/> to convert.</param>
            <returns>Array of bytes.</returns>
        </member>
        <member name="T:Catel.Windows.Input.NavigationCommands">
            <summary>
            Navigation commands class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Input.NavigationCommands.#cctor">
            <summary>
            Constructor that initializes the commands.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.NavigationCommands.First">
            <summary>
            Navigate to first item.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.NavigationCommands.Previous">
            <summary>
            Navigate to previous item.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.NavigationCommands.Next">
            <summary>
            Navigate to next item.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.NavigationCommands.Last">
            <summary>
            Navigate to last item.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.NavigationCommands.Back">
            <summary>
            Navigate back.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.NavigationCommands.Forward">
            <summary>
            Navigate forward.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.NavigationCommands.Go">
            <summary>
            Navigate go.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.NavigationCommands.Home">
            <summary>
            Navigate home.
            </summary>
        </member>
        <member name="P:Catel.Windows.Input.NavigationCommands.OpenLinkUrl">
            <summary>
            Open an hyperlink url.
            </summary>
        </member>
        <member name="T:Catel.Windows.Markup.XamlTypeResolver">
            <summary>
            Custom <see cref="T:System.Windows.Markup.IXamlTypeResolver"/> because Microsoft "wisely" decided to make it internal.
            </summary>
            <remarks>
            This class was intended to be used by the <see cref="T:Catel.Windows.StyleHelper"/> class, but the issue was solved by
            using the <see cref="T:System.Windows.Markup.XamlTypeMapper"/> class. Therefore, this class is just party finished (but not yet thrown away).
            </remarks>
        </member>
        <member name="F:Catel.Windows.Markup.XamlTypeResolver.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Markup.XamlTypeResolver.Resolve(System.String)">
            <summary>
            When implemented in a derived class, resolves a XAML element to the corresponding type.
            </summary>
            <param name="qualifiedTypeName">The fully qualified type name to resolve.</param>
            <returns>
            The type that <paramref name="qualifiedTypeName"/> represents.
            </returns>
        </member>
        <member name="M:Catel.Windows.Markup.XamlTypeResolver.ResolveType(System.String)">
            <summary>
            Resolves the type.
            </summary>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:Catel.Windows.Markup.XamlTypeResolver.ResolveDotNetFrameworkType(System.String)">
            <summary>
            Resolves the type of the .NET Framework (thus a control located in the .NET Framework that can be used without
            namespace prefix in XAML).
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns>
            	<see cref="T:System.Type"/> or <c>null</c> if the name is not a .NET Framework type.
            </returns>
        </member>
        <member name="M:Catel.Windows.Markup.XamlTypeResolver.CleanUpTypeName(System.String)">
            <summary>
            Cleans up the name of the type by stripping "{x:Type" and "}" from the type name.
            </summary>
            <param name="typeName">Name of the type.</param>
            <returns></returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.RoutedUICommandToContentConverter">
            <summary>
            Converts the inputgestures of the routedUICommand to the Content text.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.RoutedUICommandToContentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Takes the text representation of the Command
            </summary>
            <param name="value">The routedUICommand</param>
            <param name="targetType">The type of the binding target (string)</param>
            <param name="parameter">Any string content that can be displayed before the shortcut</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            The command text. If there are no inputgestures, it returns an empty string
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.RoutedUICommandToContentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <remarks>
            This method is currently not supported.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.ReferenceToBooleanConverter">
            <summary>
            Implementation of class ReferenceToBooleanConverter
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert an object reference to a boolean value.
            </summary>
            <param name="value">The object reference to evaluate.</param>
            <param name="targetType">A targettype, currently not used.</param>
            <param name="parameter">A additional parameter</param>
            <param name="culture">A culture, currently not used.</param>
            <returns>
            When <paramref name="value"/> is not null the method returns true else false.
            Unless the passed <paramref name="parameter"/> parameter is true, then the
            output is inverted; meaning when <paramref name="value"/> is null the method
            returns true else false.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.ReferenceToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert nothing!
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">A targettype, currently not used.</param>
            <param name="parameter">A parameter value, currently not used.</param>
            <param name="culture">A culture, currently not used.</param>
            <returns>Nothing, only throws an exception.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.MethodToValueConverter">
            <summary>
            Converter to convert the result of a method to a value. This makes it possible to bind to a method.
            </summary>
            <example>
            {Binding MyObject, Converter={StaticResource MethodToValueConverter}, ConverterParameter='MyMethod'}
            </example>
            <remarks>
            Code originally comes from http://stackoverflow.com/questions/502250/bind-to-a-method-in-wpf.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MethodToValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.MethodToValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode">
            <summary>
            Available modes for the <see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverter"/>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.YesNo">
            <summary>
            True becomes <c>Yes</c>, false becomes <c>No</c>.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.X">
            <summary>
            True becomes <c>x</c>, false becomes <c></c> (thus empty).
            </summary>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToTextConverter">
            <summary>
            BooleanToTextConverter.
            </summary>
        </member>
        <member name="F:Catel.Windows.Data.Converters.BooleanToTextConverter.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a boolean value to text.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Not used.</param>
            <param name="parameter"><see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/>.</param>
            <param name="culture">Not used.</param>
            <returns>Text presentation of the boolean value.</returns>
            <remarks>
            If the parameter is invalid, or the method fails to parse the parameter, <see cref="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.YesNo"/>
            will be used to convert the value.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToTextConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not supported.
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToTextConverter.ParseMode(System.String)">
            <summary>
            Parses the parameter and returns a <see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/> that represents the parameter. 
            </summary>
            <param name="parameter"><see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/> as text.</param>
            <returns><see cref="T:Catel.Windows.Data.Converters.BooleanToTextConverterMode"/> as it was passed as a string.</returns>
            <remarks>
            If the parameter is invalid, or the method fails to parse the parameter, <see cref="F:Catel.Windows.Data.Converters.BooleanToTextConverterMode.YesNo"/>
            will be returned as a default value.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Controls.ScrollViewerProperties">
            <summary>
            Container class for custom Attached properties for ScrollViewer.
            </summary>
            <remarks>
            Source : http://serialseb.blogspot.com/2007/09/wpf-tips-6-preventing-scrollviewer-from.html
            </remarks>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.GetFixScrolling(System.Windows.DependencyObject)">
            <summary>
            Gets the fix scrolling.
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.SetFixScrolling(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the fix scrolling.
            </summary>
            <param name="obj">The obj.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="F:Catel.Windows.Controls.ScrollViewerProperties.FixScrollingProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.OnFixScrollingPropertyChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when [fix scrolling property changed].
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Catel.Windows.Controls.ScrollViewerProperties.HandlePreviewMouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles the preview mouse wheel.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Catel.MVVM.Services.PleaseWaitService">
            <summary>
            Please wait service to show a please wait window during background activities. This service uses the <see cref="T:Catel.Windows.PleaseWaitWindow"/>
            for the actual displaying of the please wait status to the user.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Show">
            <summary>
            Shows the please wait window with the default status text.
            </summary>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.PleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.PleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work 
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.UpdateStatus(System.String,System.Int32)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Catel.MVVM.Services.PleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="T:Catel.MVVM.Command`2">
            <summary>
            Class to implement commands in the <see cref="T:Catel.MVVM.ViewModelBase"/>.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
            <typeparam name="TCanExecuteParameter">The type of the can execute parameter.</typeparam>	
            <remarks>
            This is partly based on the Command as implemented in Cinch. Cinch is another open-source MVVM-framework
            (see http://cinch.codeplex.com), which (probably) based the command on http://marlongrech.wordpress.com/2008/11/26/avoiding-commandbinding-in-the-xaml-code-behind-files/.
            </remarks>
        </member>
        <member name="F:Catel.MVVM.Command`2._subscribedEventHandlers">
            <summary>
            List of subscribed event handlers so the commands can be unsubscribed upon disposing.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.#cctor">
            <summary>
            Initializes the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Func{`1,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.#ctor(System.Action{`0},System.Func{`1,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Catel.MVVM.Command`2"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Command`2.CanExecute(`1)">
            <summary>
            Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.Execute(`0)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="M:Catel.MVVM.Command`2.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:Catel.MVVM.Command`2.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="E:Catel.MVVM.Command`2.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="E:Catel.MVVM.Command`2.Executed">
            <summary>
            Occurs when the command has just been executed successfully.
            </summary>
        </member>
        <member name="P:Catel.MVVM.Command`2.Tag">
            <summary>
            Gets the tag for this command. A tag is a way to link any object to a command so you can use your own
            methods to recognize the commands, for example by ID or string.
            <para/>
            By default, the value is <c>null</c>.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Catel.MVVM.Command`1">
            <summary>
            Implements the <see cref="T:Catel.MVVM.Command`2"/> class with only the <typeparamref name="TExecuteParameter"/> as generic type.
            </summary>
            <typeparam name="TExecuteParameter">The type of the execute parameter.</typeparam>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action{`0},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action{`0},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
        </member>
        <member name="M:Catel.MVVM.Command`1.#ctor(System.Action{`0},System.Func{System.Object,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.MVVM.Command">
            <summary>
            Implements the <see cref="T:Catel.MVVM.Command`2"/> class with <see cref="T:System.Object"/> as generic types.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Command.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
        </member>
        <member name="M:Catel.MVVM.Command.#ctor(System.Action{System.Object},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="M:Catel.MVVM.Command.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
        </member>
        <member name="M:Catel.MVVM.Command.#ctor(System.Action{System.Object},System.Func{System.Object,System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.Command`2"/> class.
            </summary>
            <param name="execute">The action to execute.</param>
            <param name="canExecute">The function to call to determine wether the command can be executed.</param>
            <param name="tag">The tag of the command.</param>
        </member>
        <member name="T:Catel.Windows.Controls.EmptyRow">
            <summary>
            Control to fill up a row in the <see cref="T:Catel.Windows.Controls.StackGrid"/> control. This control will use an entire row to fill up.
            </summary>
            <example>
            <code>
            <StackGrid>
              <StackGrid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
              </StackGrid.RowDefinitions>
            
              <StackGrid.ColumnDefinitions>
            	<ColumnDefinition Width="Auto"/>
            	<ColumnDefinition Width="*"/>
              </StackGrid.ColumnDefinitions>
            
              <!-- Name, will be set to row 0, column 1 and 2 -->
              <Label Content="Name"/>
              <TextBox Text="{Bindng Name}"/>
            
              <!-- Empty row, will in this case use 2 columns -->
              <EmptyRow/>
            
              <!-- Wrappanel, will span 2 columns -->
              <WrapPanel StackGrid.ColumnSpan="2">
                <Button Command="{Binding OK}"/>
              </WrapPanel>
            </StackGrid>
            </code>
            </example>
        </member>
        <member name="M:Catel.Windows.Controls.EmptyRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Controls.EmptyRow"/> class.
            </summary>
        </member>
        <member name="T:Catel.MVVM.UI.ControlViewModelModelMappingType">
            <summary>
            Mapping types for the <see cref="T:Catel.MVVM.UI.ControlToViewModelAttribute"/>.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlViewModelModelMappingType.TwoWayDoNothing">
            <summary>
            Two way, which means that either the control or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, nothing happens when the view model of the user control
            changes. This way, it might be possible that the values of the control and the
            view model are different. The first one to update next will update the other.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlViewModelModelMappingType.TwoWayControlWins">
            <summary>
            Two way, which means that either the control or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, the value of the control is used when the view model 
            of the user control is changed, and is directly transferred to the view model value.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlViewModelModelMappingType.TwoWayViewModelWins">
            <summary>
            Two way, which means that either the control or the view model will update
            the values of the other party as soon as they are updated.
            <para />
            When this value is used, the value of the view model is used when the view model 
            of the user control is changed, and is directly transferred to the control value.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlViewModelModelMappingType.ControlToViewModel">
            <summary>
            The mapping is from the control to the view model only.
            </summary>
        </member>
        <member name="F:Catel.MVVM.UI.ControlViewModelModelMappingType.ViewModelToControl">
            <summary>
            The mapping is from the view model to the control only.
            </summary>
        </member>
        <member name="T:Catel.MVVM.UI.ControlToViewModelAttribute">
            <summary>
            A mapper attribute to map a <see cref="T:System.Windows.FrameworkElement"/> (such as the <see cref="T:Catel.Windows.Controls.UserControl`1"/>
            or the <see cref="T:Catel.Windows.DataWindow`1"/> property to a <see cref="T:Catel.MVVM.ViewModelBase"/> property.
            <para/>
            This class is very useful when creating custom user controls that need more parameterized settings than just the
            <c>DataContext</c> property.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ControlToViewModelAttribute"/> class.
            </summary>
        </member>
        <member name="M:Catel.MVVM.UI.ControlToViewModelAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.MVVM.UI.ControlToViewModelAttribute"/> class.
            </summary>
            <param name="viewModelPropertyName">Name of the view model property.</param>
        </member>
        <member name="P:Catel.MVVM.UI.ControlToViewModelAttribute.ViewModelPropertyName">
            <summary>
            Gets or sets the view model property name.
            </summary>
            <value>The view model property name.</value>
        </member>
        <member name="P:Catel.MVVM.UI.ControlToViewModelAttribute.MappingType">
            <summary>
            Gets or sets the type of the mapping.
            </summary>
            <value>The type of the mapping.</value>
        </member>
        <member name="T:Catel.Windows.Controls.VisualWrapper">
            <summary>
            This visual wrapper is used by VisualTargetPresentationSource
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.VisualWrapper.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
        </member>
        <member name="P:Catel.Windows.Controls.VisualWrapper.Child">
            <summary>
            Gets or sets the child.
            </summary>
            <value>The child.</value>
        </member>
        <member name="P:Catel.Windows.Controls.VisualWrapper.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <value></value>
            <returns>
            The number of visual child elements for this element.
            </returns>
        </member>
        <member name="T:Catel.Windows.TipOfTheDayMode">
            <summary>
            Mode of the tip of the day.
            </summary>
        </member>
        <member name="F:Catel.Windows.TipOfTheDayMode.Normal">
            <summary>
            Normal mode.
            </summary>
        </member>
        <member name="F:Catel.Windows.TipOfTheDayMode.Preview">
            <summary>
            Preview mode.
            </summary>
        </member>
        <member name="T:Catel.Windows.TipOfTheDayWindow">
            <summary>
            Interaction logic for TipOfTheDayWindow.xaml
            </summary>
            <summary>
            TipOfTheDayWindow
            </summary>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.#ctor(Catel.Windows.Data.TipOfTheDayItem)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.TipOfTheDayWindow"/> class.
            </summary>
            <param name="tip">The tip.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.TipOfTheDayWindow"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.TipOfTheDayWindow.ActiveTipOfTheDayPropertyKey">
            <summary>
            Definition of the dependency property is private.
            </summary>
        </member>
        <member name="F:Catel.Windows.TipOfTheDayWindow.ActiveTipOfTheDayProperty">
            <summary>
            Read-only dependencyProperty definition as the backing store for ActiveTipOfTheDay.
            </summary>
        </member>
        <member name="F:Catel.Windows.TipOfTheDayWindow.DoNotShowAgainProperty">
            <summary>
            DependencyProperty definition as the backing store for DoNotShowAgain.
            </summary>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.ShowNextTip_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the ShowNextTip command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.ShowNextTip_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the ShowNextTip command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.Close_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the Close command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.Close_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the Close command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.LaunchTipEditor_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determines whether the user can execute the LaunchTipEditor command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.LaunchTipEditor_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handled when the user invokes the LaunchTipEditor command.
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.ShowNextTip">
            <summary>
            Shows the next tip.
            </summary>
        </member>
        <member name="M:Catel.Windows.TipOfTheDayWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.TipOfTheDayWindow.TipOfTheDay">
            <summary>
            Gets or sets the tip of the day.
            </summary>
            <value>The tip of the day.</value>
        </member>
        <member name="P:Catel.Windows.TipOfTheDayWindow.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Catel.Windows.TipOfTheDayWindow.HasTipsToShow">
            <summary>
            Gets whether there are tips to show.
            </summary>
        </member>
        <member name="P:Catel.Windows.TipOfTheDayWindow.ActiveTipOfTheDay">
            <summary>
            Gets or sets ActiveTipOfTheDay.
            </summary>
            <remarks>
            Wrapper for the ActiveTipOfTheDay dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.TipOfTheDayWindow.DoNotShowAgain">
            <summary>
            Gets or sets DoNotShowAgain.
            </summary>
            <remarks>
            Wrapper for the DoNotShowAgain dependency property.
            </remarks>
        </member>
        <member name="T:Ricciolo.StylesExplorer.MarkupReflection.IType">
            <summary>
            Interface rappresenting a DotNet type
            </summary>
        </member>
        <member name="T:Catel.Windows.FrameworkElementExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.GetForegroundWindow">
            <summary>
            The GetForegroundWindow function returns a handle to the foreground window.
            </summary>
        </member>
        <member name="F:Catel.Windows.FrameworkElementExtensions.Log">
            <summary>
            The <see cref="T:log4net.ILog">log</see> object.
            </summary>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.BringWindowToTop(System.Windows.FrameworkElement)">
            <summary>
            Activates the window this framework element contains to.
            </summary>
            <param name="frameworkElement">Reference to the current <see cref="T:System.Windows.FrameworkElement"/>.</param>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.GetParentBindingGroup(System.Windows.FrameworkElement)">
            <summary>
            Get first parent binding group from specified element.
            </summary>
            <param name="frameworkElement">Reference to the current <see cref="T:System.Windows.FrameworkElement"/>.</param>
            <returns>The first parent BindingGroup or null when not exists.</returns>
        </member>
        <member name="M:Catel.Windows.FrameworkElementExtensions.SetForegroundWindowEx(System.IntPtr)">
            <summary>
            Sets the foreground window (some "dirty" win32 stuff).
            </summary>
            <param name="hWnd">Handle of the window to set to the front.</param>
            <remarks>
            This method takes over the input thread for the window. This means that you are unable
            to debug the code between "Attach" and "Detach" since the input thread of Visual Studio
            will be attached to the thread of the application.
            </remarks>
        </member>
        <member name="T:Catel.Windows.Data.Converters.NullableValueConverter">
            <summary>
            Converts a value to a representive value for nullable.
            </summary>
            <remarks>Resolves problem with databinding with nullables. When textbox hasn't a value then null is expected as return value.</remarks>
        </member>
        <member name="M:Catel.Windows.Data.Converters.NullableValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert to targettype.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type (only types with standard conversion are supported, System.Convert.ChangeType is used for conversion).</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.NullableValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back to nullable object.
            </summary>
            <param name="value">A value.</param>
            <param name="targetType">Target type (only types with standard conversion are supported, System.Convert.ChangeType is used for conversion).</param>
            <param name="parameter">Parameter.</param>
            <param name="culture">A culture.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter">
            <summary>
            Convert from bool to <see cref="T:System.Windows.Visibility" /> and back.
            The bool value true will be converted to Visibility.Visible.
            The bool value false will be converted to Visibility.Collapsed.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.#ctor(System.Windows.Visibility)">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter"/> class.
            </summary>
            <param name="notVisibleVisibility">The <see cref="T:System.Windows.Visibility"/> state when not visibible should be returned.</param>
            <exception cref="T:System.ArgumentException">when <paramref name="notVisibleVisibility"/> is <see cref="F:System.Windows.Visibility.Visible"/>.</exception>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.IsVisible(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines what value this converter should return.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            	<c>true</c> if the specified value is visible; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToCollapsingVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert Visibility back to bool.
            </summary>
            <param name="value">A value. Only value of type <see cref="T:System.Windows.Visibility" /> is supported,</param>
            <param name="targetType">A targettype, currently not used.</param>
            <param name="parameter">A parameter value, currently not used.</param>
            <param name="culture">A culture, currently not used.</param>
            <returns>
            When value is Visibility.Visible then true else false.
            </returns>
        </member>
        <member name="T:Catel.Windows.Data.Converters.BooleanToHidingVisibilityConverter">
            <summary>
            Convert from bool to <see cref="T:System.Windows.Visibility" /> and back.
            The bool value true will be converted to Visibility.Visible.
            The bool value false will be converted to Visibility.Hidden.
            </summary>
        </member>
        <member name="M:Catel.Windows.Data.Converters.BooleanToHidingVisibilityConverter.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:Catel.Windows.Constants">
            <summary>
            Class containing project wide constants.
            </summary>
        </member>
        <member name="F:Catel.Windows.Constants.HelpDirectory">
            <summary>
            Constant that defines the subdirectory of the help files.
            </summary>
        </member>
        <member name="T:Catel.Windows.Media.Effects.GrayscaleEffect">
            <summary>
            Grayscale effect to convert objects to a grayscale mode.
            </summary>
            <remarks>
            This code is originally taken from http://bursjootech.blogspot.com/2008/06/grayscale-effect-pixel-shader-effect-in.html.
            <para />
            During the build of Catel, this pixel shader effect will not be recompiled to prevent all users to install the
            DirectX SDK. If you want to make changes, take a look at the readme of Catel.
            </remarks>
        </member>
        <member name="M:Catel.Windows.Media.Effects.GrayscaleEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Catel.Windows.Media.Effects.GrayscaleEffect"/> class.
            </summary>
        </member>
        <member name="F:Catel.Windows.Media.Effects.GrayscaleEffect.DesaturationFactorProperty">
            <summary>
            Property definition for <see cref="P:Catel.Windows.Media.Effects.GrayscaleEffect.DesaturationFactor"/>.
            </summary>
        </member>
        <member name="M:Catel.Windows.Media.Effects.GrayscaleEffect.CreatePixelShader">
            <summary>
            Creates the pixel shader.
            </summary>
            <returns><see cref="T:System.Windows.Media.Effects.PixelShader"/>.</returns>
        </member>
        <member name="M:Catel.Windows.Media.Effects.GrayscaleEffect.CoerceDesaturationFactor(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the desaturation factor.
            </summary>
            <param name="d">The dependency object.</param>
            <param name="value">The value.</param>
            <returns>New factor.</returns>
        </member>
        <member name="P:Catel.Windows.Media.Effects.GrayscaleEffect.DesaturationFactor">
            <summary>
            Gets or sets the desaturation factor.
            </summary>
            <value>The desaturation factor.</value>
        </member>
        <member name="T:Catel.Windows.Controls.MultiLineInput">
            <summary>
            Interaction logic for MultiLineInput.xaml
            </summary>
            <summary>
            MultiLineInput
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MultiLineInput.#ctor">
            <summary>
            Initializes a new instance of this control.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MultiLineInput.CaptionProperty">
            <summary>
            DependencyProperty definition as the backing store for Caption.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MultiLineInput.TextProperty">
            <summary>
            DependencyProperty definition as the backing store for Text.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MultiLineInput.MaxTextLengthProperty">
            <summary>
            DependencyProperty definition as the backing store for MaxTextLength.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MultiLineInput.IsReadOnlyProperty">
            <summary>
            DependencyProperty definition as the backing store for IsReadOnly.
            </summary>
        </member>
        <member name="F:Catel.Windows.Controls.MultiLineInput.TextBoxBackgroundProperty">
            <summary>
            DependencyProperty definition as the backing store for TextBoxBackground.
            </summary>
        </member>
        <member name="M:Catel.Windows.Controls.MultiLineInput.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Catel.Windows.Controls.MultiLineInput.Caption">
            <summary>
            Gets or sets Caption.
            </summary>
            <remarks>
            Wrapper for the Caption dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MultiLineInput.Text">
            <summary>
            Gets or sets Text.
            </summary>
            <remarks>
            Wrapper for the Text dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MultiLineInput.MaxTextLength">
            <summary>
            Gets or sets MaxTextLength.
            </summary>
            <remarks>
            Wrapper for the MaxTextLength dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MultiLineInput.IsReadOnly">
            <summary>
            Gets or sets IsReadOnly.
            </summary>
            <remarks>
            Wrapper for the IsReadOnly dependency property.
            </remarks>
        </member>
        <member name="P:Catel.Windows.Controls.MultiLineInput.TextBoxBackground">
            <summary>
            Gets or sets TextBoxBackground.
            </summary>
            <remarks>
            Wrapper for the TextBoxBackground dependency property.
            </remarks>
        </member>
        <member name="T:Catel.MVVM.Services.SaveFileService">
            <summary>
            Service to save files.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.SaveFileService.DetermineFile">
            <summary>
            Determines the filename of the file what will be used.
            </summary>
            <returns><c>true</c> if a file is selected; otherwise <c>false</c>.</returns>
            <remarks>
            If this method returns <c>true</c>, the <see cref="P:Catel.MVVM.Services.SaveFileService.FileName"/> property will be filled with the filename. Otherwise,
            no changes will occur to the data of this object.
            </remarks>
        </member>
        <member name="P:Catel.MVVM.Services.SaveFileService.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:Catel.MVVM.Services.SaveFileService.Filter">
            <summary>
            Gets or sets the filter to use when opening or saving the file.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:Catel.MVVM.Services.SaveFileService.InitialDirectory">
            <summary>
            Gets or sets the initial directory.
            </summary>
            <value>The initial directory.</value>
        </member>
        <member name="T:Catel.MVVM.Services.Test.PleaseWaitService">
            <summary>
            Test implementation of the <see cref="T:Catel.MVVM.Services.IPleaseWaitService"/>.
            </summary>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Show">
            <summary>
            Shows the please wait window with the default status text.
            </summary>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Show(System.String)">
            <summary>
            Shows the please wait window with the specified status text.
            </summary>
            <param name="status">The status.</param>
            <remarks>
            When this method is used, the <see cref="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide"/> method must be called to hide the window again.
            </remarks>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate)">
            <summary>
            Shows the please wait window with the default status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Show(Catel.MVVM.Services.PleaseWaitWorkDelegate,System.String)">
            <summary>
            Shows the please wait window with the specified status text and executes the work delegate (in a background thread). When the work
            is finished, the please wait window will be automatically closed.
            </summary>
            <param name="workDelegate">The work delegate.</param>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.UpdateStatus(System.String)">
            <summary>
            Updates the status text.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.UpdateStatus(System.String,System.Int32)">
            <summary>
            Updates the status.
            </summary>
            <param name="status">The status.</param>
            <param name="width">The width.</param>
        </member>
        <member name="M:Catel.MVVM.Services.Test.PleaseWaitService.Hide">
            <summary>
            Hides this please wait window.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
